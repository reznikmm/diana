with USERPK; use USERPK;  -- need BYTE
with SEQUENTIAL_IO;
package GRMRTBL is
  -- Storage for parse tables

  -- State table
  type ST_TBL_TYPE is array (1 .. 1000) of INTEGER;
  ST_TBL:	ST_TBL_TYPE;
  -- > 0 -- index into ac_sym/ac_tbl
  -- < 0 -- same as ac_tbl entry
  ST_TBL_LAST:	INTEGER;

  -- Action table
  type AC_SYM_TYPE is array (1 .. 4800) of BYTE;
  AC_SYM:	AC_SYM_TYPE;
  -- before pointer from st_tbl
  -- -- nonter number
  -- after pointer from st_tbl
  -- -- ter number
  -- -- 0 is don't care
  type AC_TBL_TYPE is array (1 .. 6000) of SHORT;
  AC_TBL:	AC_TBL_TYPE;
  -- ac_sym index gives corresponding action
  -- > 0 --
  -- -- <  1000 -- shift state
  -- -- >= 1000 -- 1000*k + l
  -- --        where operation is GRMR_OP'VAL(k) -- never 0
  -- --        argument is ...'VAL(l)
  -- -- 	 for infix, unary -- arg is page; next word is line
  -- = 0 -- error
  -- < 0 -- -n, where n is:
  -- -- <  10000 -- go to n in ac_tbl
  -- -- >= 10000 -- 10000 + 1000*k + l -- pop k items; reduce to l
  AC_SYM_LAST:	INTEGER;
  AC_TBL_LAST:	INTEGER;

  -- Nonter table
  -- info to build txtrep for nonter (for debug purposes)
  type NTER_PG_TYPE is array (1 .. 255) of BYTE;
  NTER_PG:	NTER_PG_TYPE;
  type NTER_LN_TYPE is array (1 .. 255) of BYTE;
  NTER_LN:	NTER_LN_TYPE;
  NTER_LAST:	INTEGER;

  -- record for sequential IO save of table
  type GRMRTBL_RECORD is
    record
      ST_TBL:	    ST_TBL_TYPE;
      ST_TBL_LAST:  INTEGER;
      AC_SYM:	    AC_SYM_TYPE;
      AC_TBL:	    AC_TBL_TYPE;
      AC_SYM_LAST:  INTEGER;
      AC_TBL_LAST:  INTEGER;
      NTER_PG:	    NTER_PG_TYPE;
      NTER_LN:	    NTER_LN_TYPE;
      NTER_LAST:    INTEGER;
    end record;

  package GRMRTBL_IO is new SEQUENTIAL_IO(GRMRTBL_RECORD);

end GRMRTBL;
