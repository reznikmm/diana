with DIANA, DIANATTR, DIANAMAN; use DIANA, DIANATTR, DIANAMAN;
with PRENAME; use PRENAME;
with VISUTIL; use VISUTIL;
with REQUTIL; use REQUTIL;
with SEMGLOB; use SEMGLOB;
with DEFUTIL; use DEFUTIL;
with EXPTYPE; use EXPTYPE;
with EXPRESO; use EXPRESO;
with SETUTIL; use SETUTIL;
with NODWALK; use NODWALK;

package body PRAWALK is

    PRAGMA_ERROR: exception;

    procedure WALK_PRAGMA_ARGUMENTS(USED_NAME_ID, GEN_ASSOC_S: TREE; H: H_TYPE);

    procedure GET_ARGUMENT_NAME
		( USED_NAME_ID: 	TREE
		; ASSOC_LIST:		in out SEQ_TYPE
		; ASSOC_OUT:		out TREE
		; NEW_ASSOC_LIST:	in out SEQ_TYPE
		; ARGUMENT_LIST:	SEQ_TYPE );

    procedure GET_ARGUMENT_EXP
		( USED_NAME_ID: 	TREE
		; ASSOC_LIST:		in out SEQ_TYPE
		; ASSOC_OUT:		out TREE );

    procedure MUST_BE_SIMPLE_NAME (EXP: TREE);

    procedure MUST_BE_NAME (EXP: TREE);


    procedure WALK_PRAGMA
		( USED_NAME_ID: TREE
		; GEN_ASSOC_S:	TREE
		; H:		H_TYPE )
    is
	DEFLIST: SEQ_TYPE := LIST(D(LX_SYMREP,USED_NAME_ID));
	DEF: TREE;
	PRAGMA_DEFN: TREE := CONST_VOID;
    begin

	-- find the pragma_id
	while not IS_EMPTY(DEFLIST) loop
	    POP(DEFLIST, DEF);
	    PRAGMA_DEFN := D(XD_SOURCE_NAME, DEF);
	    if KIND(PRAGMA_DEFN) = DN_PRAGMA_ID then
		exit;
	    else
		PRAGMA_DEFN := CONST_VOID;
	    end if;
	end loop;

	-- store the pragma_id (or void)
	D(SM_DEFN, USED_NAME_ID, PRAGMA_DEFN);

	-- if pragma_id found
	if PRAGMA_DEFN /= CONST_VOID then

	    -- suppress fatal errors
	    PRAGMA_CONTEXT := USED_NAME_ID;

	    -- walk the arguments
	    WALK_PRAGMA_ARGUMENTS(USED_NAME_ID, GEN_ASSOC_S, H);

	    -- enable fatal errors
	    PRAGMA_CONTEXT := CONST_VOID;

	    -- if error in pragma, put out ignored message
	    if D(SM_DEFN, USED_NAME_ID) = CONST_VOID then
		raise PRAGMA_ERROR;
	    end if;

	-- else -- since pragma_id not found
	else

	    -- put out error
	    WARNING(D(LX_SRCPOS,USED_NAME_ID)
                    , "Pragma not known to implementation - "
		      & PRINTNAME(D(LX_SYMREP,USED_NAME_ID)) );
	end if;

    exception

	-- in case of error in argument evaluation
	when PRAGMA_ERROR =>

	    -- clear the pragma_id
	    D(SM_DEFN, USED_NAME_ID, CONST_VOID);

	    -- enable fatal errors
	    PRAGMA_CONTEXT := CONST_VOID;

	    WARNING(D(LX_SRCPOS,USED_NAME_ID)
                    , "Pragma ignored - "
		      & PRINTNAME(D(LX_SYMREP,USED_NAME_ID)) );
    end WALK_PRAGMA;


    procedure WALK_PRAGMA_ARGUMENTS(USED_NAME_ID, GEN_ASSOC_S: TREE; H: H_TYPE)
    is
	PRAGMA_ID:	TREE := D(SM_DEFN, USED_NAME_ID);
	ARGUMENT_ID_LIST: SEQ_TYPE := LIST(D(SM_ARGUMENT_ID_S,PRAGMA_ID));
	ASSOC_LIST:	SEQ_TYPE := LIST(GEN_ASSOC_S);
	ASSOC_NODE:	TREE;
	ASSOC_EXP:	TREE;
	ASSOC_TYPE:	TREE;
	DEFSET: 	DEFSET_TYPE;
	DEFINTERP:	DEFINTERP_TYPE;
	TYPESET:	TYPESET_TYPE;
	TYPEINTERP:	TYPEINTERP_TYPE;
	DEF:		TREE;
	ID:		TREE;
	IDLIST: 	SEQ_TYPE := MAKE;
	NEW_ASSOC_LIST: SEQ_TYPE := MAKE;
    begin

        case DEFINED_PRAGMAS'VAL(DI(XD_POS,D(SM_DEFN,USED_NAME_ID))) is

	when CONTROLLED =>
	    -- $$$$ immediately within declarative part or package specification
	    GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
	    MUST_BE_SIMPLE_NAME(ASSOC_EXP);
	    ASSOC_EXP := WALK_TYPE_MARK(ASSOC_EXP);
	    NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);
	    ASSOC_TYPE := GET_BASE_STRUCT(ASSOC_EXP);
	    if KIND(ASSOC_TYPE) /= DN_ACCESS
	    or else D(SM_DERIVED,ASSOC_TYPE) /= CONST_VOID then
                ERROR(D(LX_SRCPOS,ASSOC_EXP), "CONTROLLED not allowed for type");
	    elsif D(XD_REGION, D(XD_SOURCE_NAME,ASSOC_TYPE))
			/= D(XD_SOURCE_NAME, H.REGION_DEF)
	    then
                ERROR(D(LX_SRCPOS,ASSOC_EXP), "CONTROLLED not allowed here");
	    else
		DB(SM_IS_CONTROLLED, ASSOC_TYPE, TRUE);
	    end if;

	when ELABORATE =>
	    -- $$$$ only after context clause; must be in context clause
	    loop
		GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
		MUST_BE_SIMPLE_NAME(ASSOC_EXP);
		FIND_DIRECT_VISIBILITY(ASSOC_EXP, DEFSET);
		REQUIRE_UNIQUE_DEF(ASSOC_EXP, DEFSET);
		ASSOC_EXP := RESOLVE_NAME(ASSOC_EXP, GET_THE_ID(DEFSET));
		NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);
		if KIND(D(SM_DEFN,ASSOC_EXP)) not in CLASS_NON_TASK_NAME
		and d(SM_DEFN,ASSOC_EXP) /= CONST_VOID
		then
		    ERROR(D(LX_SRCPOS,ASSOC_EXP)
                                , "Library unit name required");
		end if;
		exit
		    when IS_EMPTY(ASSOC_LIST);
	    end loop;

	when INLINE =>
	    -- $$$$ at place of declarative item or following library unit
	    loop
		GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
		MUST_BE_SIMPLE_NAME(ASSOC_EXP);
		FIND_DIRECT_VISIBILITY(ASSOC_EXP, DEFSET);
		while not IS_EMPTY(DEFSET) loop
		    POP(DEFSET, DEFINTERP);
		    DEF := GET_DEF(DEFINTERP);
		    ID := D(XD_SOURCE_NAME, DEF);
		    if D(XD_REGION_DEF,DEF) = H.REGION_DEF
		    and then (KIND(ID) in CLASS_SUBPROG_NAME
			      or else (KIND(ID) = DN_GENERIC_ID
				       and then KIND(D(SM_SPEC,ID))
					    in DN_PROCEDURE_SPEC
					       .. DN_FUNCTION_SPEC))
		    then
			IDLIST := APPEND(IDLIST, ID);
			DB(SM_IS_INLINE, ID, TRUE);
		    end if;
		end loop;
		if IS_EMPTY(IDLIST) then
                    ERROR(D(LX_SRCPOS,ASSOC_EXP), "No such subprogram");
		end if;
		D(SM_DEFN,ASSOC_EXP,CAST_TREE(IDLIST));
		ASSOC_EXP := MAKE_USED_NAME_ID_FROM_OBJECT(ASSOC_EXP);
		NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);
		exit
		    when IS_EMPTY(ASSOC_LIST);
	    end loop;

	when INTERFACE =>
	    -- $$$$ at place of declarative item or following library unit spec
	    GET_ARGUMENT_NAME
		    ( USED_NAME_ID
		    , ASSOC_LIST
		    , ASSOC_EXP
		    , NEW_ASSOC_LIST
		    , ARGUMENT_ID_LIST );
	    GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
	    MUST_BE_NAME(ASSOC_EXP);
	    FIND_VISIBILITY(ASSOC_EXP, DEFSET);
	    while not IS_EMPTY(DEFSET) loop
		POP(DEFSET, DEFINTERP);
		DEF := GET_DEF(DEFINTERP);
		ID := D(XD_SOURCE_NAME, DEF);
		if D(XD_REGION_DEF,DEF) = H.REGION_DEF
		and then KIND(ID) in CLASS_SUBPROG_NAME
		then
		    IDLIST := APPEND(IDLIST, ID);
		    if D(XD_BODY,ID) /= CONST_VOID
		    or else D(XD_STUB,ID) /= CONST_VOID then
                        ERROR(D(LX_SRCPOS,ASSOC_EXP), "Body already given");
			raise PRAGMA_ERROR;
		    end if;
		end if;
	    end loop;
	    if IS_EMPTY(IDLIST) then
                ERROR(D(LX_SRCPOS,ASSOC_EXP), "No such subprogram");
	    end if;
	    D(SM_DEFN,ASSOC_EXP,CAST_TREE(IDLIST));
	    ASSOC_EXP := MAKE_USED_NAME_ID_FROM_OBJECT(ASSOC_EXP);
	    NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);
	    while not IS_EMPTY(IDLIST) loop
		POP(IDLIST,ID);
		D(SM_INTERFACE, ID, D(SM_DEFN,HEAD(NEW_ASSOC_LIST)));
	    end loop;

	when LIST =>
	    -- $$$$ not generating listing
	    GET_ARGUMENT_NAME
		    ( USED_NAME_ID
		    , ASSOC_LIST
		    , ASSOC_EXP
		    , NEW_ASSOC_LIST
		    , ARGUMENT_ID_LIST );

	when MEMORY_SIZE =>
            ERROR(D(LX_SRCPOS,USED_NAME_ID),"pragma MEMORY_SIZE not supported");
	    GET_ARGUMENT_EXP( USED_NAME_ID, ASSOC_LIST, ASSOC_EXP );

	when OPTIMIZE =>
	    GET_ARGUMENT_NAME
		    ( USED_NAME_ID
		    , ASSOC_LIST
		    , ASSOC_EXP
		    , NEW_ASSOC_LIST
		    , ARGUMENT_ID_LIST );

	when PACK =>
	    -- $$$$ positions as for representation clause; before rep attr
	    GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
	    MUST_BE_SIMPLE_NAME(ASSOC_EXP);
	    ASSOC_EXP := WALK_TYPE_MARK(ASSOC_EXP);
	    NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);
	    ASSOC_TYPE := GET_BASE_STRUCT(ASSOC_EXP);
	    if KIND(ASSOC_TYPE) not in DN_ARRAY .. DN_RECORD then
                ERROR(D(LX_SRCPOS,ASSOC_EXP), "PACK not allowed for type");
	    elsif D(XD_REGION, D(XD_SOURCE_NAME,ASSOC_TYPE))
			/= D(XD_SOURCE_NAME, H.REGION_DEF)
	    then
                ERROR(D(LX_SRCPOS,ASSOC_EXP), "PACK not allowed here");
	    else
		DB(SM_IS_PACKED, ASSOC_TYPE, TRUE);
	    end if;

	when PAGE =>
	    null;

	when PRIORITY =>
	    -- $$$$ task or main program
	    GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
	    EVAL_EXP_TYPES(ASSOC_EXP, TYPESET);
	    REQUIRE_TYPE(PREDEFINED_INTEGER, ASSOC_EXP, TYPESET);
	    ASSOC_EXP := RESOLVE_EXP(ASSOC_EXP, TYPESET);
	    if GET_STATIC_VALUE(ASSOC_EXP) = CONST_VOID then
                ERROR(D(LX_SRCPOS,ASSOC_EXP),"Priority must be static");
	    end if;
	    NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);

	when SHARED =>
	    -- $$$$ same declarative part or package specification
	    GET_ARGUMENT_EXP(USED_NAME_ID,ASSOC_LIST,ASSOC_EXP);
	    MUST_BE_SIMPLE_NAME(ASSOC_EXP);
	    ASSOC_EXP := WALK_NAME(DN_VARIABLE_ID, ASSOC_EXP);
	    NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_EXP);
	    ASSOC_TYPE := GET_BASE_STRUCT(ASSOC_EXP);
            if D(SM_DEFN,ASSOC_EXP) = CONST_VOID then
                null;
            elsif KIND(ASSOC_TYPE) in CLASS_SCALAR
	    or KIND(ASSOC_TYPE) = DN_ACCESS then
		if D(SM_RENAMES_OBJ,D(SM_DEFN,ASSOC_EXP)) = CONST_VOID then
		    DB(SM_IS_SHARED, D(SM_DEFN,ASSOC_EXP), TRUE);
		else
                    ERROR(D(LX_SRCPOS,ASSOC_EXP), "May not be shared");
		end if;
	    elsif ASSOC_TYPE /= CONST_VOID then
                ERROR(D(LX_SRCPOS,ASSOC_EXP), "Must be scalar or access type");
	    end if;

	when STORAGE_UNIT =>
	    ERROR(D(LX_SRCPOS,USED_NAME_ID)
                    , "pragma STORAGE_UNIT not supported");
	    GET_ARGUMENT_EXP( USED_NAME_ID, ASSOC_LIST, ASSOC_EXP );

	when SUPPRESS =>
	    -- $$$$ immediately within decl part or package spec
	    GET_ARGUMENT_NAME
		    ( USED_NAME_ID
		    , ASSOC_LIST
		    , ASSOC_EXP
		    , NEW_ASSOC_LIST
		    , TAIL(ARGUMENT_ID_LIST) );
	    if not IS_EMPTY(ASSOC_LIST) then
		POP(ASSOC_LIST, ASSOC_NODE);
		if KIND(ASSOC_NODE) = DN_ASSOC then
		    if D(LX_SYMREP,D(AS_USED_NAME,ASSOC_NODE))
				/= D(LX_SYMREP,HEAD(ARGUMENT_ID_LIST))
		    then
                        ERROR(D(LX_SRCPOS,ASSOC_NODE)
				, "Selector must be ON =>");
			raise PRAGMA_ERROR;
		    end if;
		    D(SM_DEFN,D(AS_USED_NAME,ASSOC_NODE),HEAD(ARGUMENT_ID_LIST));
		    ASSOC_EXP := D(AS_EXP, ASSOC_NODE);
		else
		    ASSOC_EXP := ASSOC_NODE;
		end if;
		if KIND(ASSOC_EXP) = DN_STRING_LITERAL then
		    ASSOC_EXP := MAKE_USED_OP_FROM_STRING(ASSOC_EXP);
		end if;
		MUST_BE_NAME(ASSOC_EXP);
		FIND_VISIBILITY(ASSOC_EXP, DEFSET);
		REQUIRE_UNIQUE_DEF(ASSOC_EXP, DEFSET);
		ID := GET_THE_ID(DEFSET);
		ASSOC_EXP := RESOLVE_NAME(ASSOC_EXP, ID);
                if KIND(ID) in CLASS_OBJECT_NAME'FIRST .. DN_GENERIC_ID
		and then KIND(ID) /= DN_PACKAGE_ID then
		    null;
		elsif ID /= CONST_VOID then
                    ERROR(D(LX_SRCPOS,ASSOC_EXP)
				,"SUPPRESS not allowed on this");
		end if;
		if KIND(ASSOC_NODE) = DN_ASSOC then
		    D(AS_EXP, ASSOC_NODE, ASSOC_EXP);
		else
		    ASSOC_NODE := ASSOC_EXP;
		end if;
		NEW_ASSOC_LIST := APPEND(NEW_ASSOC_LIST, ASSOC_NODE);
	    end if;

	when SYSTEM_NAME =>
	    ERROR(D(LX_SRCPOS,USED_NAME_ID)
                    , "pragma SYSTEM_NAME not supported");
	    GET_ARGUMENT_EXP( USED_NAME_ID, ASSOC_LIST, ASSOC_EXP );

	when PRENAME.DEBUG =>
	    GET_ARGUMENT_NAME
		    ( USED_NAME_ID
		    , ASSOC_LIST
		    , ASSOC_EXP
		    , NEW_ASSOC_LIST
		    , ARGUMENT_ID_LIST );
            case LIST_ARGUMENTS'VAL(DI(XD_POS,D(SM_DEFN,ASSOC_EXP))) is
	    when OFF =>
		USERPK.DEBUG := FALSE;
	    when ON =>
		USERPK.DEBUG := TRUE;
	    end case;

	end case;
	if not IS_EMPTY(ASSOC_LIST) then
            WARNING(D(LX_SRCPOS, USED_NAME_ID), "Too many pragma arguments");
	    raise PRAGMA_ERROR;
	end if;

	LIST(GEN_ASSOC_S, NEW_ASSOC_LIST);

    end WALK_PRAGMA_ARGUMENTS;

    procedure GET_ARGUMENT_NAME
		( USED_NAME_ID: 	TREE
		; ASSOC_LIST:		in out SEQ_TYPE
		; ASSOC_OUT:		out TREE
		; NEW_ASSOC_LIST:	in out SEQ_TYPE
		; ARGUMENT_LIST:	SEQ_TYPE )
    is
	TEMP_ARGUMENT_LIST:	SEQ_TYPE := ARGUMENT_LIST;
	ARGUMENT_ID:		TREE;
	ACTUAL_SYM:		TREE;
	ASSOC_EXP:		TREE;
    begin
	GET_ARGUMENT_EXP(USED_NAME_ID, ASSOC_LIST, ASSOC_EXP);
	if KIND(ASSOC_EXP) /= DN_USED_OBJECT_ID then
            WARNING(D(LX_SRCPOS,USED_NAME_ID), "Argument id required");
	    raise PRAGMA_ERROR;
	end if;

	ACTUAL_SYM := D(LX_SYMREP, ASSOC_EXP);
	ARGUMENT_ID := CONST_VOID;
	while not IS_EMPTY(TEMP_ARGUMENT_LIST) loop
	    if D(LX_SYMREP, HEAD(TEMP_ARGUMENT_LIST)) = ACTUAL_SYM then
		ARGUMENT_ID := HEAD(TEMP_ARGUMENT_LIST);
		exit;
	    end if;
	    TEMP_ARGUMENT_LIST := TAIL(TEMP_ARGUMENT_LIST);
	end loop;
	if ARGUMENT_ID = CONST_VOID then
            WARNING(D(LX_SRCPOS,USED_NAME_ID), "Argument id invalid");
	    raise PRAGMA_ERROR;
	end if;

	D(SM_DEFN, ASSOC_EXP, ARGUMENT_ID);
	NEW_ASSOC_LIST := APPEND
		( NEW_ASSOC_LIST, MAKE_USED_NAME_ID_FROM_OBJECT(ASSOC_EXP) );

	ASSOC_OUT := ASSOC_EXP;
    end GET_ARGUMENT_NAME;


    procedure GET_ARGUMENT_EXP
		( USED_NAME_ID: 	TREE
                ; ASSOC_LIST:           in out SEQ_TYPE
		; ASSOC_OUT:		out TREE )
    is
	ASSOC_EXP: TREE;
    begin
	if IS_EMPTY(ASSOC_LIST) then
            WARNING(D(LX_SRCPOS,USED_NAME_ID), "Argument required");
	    raise PRAGMA_ERROR;
	end if;

	POP(ASSOC_LIST, ASSOC_EXP);
	if KIND(ASSOC_EXP) = DN_STRING_LITERAL then
	    ASSOC_EXP := MAKE_USED_OP_FROM_STRING(ASSOC_EXP);
	end if;

	ASSOC_OUT := ASSOC_EXP;
    end GET_ARGUMENT_EXP;


    procedure MUST_BE_SIMPLE_NAME (EXP: TREE) is
    begin
	if KIND(EXP) /= DN_USED_OBJECT_ID then
            WARNING(D(LX_SRCPOS, EXP), "Simple name required");
	    raise PRAGMA_ERROR;
	end if;
    end MUST_BE_SIMPLE_NAME;


    procedure MUST_BE_NAME (EXP: TREE) is
    begin
	if KIND(EXP) not in CLASS_DESIGNATOR
	and then KIND(EXP) /= DN_SELECTED then
            WARNING(D(LX_SRCPOS, EXP), "Name required");
	    raise PRAGMA_ERROR;
	end if;
    end MUST_BE_NAME;

end PRAWALK;
