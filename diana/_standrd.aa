-- Definition of predefined environment, including predefined STANDARD
-- This file is passed through parsing, then massaged by a special program
-- Names beginning with underscore are not visible in Ada programs

package _standrd is

  package STANDARD is

    type BOOLEAN is (FALSE, TRUE);

    type INTEGER is range - 16#8000# .. 16#7FFF#;
    type LONG_INTEGER is range - 16#8000_0000# .. 16#7FFF_FFFF#;

    type FLOAT is digits 6 range
	- 16#1.FFFF_FE# * 2**126 .. 16#1.FFFF_FE# * 2**126;
    type LONG_FLOAT is digits 15 range
	- 16#1.FFFF_FFFF_FFFF_F# * 2**1022 .. 16#1.FFFF_FFFF_FFFF_F# * 2**1022;

    type CHARACTER is

      ( _nul,  _soh,  _stx,  _etx,	  _eot, _enq,  _ack,  _bel,
	_bs,   _ht,   _lf,   _vt,	  _ff,	_cr,   _so,   _si,
	_dle,  _dc1,  _dc2,  _dc3,	  _dc4, _nak,  _syn,  _etb,
	_can,  _em,   _sub,  _esc,	  _fs,	_gs,   _rs,   _us,

        ' ',  '!',  '"',  '#',    '$',  '%',  '&',  ''',
        '(',  ')',  '*',  '+',    ',',  '-',  '.',  '/',
        '0',  '1',  '2',  '3',    '4',  '5',  '6',  '7',
        '8',  '9',  ':',  ';',    '<',  '=',  '>',  '?',

        '@',  'A',  'B',  'C',    'D',  'E',  'F',  'G',
        'H',  'I',  'J',  'K',    'L',  'M',  'N',  'O',
        'P',  'Q',  'R',  'S',    'T',  'U',  'V',  'W',
        'X',  'Y',  'Z',  '[',    '\',  ']',  '^',  '_',

        '`',  'a',  'b',  'c',    'd',  'e',  'f',  'g',
        'h',  'i',  'j',  'k',    'l',  'm',  'n',  'o',
        'p',  'q',  'r',  's',    't',  'u',  'v',  'w',
        'x',  'y',  'z',  '{',    '|',  '}',  '~',  _del );

    package ASCII is

      NUL  : constant CHARACTER := _nul;  SOH  : constant CHARACTER := _soh;
      STX  : constant CHARACTER := _stx;  ETX  : constant CHARACTER := _etx;
      EOT  : constant CHARACTER := _eot;  ENQ  : constant CHARACTER := _enq;
      ACK  : constant CHARACTER := _ack;  BEL  : constant CHARACTER := _bel;
      BS   : constant CHARACTER := _bs;   HT   : constant CHARACTER := _ht;
      LF   : constant CHARACTER := _lf;   VT   : constant CHARACTER := _vt;
      FF   : constant CHARACTER := _ff;   CR   : constant CHARACTER := _cr;
      SO   : constant CHARACTER := _so;   SI   : constant CHARACTER := _si;
      DLE  : constant CHARACTER := _dle;  DC1  : constant CHARACTER := _dc1;
      DC2  : constant CHARACTER := _dc2;  DC3  : constant CHARACTER := _dc3;
      DC4  : constant CHARACTER := _dc4;  NAK  : constant CHARACTER := _nak;
      SYN  : constant CHARACTER := _syn;  ETB  : constant CHARACTER := _etb;
      CAN  : constant CHARACTER := _can;  EM   : constant CHARACTER := _em;
      SUB  : constant CHARACTER := _sub;  ESC  : constant CHARACTER := _esc;
      FS   : constant CHARACTER := _fs;   GS   : constant CHARACTER := _gs;
      RS   : constant CHARACTER := _rs;   US   : constant CHARACTER := _us;
      DEL  : constant CHARACTER := _del;

      EXCLAM        : constant CHARACTER := '!';
      SHARP         : constant CHARACTER := '#';
      PERCENT       : constant CHARACTER := '%';
      COLON         : constant CHARACTER := ':';
      QUERY         : constant CHARACTER := '?';
      L_BRACKET     : constant CHARACTER := '[';
      R_BRACKET     : constant CHARACTER := ']';
      UNDERLINE     : constant CHARACTER := '_';
      L_BRACE       : constant CHARACTER := '{';
      R_BRACE       : constant CHARACTER := '}';

      QUOTATION     : constant CHARACTER := '"';
      DOLLAR        : constant CHARACTER := '$';
      AMPERSAND     : constant CHARACTER := '&';
      SEMICOLON     : constant CHARACTER := ';';
      AT_SIGN       : constant CHARACTER := '@';
      BACK_SLASH    : constant CHARACTER := '\';
      CIRCUMFLEX    : constant CHARACTER := '^';
      GRAVE         : constant CHARACTER := '`';
      BAR           : constant CHARACTER := '|';
      TILDE         : constant CHARACTER := '~';

      LC_A : constant CHARACTER := 'a';   LC_B : constant CHARACTER := 'b';
      LC_C : constant CHARACTER := 'c';   LC_D : constant CHARACTER := 'd';
      LC_E : constant CHARACTER := 'e';   LC_F : constant CHARACTER := 'f';
      LC_G : constant CHARACTER := 'g';   LC_H : constant CHARACTER := 'h';
      LC_I : constant CHARACTER := 'i';   LC_J : constant CHARACTER := 'j';
      LC_K : constant CHARACTER := 'k';   LC_L : constant CHARACTER := 'l';
      LC_M : constant CHARACTER := 'm';   LC_N : constant CHARACTER := 'n';
      LC_O : constant CHARACTER := 'o';   LC_P : constant CHARACTER := 'p';
      LC_Q : constant CHARACTER := 'q';   LC_R : constant CHARACTER := 'r';
      LC_S : constant CHARACTER := 's';   LC_T : constant CHARACTER := 't';
      LC_U : constant CHARACTER := 'u';   LC_V : constant CHARACTER := 'v';
      LC_W : constant CHARACTER := 'w';   LC_X : constant CHARACTER := 'x';
      LC_Y : constant CHARACTER := 'y';   LC_Z : constant CHARACTER := 'z';

    end ASCII;

    subtype NATURAL  is INTEGER range 0 .. 16#7FFF#;
    subtype POSITIVE is INTEGER range 1 .. 16#7FFF#;

    type STRING is array (POSITIVE range <>) of CHARACTER;
    -- pragma PACK(STRING);

    type DURATION is delta 2#1.0#E-14 range -86_400.0 .. 86_400.0;

    CONSTRAINT_ERROR : exception;
    NUMERIC_ERROR    : exception;
    PROGRAM_ERROR    : exception;
    STORAGE_ERROR    : exception;
    TASKING_ERROR    : exception;

    -- predefined address (renamed as ADDRESS in SYSTEM)
    type _address is new LONG_INTEGER;

  private
    -- Anonymous fixed type of which DURATION is a subtype
    type _duration is DELTA 2#1.0#E-14
	  range - 16#20000.0# .. 16#1FFFF.FFFC#;

    -- Specification of implementation sizes
    for BOOLEAN'SIZE use 1;
    for CHARACTER'SIZE use 8;
    for INTEGER'SIZE use 16;
    for LONG_INTEGER'SIZE use 32;
    for FLOAT'SIZE use 32;
    for LONG_FLOAT'SIZE use 64;
    for DURATION'SIZE use 32;
  end STANDARD;

end _standrd;
