with DIANA, DIANATTR, DIANAMAN; use DIANA, DIANATTR, DIANAMAN;
with DEFUTIL, VISUTIL; use DEFUTIL, VISUTIL;
with UARITH;
with SEMGLOB; use SEMGLOB;
with REDSUBP; use REDSUBP;
with REQUTIL; use REQUTIL;
with ATTWALK; use ATTWALK;

package body EXPTYPE is


    procedure REDUCE_EXP_TYPES
		( DEFSET:		DEFSET_TYPE
		; TYPESET:		out TYPESET_TYPE )
    is
	-- Find expression types of names in Defset

	TEMP_DEFSET:		DEFSET_TYPE := DEFSET;
	DEFINTERP:		DEFINTERP_TYPE;

	NEW_TYPESET:		TYPESET_TYPE := EMPTY_TYPESET;
	TYPE_SPEC:		TREE;
    begin
	-- for each given def
	while not IS_EMPTY(TEMP_DEFSET) loop
	    POP(TEMP_DEFSET, DEFINTERP);

	    -- get its type (when considered as an expression)
	    -- (i.e., if function name, then with all default parameters)
	    TYPE_SPEC := GET_DEF_EXP_TYPE(GET_DEF(DEFINTERP));

	    -- save type and implicit conversion information in typeset
	    if TYPE_SPEC /= CONST_VOID then
	        ADD_TO_TYPESET(NEW_TYPESET, TYPE_SPEC, GET_EXTRAINFO(DEFINTERP));
	    end if;
	end loop;

	-- return the new typeset
	TYPESET := NEW_TYPESET;
    end REDUCE_EXP_TYPES;

    procedure REDUCE_DESIGNATED_TYPES
		( PREFIX_TYPESET:	in out TYPESET_TYPE
		; TYPESET:		out TYPESET_TYPE )
    is
	TEMP_PREFIXSET: TYPESET_TYPE := PREFIX_TYPESET;
	PREFIX_INTERP:	TYPEINTERP_TYPE;
	PREFIX_TYPE:	TREE;
	PREFIX_STRUCT:	TREE;
	DESIG_TYPE:	TREE;

	NEW_PREFIXSET:	TYPESET_TYPE := EMPTY_TYPESET;
	NEW_TYPESET:	TYPESET_TYPE := EMPTY_TYPESET;
    begin
	while not IS_EMPTY(TEMP_PREFIXSET) loop
	    POP(TEMP_PREFIXSET, PREFIX_INTERP);
	    PREFIX_TYPE := GET_TYPE(PREFIX_INTERP);
	    PREFIX_STRUCT := GET_BASE_STRUCT(PREFIX_TYPE);

	    if KIND(PREFIX_STRUCT) = DN_ACCESS then
		DESIG_TYPE := GET_BASE_TYPE(D(SM_DESIG_TYPE,PREFIX_STRUCT));
		ADD_TO_TYPESET(NEW_PREFIXSET, PREFIX_INTERP);
		ADD_TO_TYPESET ( NEW_TYPESET, DESIG_TYPE
			       , GET_EXTRAINFO(PREFIX_INTERP) );
	    end if;
	end loop;

	PREFIX_TYPESET := NEW_PREFIXSET;
	TYPESET := NEW_TYPESET;
    end REDUCE_DESIGNATED_TYPES;

    procedure EVAL_EXP_TYPES
		( EXP:			    TREE
		; TYPESET:		    out TYPESET_TYPE )
    is
	IS_SUBTYPE:			BOOLEAN;
    begin
	EVAL_EXP_SUBTYPE_TYPES
		( EXP
		, TYPESET
		, IS_SUBTYPE );
	if IS_SUBTYPE then
            ERROR(D(LX_SRCPOS,EXP), "Expression (not subtype) required");
	    TYPESET := EMPTY_TYPESET;
	end if;
    end EVAL_EXP_TYPES;


    procedure EVAL_EXP_SUBTYPE_TYPES
		( EXP:			    TREE
		; TYPESET:		    out TYPESET_TYPE
		; IS_SUBTYPE_OUT:	    out BOOLEAN)
    is
	-- Checks that Exp represents an expression, subtype or void
	-- On return, Typeset is set of possible base types,
	-- ... with implicit conversion information
	-- If Exp represents a subtype or subtypes, Is_Subtype_Out is
	-- ... set to true; then Typeset is the set of possible base
	-- ... (There may be more than one, since the subtype may be
	-- ... of the form simple_expression .. simple_expression.)

	NEW_TYPESET:		TYPESET_TYPE := EMPTY_TYPESET;
	IS_SUBTYPE:		BOOLEAN;
    begin
	-- assume it is not a range
	IS_SUBTYPE_OUT := FALSE;

	-- if void, return with empty typeset
	if EXP = CONST_VOID then
	    TYPESET := EMPTY_TYPESET;
	    return;
	end if;


	if KIND(EXP) = DN_RANGE then
	    declare
		EXP1: constant TREE := D(AS_EXP1, EXP);
		EXP2: constant TREE := D(AS_EXP2, EXP);
		TYPESET_1: TYPESET_TYPE;
		TYPESET_2: TYPESET_TYPE;
	    begin
		EVAL_EXP_TYPES(EXP1, TYPESET_1);
		EVAL_EXP_TYPES(EXP2, TYPESET_2);
		REQUIRE_SAME_TYPES
			( EXP1, TYPESET_1
			, EXP2, TYPESET_2
			, NEW_TYPESET );
	    end;

	    IS_SUBTYPE_OUT := TRUE;
	    TYPESET := NEW_TYPESET;
	    return;
	end if;

	if KIND(EXP) = DN_SUBTYPE_INDICATION then
	    declare
		TYPE_SPEC: TREE := EVAL_SUBTYPE_INDICATION(EXP);
	    begin
		if TYPE_SPEC /= CONST_VOID then
		    ADD_TO_TYPESET(NEW_TYPESET, TYPE_SPEC);
		end if;
		TYPESET := NEW_TYPESET;
	    end;

	    IS_SUBTYPE_OUT := TRUE;
	    return;
	end if;

	-- check for named, assoc (e.g. in index constraint)
	if KIND(EXP) not in CLASS_EXP then
            ERROR(D(LX_SRCPOS, EXP), "Expression required");
	    TYPESET := EMPTY_TYPESET;
	    return;
	end if;


	-- Exp is syntactically an expression
        case CLASS_EXP'(KIND(EXP)) is

	-- when Class_Used_Object => -- see selected

	when DN_USED_OP | DN_USED_NAME_ID =>
            QUIT("Impossible argument for eval_exp_types");


	when DN_ATTRIBUTE =>
	    declare
		EXP_TYPE:	TREE;
	    begin
		EVAL_ATTRIBUTE(EXP, TYPESET, IS_SUBTYPE_OUT);
		return;
	    end;


	when CLASS_USED_OBJECT | DN_SELECTED =>
	    declare
		DEFSET: 		DEFSET_TYPE;
		SOURCE_NAME:		TREE;
	    begin
		FIND_VISIBILITY(EXP, DEFSET);
		if not IS_EMPTY(DEFSET) then
		    SOURCE_NAME := GET_THE_ID(DEFSET);
		    if KIND(SOURCE_NAME) in CLASS_TYPE_NAME
		    and then not ( KIND(GET_BASE_STRUCT(SOURCE_NAME))
						 = DN_TASK_SPEC
			    and then DI(XD_LEX_LEVEL, GET_DEF_FOR_ID
					( D(XD_SOURCE_NAME
					       , GET_BASE_STRUCT(SOURCE_NAME))))
					> 0 )
		    then
			ADD_TO_TYPESET(NEW_TYPESET, GET_BASE_TYPE(SOURCE_NAME));
			IS_SUBTYPE_OUT := TRUE;
		    else
			REDUCE_EXP_TYPES(DEFSET, NEW_TYPESET);
			if not IS_EMPTY(NEW_TYPESET) then
			    if KIND(GET_THE_TYPE(NEW_TYPESET))
					= DN_UNIVERSAL_INTEGER
			    then
				NEW_TYPESET := EMPTY_TYPESET;
				ADD_TO_TYPESET ( NEW_TYPESET
					       , MAKE(DN_ANY_INTEGER));
			    elsif KIND(GET_THE_TYPE(NEW_TYPESET))
					= DN_UNIVERSAL_REAL
			    then
				NEW_TYPESET := EMPTY_TYPESET;
				ADD_TO_TYPESET ( NEW_TYPESET
					       , MAKE(DN_ANY_REAL));
			    end if;
			end if;
		    end if;
		    STASH_DEFSET(EXP, DEFSET);
		end if;
	    end;


	when DN_FUNCTION_CALL =>
	    declare
		NAME: TREE := D(AS_NAME, EXP);
		GENERAL_ASSOC_S: TREE := D(AS_GENERAL_ASSOC_S, EXP);

		PARAM_LIST: SEQ_TYPE;
		PARAM: TREE;
	    begin
                case CLASS_EXP'(KIND(NAME)) is
		when DN_ATTRIBUTE =>
		    EVAL_ATTRIBUTE(EXP, TYPESET, IS_SUBTYPE_OUT);
		    return;

		when DN_USED_OBJECT_ID | DN_SELECTED | DN_USED_OP =>
		    EVAL_SUBP_CALL
			    ( EXP
			    , NEW_TYPESET );

		when DN_STRING_LITERAL =>
		    NAME := MAKE_USED_OP_FROM_STRING(NAME);
		    D(AS_NAME, EXP, NAME);
		    EVAL_SUBP_CALL
			    ( EXP
			    , NEW_TYPESET );

		when others =>
		    EVAL_SUBP_CALL
			    ( EXP
			    , NEW_TYPESET );
		end case;
	    end;


	when DN_INDEXED | DN_SLICE =>
            QUIT("Impossible argument for eval_exp_types");


	when DN_ALL =>
	    declare
		NAME: constant TREE := D(AS_NAME, EXP);
		PREFIX_TYPESET: TYPESET_TYPE;
	    begin
		-- get possible types of prefix
		EVAL_EXP_TYPES(NAME, PREFIX_TYPESET);

		-- if there were any
		if not IS_EMPTY(PREFIX_TYPESET) then

		    -- find the result types and revise prefix type lists
		    REDUCE_DESIGNATED_TYPES(PREFIX_TYPESET, NEW_TYPESET);

		    -- check that there were some
		    if IS_EMPTY(NEW_TYPESET) then
                        ERROR(D(LX_SRCPOS, EXP), "Prefix of .all not access");
		    end if;
		end if;

		-- save list of possible prefix types
		STASH_TYPESET( NAME, PREFIX_TYPESET);
	    end;


	when DN_SHORT_CIRCUIT => 
	    declare
		EXP1: constant TREE := D(AS_EXP1, EXP);
		EXP2: constant TREE := D(AS_EXP2, EXP);
		TYPESET_1: TYPESET_TYPE;
		TYPESET_2: TYPESET_TYPE;
	    begin

		-- evaluate the two expressions
		EVAL_EXP_TYPES(EXP1, TYPESET_1);
		EVAL_EXP_TYPES(EXP2, TYPESET_2);

		-- they must be of the same boolean type
		REQUIRE_BOOLEAN_TYPE(EXP1, TYPESET_1);
		REQUIRE_BOOLEAN_TYPE(EXP2, TYPESET_2);
		REQUIRE_SAME_TYPES
			(EXP1, TYPESET_1, EXP2, TYPESET_2, NEW_TYPESET);
	    end;


	when DN_NUMERIC_LITERAL =>
	    declare
		VALUE: TREE := UARITH.U_VALUE(PRINTNAME(D(LX_NUMREP, EXP)));
	    begin
		-- always a static value
		-- save the value in sm_value attribute
		D(SM_VALUE, EXP, VALUE);

		-- and construct type according as there was a decimal point
		if KIND(VALUE) = DN_REAL_VAL then
		    ADD_TO_TYPESET(NEW_TYPESET, MAKE(DN_ANY_REAL));
		else
		    ADD_TO_TYPESET(NEW_TYPESET, MAKE(DN_ANY_INTEGER));
		end if;
	    end;


	when DN_NULL_ACCESS =>
	    ADD_TO_TYPESET(NEW_TYPESET, MAKE(DN_ANY_ACCESS));


	when CLASS_MEMBERSHIP =>
	    -- result type is always boolean
	    -- operands will be looked at during resolve pass
	    ADD_TO_TYPESET(NEW_TYPESET, PREDEFINED_BOOLEAN);
	    D(SM_EXP_TYPE, EXP, PREDEFINED_BOOLEAN);


	when DN_CONVERSION =>
            QUIT("Impossible argument for eval_exp_types");


	when DN_QUALIFIED =>
	    declare
		NAME: constant TREE := D(AS_NAME, EXP);
		TYPE_SPEC: TREE := EVAL_TYPE_MARK(NAME);
	    begin
		-- type is given by the type mark
		-- operand will be looked at during resolve pass
		if TYPE_SPEC /= CONST_VOID then
		    ADD_TO_TYPESET(NEW_TYPESET, TYPE_SPEC);
		end if;
	    end;


	when DN_PARENTHESIZED =>
	    declare
		SUBEXP: constant TREE := D(AS_EXP, EXP);
	    begin
		-- Evaluare the expression and pass it on
		EVAL_EXP_TYPES
			( SUBEXP
			, NEW_TYPESET);
	    end;


	when DN_AGGREGATE =>
	    ADD_TO_TYPESET(NEW_TYPESET, MAKE(DN_ANY_COMPOSITE));


	when DN_STRING_LITERAL =>
	    ADD_TO_TYPESET(NEW_TYPESET, MAKE(DN_ANY_STRING));


	when DN_QUALIFIED_ALLOCATOR =>
	    declare
		QUALIFIED: constant TREE := D(AS_QUALIFIED, EXP);
		TEMP_TYPESET: TYPESET_TYPE;
		ANY_ACCESS_OF: TREE := MAKE(DN_ANY_ACCESS_OF);
	    begin
		EVAL_EXP_TYPES(QUALIFIED, TEMP_TYPESET);
		if not IS_EMPTY(TEMP_TYPESET) then
		    D(XD_ITEM, ANY_ACCESS_OF, GET_THE_TYPE(TEMP_TYPESET));
		    ADD_TO_TYPESET(NEW_TYPESET, ANY_ACCESS_OF);
		end if;
	    end;

	when  DN_SUBTYPE_ALLOCATOR =>
	    declare
		SUBTYPE_INDICATION: constant TREE
				:= D(AS_SUBTYPE_INDICATION, EXP);
		TYPE_SPEC: TREE := EVAL_SUBTYPE_INDICATION(SUBTYPE_INDICATION);
		ANY_ACCESS_OF: TREE := MAKE(DN_ANY_ACCESS_OF);
	    begin
		-- type is given by the subtype indication
		if TYPE_SPEC /= CONST_VOID then
		    D(XD_ITEM, ANY_ACCESS_OF, TYPE_SPEC);
		    ADD_TO_TYPESET(NEW_TYPESET, ANY_ACCESS_OF);
		end if;
	    end;

	end case;

	TYPESET := NEW_TYPESET;
    end EVAL_EXP_SUBTYPE_TYPES;


    function EVAL_TYPE_MARK(EXP: TREE) return TREE is
	-- exp must be a type mark (by the syntax)
	-- we determine visibility and check that it is one

	DEFSET: 		DEFSET_TYPE := EMPTY_DEFSET;
	TYPE_ID:		TREE := CONST_VOID;
    begin
	if KIND(EXP) = DN_SUBTYPE_INDICATION then
	    if D(AS_CONSTRAINT, EXP) /= CONST_VOID then
                ERROR(D(LX_SRCPOS,EXP), "Type mark required");
	    end if;
	    return EVAL_TYPE_MARK(D(AS_NAME, EXP));
	end if;

	if KIND(EXP) = DN_USED_OBJECT_ID then
	    FIND_DIRECT_VISIBILITY(EXP, DEFSET);
	elsif KIND(EXP) = DN_SELECTED
	and then KIND(D(AS_DESIGNATOR,EXP)) = DN_USED_OBJECT_ID then
	    FIND_SELECTED_VISIBILITY(EXP, DEFSET);
	else
            ERROR(D(LX_SRCPOS,EXP), "Type mark required");
	    return CONST_VOID;
	end if;

	TYPE_ID := GET_THE_ID(DEFSET);
	if KIND(TYPE_ID) in CLASS_TYPE_NAME then
	    null;
	elsif TYPE_ID /= CONST_VOID then
            ERROR(D(LX_SRCPOS,EXP), "Not a type name - "
				    & PRINTNAME(D(LX_SYMREP,TYPE_ID)) );
	    TYPE_ID := CONST_VOID;
	end if;

	if KIND(EXP) = DN_USED_OBJECT_ID then
	    D(SM_DEFN, EXP, TYPE_ID);
	else -- since Kind(Exp) = Dn_Selected
	    D(SM_DEFN, D(AS_DESIGNATOR,EXP), TYPE_ID);
	end if;

	return GET_BASE_TYPE(TYPE_ID);
    end EVAL_TYPE_MARK;


    function EVAL_SUBTYPE_INDICATION(EXP: TREE) return TREE is
	BASE_TYPE: TREE;
    begin
	if KIND(EXP) = DN_SUBTYPE_INDICATION then
	    BASE_TYPE := EVAL_TYPE_MARK(D(AS_NAME, EXP));
	    -- note constraint evaluated in resolve pass
	    return BASE_TYPE;

	elsif KIND(EXP) = DN_USED_OBJECT_ID
	or else KIND(EXP) = DN_SELECTED then
	    return EVAL_TYPE_MARK(EXP);

	else
            QUIT("$$$$ node should be subtype indication");
	end if;
    end EVAL_SUBTYPE_INDICATION;


    procedure EVAL_RANGE
		( EXP:			    TREE
		; TYPESET:		    out TYPESET_TYPE)
    is
    begin -- Eval_Range
	if KIND(EXP) = DN_RANGE then
	    declare
		EXP_1:		constant TREE := D(AS_EXP1, EXP);
		EXP_2:		constant TREE := D(AS_EXP2, EXP);
		TYPESET_1:	TYPESET_TYPE;
		TYPESET_2:	TYPESET_TYPE;
	    begin
		EVAL_EXP_TYPES(EXP_1, TYPESET_1);
		EVAL_EXP_TYPES(EXP_2, TYPESET_2);
		REQUIRE_SCALAR_TYPE(EXP_1, TYPESET_1);
		REQUIRE_SCALAR_TYPE(EXP_2, TYPESET_2);
		REQUIRE_SAME_TYPES
				( EXP_1, TYPESET_1
				, EXP_2, TYPESET_2
				, TYPESET );
	    end;

	elsif KIND(EXP) = DN_ATTRIBUTE
	or else (KIND(EXP) = DN_FUNCTION_CALL
		 and then KIND(D(AS_NAME,EXP)) = DN_ATTRIBUTE)
	then
	    declare
		IS_SUBTYPE: BOOLEAN;
	    begin
		EVAL_ATTRIBUTE(EXP, TYPESET, IS_SUBTYPE);
		if not IS_SUBTYPE then
		    TYPESET := EMPTY_TYPESET;
                    ERROR(D(LX_SRCPOS,EXP), "RANGE attribute required");

		end if;
	    end;
	else
	    TYPESET := EMPTY_TYPESET;
            ERROR(D(LX_SRCPOS,EXP), "Range required");
	end if;
    end EVAL_RANGE;


    procedure EVAL_DISCRETE_RANGE
		( EXP:			    TREE
		; TYPESET:		    out TYPESET_TYPE)
    is
	NEW_TYPESET:	TYPESET_TYPE;
    begin -- Eval_Discrete_Range

        -- if it's a range or range attribute
	if KIND(EXP) = DN_RANGE
	or else KIND(EXP) = DN_ATTRIBUTE
	or else KIND(EXP) = DN_FUNCTION_CALL
	then

	    -- evaluate the range
	    EVAL_RANGE(EXP, NEW_TYPESET);

	-- else -- must be discrete subtype or subtype indication
	else -- must be a (discrete) subtype indication
	    declare
		SUBTYPE_INDICATION: TREE;
		TYPE_SPEC: TREE;
	    begin
		if KIND(EXP) = DN_DISCRETE_SUBTYPE then
		    SUBTYPE_INDICATION := D(AS_SUBTYPE_INDICATION, EXP);
		else
		    SUBTYPE_INDICATION := EXP;
		end if;

		NEW_TYPESET := EMPTY_TYPESET;
		TYPE_SPEC := EVAL_SUBTYPE_INDICATION(SUBTYPE_INDICATION);
		if TYPE_SPEC /= CONST_VOID then
		    ADD_TO_TYPESET(NEW_TYPESET, TYPE_SPEC);
		end if;
	    end;
	end if;

	REQUIRE_DISCRETE_TYPE(EXP, NEW_TYPESET);
	TYPESET := NEW_TYPESET;
    end EVAL_DISCRETE_RANGE;


    procedure EVAL_NON_UNIVERSAL_DISCRETE_RANGE
		( EXP:			    TREE
		; TYPESET:		    out TYPESET_TYPE)
    is
	-- Evaluate types of discrete range in a context where
	-- ... convertible universal_integer is taken as integer

	NEW_TYPESET:	TYPESET_TYPE;
	TYPE_NODE:	TREE;
    begin

	-- evaluate the discrete range
	EVAL_DISCRETE_RANGE(EXP, NEW_TYPESET);

	-- if there are interpretations
	if not IS_EMPTY(NEW_TYPESET) then

	    -- if interpretation is universal_integer
	    -- ... and context is convertible
	    TYPE_NODE := GET_THE_TYPE(NEW_TYPESET);
	    if KIND(TYPE_NODE) = DN_ANY_INTEGER
	    and then KIND(EXP) = DN_RANGE
	    and then KIND(D(AS_EXP1,EXP)) /= DN_PARENTHESIZED
	    and then KIND(D(AS_EXP2,EXP)) /= DN_PARENTHESIZED then

		-- replace with predefined integer
		NEW_TYPESET := EMPTY_TYPESET;
		ADD_TO_TYPESET(NEW_TYPESET, PREDEFINED_INTEGER);

	    -- else -- since interpretation is not convertible universal
	    else

		-- discard interpretations as universal_integer
		REQUIRE_NON_UNIVERSAL_TYPE(EXP, NEW_TYPESET);
	    end if;
	end if;

	-- return the reduced typeset
	TYPESET := NEW_TYPESET;
    end EVAL_NON_UNIVERSAL_DISCRETE_RANGE;


end EXPTYPE;
