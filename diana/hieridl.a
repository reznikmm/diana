with TEXT2_IO, USERPK, LALRIDL, DIANAMAN;
use  TEXT2_IO, USERPK, LALRIDL, DIANAMAN;
with TEXT_IO;

procedure HIERIDL is  -- Print indented chart of Diana

  RESULT_FILE: TEXT_IO.FILE_TYPE;
  DEFLIST: SEQ_TYPE;
  RULE_COUNT: INTEGER := -1;
  void_COUNT: INTEGER := -1;
  VBAR: constant STRING := "       |       |";
  SPACES: constant STRING := VBAR & VBAR & VBAR & VBAR & VBAR;
  INDENT: NATURAL := 0;

  procedure TAB is
  begin
    PUT(SPACES(1..2*INDENT));
  end TAB;

  procedure PROCESS_RULES(CLASS_RULE: TREE) is

    SYL_LIST: SEQ_TYPE;
    SYL_NODE: TREE;
    RULE_NODE: TREE;

    procedure PUT_TERMINAL (TER : in TREE) is
    begin  -- PUT_TERMINAL
      INDENT := INDENT + 1;
      TAB;
      PUT("=> ");
      PUT (PRINTNAME (D (XD_SYMREP, TER)));
      PUT(": ");
      if DI(XD_TER_NBR, TER) < 0 then
	PUT("Seq Of ");
      end if;
      PUT_LINE(PRINTNAME(D(LX_SRCPOS,TER)));
      INDENT := INDENT - 1;
    end PUT_TERMINAL;

    procedure PUT_RULE (RULE: in TREE) is

      TER_LIST	  :  SEQ_TYPE;
      TER:	     TREE;
      count:	     integer;

    begin  --  PUT_RULE
      if printname(d(xd_name,rule)) = "void" then
    	if void_count <= 0 then
          RULE_COUNT := RULE_COUNT + 1;
	  void_count := rule_count;
	end if;
	count := void_count;
      else	
        RULE_COUNT := RULE_COUNT + 1;
	count := rule_count;
      end if;
      INDENT := INDENT + 1;
      TAB;
      DI(XD_RULEINFO, RULE, RULE_COUNT);
      PUT (PRINTNAME ( D (XD_NAME, RULE)));
      PUT(" --");
      PUT_LINE(INTEGER'IMAGE(COUNT));
      TER_LIST := LIST (RULE);
      while not IS_EMPTY (TER_LIST)
      loop
	TER := HEAD(TER_LIST);
	PUT_TERMINAL ( TER );
	TER_LIST := TAIL (TER_LIST);
      end loop;
      INDENT := INDENT - 1;
    end PUT_RULE;

  begin  --  PROCESS_RULES
    TAB;
    PUT_LINE(PRINTNAME(D(XD_NAME, CLASS_RULE)));

    SYL_LIST := LIST(CLASS_RULE);
    while not IS_EMPTY (SYL_LIST) loop
      POP(SYL_LIST, SYL_NODE);
      if KIND(SYL_NODE) = DN_NONTERMINAL then
	null; -- handled in second of the two loops
      else
        PUT_TERMINAL (HEAD(LIST(D(XD_SYMREP,SYL_NODE))));
      end if;
    end loop;

    SYL_LIST := LIST(CLASS_RULE);
    while not IS_EMPTY (SYL_LIST) loop
      POP(SYL_LIST, SYL_NODE);
      if KIND(SYL_NODE) = DN_NONTERMINAL then
	RULE_NODE := D(XD_RULE, SYL_NODE);
        if DI(XD_RULEINFO, RULE_NODE) < 0 then
	  INDENT := INDENT + 1;
      	  PROCESS_RULES(D(XD_RULE, SYL_NODE));
	  INDENT := INDENT - 1;
        else
          PUT_RULE(RULE_NODE);
	end if;
      else
	null; -- handled in first of the two loops
      end if;
    end loop;

  end PROCESS_RULES;

begin  --  PUTIDL
  OPEN_DIANA;

--  CREATE(RESULT_FILE, NAME => "DIANATBL.NEW");
--  TEXT_IO.SET_OUTPUT(RESULT_FILE);

  DEFLIST := LIST(STORESYM("STANDARD_IDL"));
  if not IS_EMPTY(DEFLIST) then
    PROCESS_RULES(HEAD(DEFLIST));
  end if;

  NEW_LINE;
  NEW_LINE;

  DEFLIST := LIST(STORESYM("ALL_SOURCE"));
  if not IS_EMPTY(DEFLIST) then
    PROCESS_RULES(HEAD(DEFLIST));
  end if;

  NEW_LINE;
  NEW_LINE;

  DEFLIST := LIST(STORESYM("TYPE_SPEC"));
  if not IS_EMPTY(DEFLIST) then
    PROCESS_RULES(HEAD(DEFLIST));
  end if;

  NEW_LINE;
  NEW_LINE;

  DEFLIST := LIST(STORESYM("NON_DIANA"));
  if not IS_EMPTY(DEFLIST) then
    PROCESS_RULES(HEAD(DEFLIST));
  end if;

  TEXT_IO.SET_OUTPUT(TEXT_IO.STANDARD_OUTPUT);
--  CLOSE(RESULT_FILE);
end HIERIDL;
