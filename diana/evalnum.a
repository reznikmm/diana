with USERPK, TEXT2_IO, DIANA, DIANATTR, DIANAMAN, UNIVOPS;
use  USERPK, TEXT2_IO, DIANA, DIANATTR, DIANAMAN, UNIVOPS;
function EVALNUM(TXT: STRING) return TREE is
  subtype UDIGIT is SHORT;

  MAXCOL: constant INTEGER := TXT'LAST;
  COL: INTEGER := TXT'FIRST;
  CHR : CHARACTER := TXT(TXT'FIRST);
  SCALEFACTOR : INTEGER := INTEGER'LAST;
  VNUMER: VECTOR;
  VDENOM: VECTOR;
  RADIX:  INTEGER := 10;
  EXPONENT: INTEGER := 0;
  EXPONENT_POSITIVE: BOOLEAN := TRUE;

  function MAIN return TREE;
  procedure V_CLEAR(ARG: out VECTOR);
  procedure V_INCREMENT(DLTA: INTEGER; V: in out VECTOR);
  procedure NEXT_CHR;

  function MAIN return TREE is
  begin
    V_CLEAR(VNUMER);
    -- get integer val or radix
    while CHR in '0' .. '9' or else CHR = '.' or else CHR = '_' loop
      if CHR = '.' then
	SCALEFACTOR := 0;
      elsif CHR /= '_' then
        V_INCREMENT (CHARACTER'POS(CHR) - CHARACTER'POS('0'), VNUMER);
	SCALEFACTOR := SCALEFACTOR - 1;
      end if;
      NEXT_CHR;
    end loop;
    if CHR = '#' then
      RADIX := INTEGER(VNUMER.D(1));
      VNUMER.D(1) := 0;
      NEXT_CHR;
      while CHR /= '#' loop
        if CHR = '.' then
	  SCALEFACTOR := 0;
        elsif CHR = '_' then
	  null;
        elsif CHR <= '9' then
          V_INCREMENT (CHARACTER'POS(CHR) - CHARACTER'POS('0'), VNUMER);
	  SCALEFACTOR := SCALEFACTOR - 1;
	else
          V_INCREMENT (CHARACTER'POS(CHR) - CHARACTER'POS('A') + 10, VNUMER);
	  SCALEFACTOR := SCALEFACTOR - 1;
	end if;
	NEXT_CHR;
      end loop;
      NEXT_CHR;

    end if;
    if CHR = 'E' then
      NEXT_CHR;
      if CHR = '+' then
	NEXT_CHR;
      elsif CHR = '-' then
	NEXT_CHR;
	EXPONENT_POSITIVE := FALSE;
      end if;
      while CHR /= ' ' loop
	if EXPONENT > 3275 then
	  PUT_LINE ("Exponent in numeric lit too large");
	  raise ASSERTION_ERROR;
	end if;
        EXPONENT := EXPONENT * 10 + CHARACTER'POS(CHR) - CHARACTER'POS('0');
	NEXT_CHR;
      end loop;
      if not EXPONENT_POSITIVE then
	EXPONENT := - EXPONENT;
      end if;
    end if;
    if SCALEFACTOR < 0 then
      EXPONENT := EXPONENT + SCALEFACTOR;
      V_CLEAR(VDENOM);
      VDENOM.D(1) := 1;
    end if;

    if EXPONENT > 0 then
      for I in 1 .. EXPONENT loop
	V_SCALE(RADIX, VNUMER);
      end loop;
    elsif EXPONENT < 0 then
      for I in 1 .. - EXPONENT loop
	V_SCALE(RADIX, VDENOM);
      end loop;
    end if;

    if SCALEFACTOR >= 0 then
      VNUMER.D(VNUMER.L+1) := 0;
      return U_INT(VNUMER);
    else
      V_LOWEST_TERMS(VNUMER,VDENOM);
      VNUMER.D(VNUMER.L+1) := 0;
      VDENOM.D(VDENOM.L+1) := 0;
      return U_REAL(VNUMER, VDENOM);
    end if;
  end;

  procedure V_CLEAR(ARG: out VECTOR) is
  begin
    ARG.S := +1;
    ARG.L := 1;
    ARG.D(1) := 0;
  end V_CLEAR;

  procedure V_INCREMENT(DLTA: INTEGER; V: in out VECTOR) is
    TEMP: UDIGIT;
    CARRY : UDIGIT := 0;
  begin
    V_SCALE(RADIX,V);
    TEMP := V.D(1) + UDIGIT(DLTA);
    if TEMP >= 10000 then
      CARRY := 1;
      TEMP := TEMP - 10000;
    end if;
    V.D(1) := TEMP;
    for I in 2 .. V.L loop
      if CARRY = 0 then
	return;
      end if;
      TEMP := V.D(I) + 1;
      if TEMP >= 10000 then
	CARRY := 1;
	TEMP := TEMP - 10000;
      else
	CARRY := 0;
      end if;
      V.D(I) := TEMP;
    end loop;
    if CARRY > 0 then
      V.L := V.L + 1;
      V.D(V.L) := CARRY;
      NORMALIZE(V); -- to check for overflow
    end if;
  end V_INCREMENT;

  procedure NEXT_CHR is
  begin
    COL := COL + 1;
    if COL <= MAXCOL then
      CHR := TXT(COL);
    else
      CHR := ' ';
    end if;
  end NEXT_CHR;

begin
  return MAIN;
end EVALNUM;
