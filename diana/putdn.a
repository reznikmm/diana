with TEXT_IO; use  TEXT_IO;
with LOADDTBL; use LOADDTBL;

procedure PUTDN is   --  Generates the Ada package specification for DIANA

  RESULT_FILE: TEXT_IO.FILE_TYPE;

  ASSERTION_ERROR: exception;

  procedure PUT_HEADING is

  begin -- PUT_HEADING
    PUT_LINE ("with USERPK, DIANATTR; use USERPK, DIANATTR;");
    PUT_LINE ("package DIANA is");
    NEW_LINE;
  end PUT_HEADING;

  procedure PUT_NODE_NAMES is
  begin
    PUT_LINE ("  type NODE_NAME is");
    for NODE_INDEX in 0 .. LAST_NODE loop
      if NODE_INDEX = 0 then
        PUT (ASCII.HT & "( DN_");
      else
        PUT (ASCII.HT & ", DN_");
      end if;
      PUT_LINE (UPPER_CASE( NODE_ID(NODE_INDEX).all));
    end loop;
    PUT_LINE ("    );");
    NEW_LINE;
  end PUT_NODE_NAMES;

  procedure PUT_ATTRIBUTE_NAMES is
  begin

    PUT_LINE("package DIANATTR is");
    NEW_LINE;
    PUT_LINE ("  type ATTRIBUTE_NAME is");
    for ATTR_INDEX in 0 .. LAST_ATTR loop
      if ATTR_INDEX = 0 then
        PUT (ASCII.HT & "  ( ");
      else
        PUT (ASCII.HT & "  , ");
      end if;
      if ATTR_ID(ATTR_INDEX) = null then
	SET_OUTPUT(STANDARD_OUTPUT);
	PUT("Null attribute name .. ");
	PUT_LINE(ATTR_INDEX_TYPE'IMAGE(ATTR_INDEX));
	raise ASSERTION_ERROR;
      end if;
      PUT_LINE (UPPER_CASE( ATTR_ID(ATTR_INDEX).all));
    end loop;
    PUT_LINE ("    );");
    NEW_LINE;
    PUT_LINE("end DIANATTR;");
  end PUT_ATTRIBUTE_NAMES;

  procedure PUT_CLASSES is
  begin
    for CLASS_INDEX in 0 .. LAST_CLASS loop
      PUT("  subtype Class_");
      PUT(UPPER_CASE(CLASS_ID(CLASS_INDEX).all));
      PUT(" is NODE_NAME");
      if NODE_ID(CLASS_LOW(CLASS_INDEX))'LENGTH
	    + NODE_ID(CLASS_HIGH(CLASS_INDEX))'LENGTH + 18 + COL >= 80 
      then
	new_line;
	put(ascii.ht & "range DN_");
      else
	put(" range DN_");
      end if;
      PUT(UPPER_CASE(NODE_ID(CLASS_LOW(CLASS_INDEX)).all));
      PUT(" .. DN_");
      PUT(UPPER_CASE(NODE_ID(CLASS_HIGH(CLASS_INDEX)).all));
      PUT_LINE(";");
    end loop;
    NEW_LINE;
  end PUT_CLASSES;

  procedure PUT_PROCEDURE_SPECS is
  begin
    PUT_LINE ("  procedure CREATE_DIANA;");
    PUT_LINE ("  procedure OPEN_DIANA;");
    NEW_LINE;
    PUT_LINE ("  function MAKE (C: in NODE_NAME) return TREE;");
    PUT_LINE ("  -- procedure DESTROY (t: in TREE);");
    PUT_LINE ("  function KIND (T: in TREE) return NODE_NAME;");
    NEW_LINE;
    PUT_LINE ("  -- Other functions/procedures defined in IDLMAN.LIB");
    NEW_LINE;
    PUT_LINE ("  -- Attribute functions/procedures (Janus version)");
    NEW_LINE;
    PUT_LINE ("  procedure D (A: ATTRIBUTE_NAME; T: in TREE; V: in TREE);");
    PUT_LINE ("  function  D (A: ATTRIBUTE_NAME; T: in TREE) return TREE ;");
    NEW_LINE;
    PUT_LINE ("  procedure DB(A: ATTRIBUTE_NAME; T: in TREE; V: in BOOLEAN);");
    PUT_LINE ("  function  DB(A: ATTRIBUTE_NAME; T: in TREE) return BOOLEAN ;");
    NEW_LINE;
    PUT_LINE ("  -- for Ada (not universal) integers");
    PUT_LINE ("  procedure DI(A: ATTRIBUTE_NAME; T: in TREE; V: in  INTEGER);");
    PUT_LINE ("  function  DI(A: ATTRIBUTE_NAME; T: in TREE) return INTEGER ;");
    NEW_LINE;
    PUT_LINE ("  pragma INLINE (DB);");
    PUT_LINE ("  pragma INLINE (DI);");
    PUT_LINE ("  pragma INLINE (D);");
    NEW_LINE;
    PUT_LINE ("  function NODE_IMAGE (C: NODE_NAME) return STRING;");
    PUT_LINE ("  function ATTR_IMAGE (A: ATTRIBUTE_NAME) return STRING;");
    NEW_LINE;
    PUT_LINE ("end DIANA;");
  end PUT_PROCEDURE_SPECS;

begin -- PUTDN
  READ_TABLE;

  CREATE(RESULT_FILE, NAME => "DIANA.NEW");
  SET_OUTPUT(RESULT_FILE);

  PUT_LINE("-- This file contains specifications of DIANATTR and DIANA");
  PUT_LINE("-- It was generated by the program PUTDN");
  NEW_LINE;
  PUT_LINE ("-- following with clause only to make compile-order tools work");
  PUT_LINE ("with USERPK;");
  NEW_LINE;
  PUT_ATTRIBUTE_NAMES;

  NEW_LINE;
  PUT_HEADING;
  PUT_NODE_NAMES;
  PUT_CLASSES;
  PUT_PROCEDURE_SPECS;

  SET_OUTPUT(STANDARD_OUTPUT);
  CLOSE(RESULT_FILE);
end PUTDN;
