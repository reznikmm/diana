package body LSCAN is

  CHAR_CONTEXT:    BOOLEAN;
  ATTRIBUTE_CONTEXT: BOOLEAN;

  type TOKEN_TYPE is (NIL, IDENT, PUNCT, QUOTE, INT, DEC, CHAR, ERROR);

  HASH_SIZE : constant := 311;
  HASH_TABLE : array (0 .. INTEGER'(HASH_SIZE - 1)) of LEXTYPE;

  procedure NEXT_TOKEN(SOURCE_LINE: LINE;
	CHAR_CONTEXT: BOOLEAN;
	COL: in out NATURAL;
	F_COL: out NATURAL;
	TTYPE_OUT: out TOKEN_TYPE;
	TEXT_OUT: in out PNAME);

  function HASH_SEARCH (TXT: STRING) return LEXTYPE;

  function HASH_POS (TXT: STRING) return INTEGER;

  ----------------------------------------------------------------------

  procedure LEX_INIT is
    T_HASH : INTEGER;
  begin
    CHAR_CONTEXT := TRUE;
    ATTRIBUTE_CONTEXT := FALSE;

    for I in 0 .. HASH_TABLE'LAST loop
      HASH_TABLE(I) := LT_IDENTIFIER;
    end loop;
    for TY in LT_ABORT .. LT_BOX loop
      T_HASH := HASH_POS (LEX_IMAGE (TY));
      HASH_TABLE (T_HASH) := TY;
    end loop;
  end LEX_INIT;

  procedure LEX_SCAN(SOURCE_LINE: LINE;
	COL:	   in out NATURAL;	-- last col read
	F_COL:	   out NATURAL;		-- first col of token		
	TTYPE_OUT: out LEXTYPE;		-- type of token
	TEXT_OUT:  in out PNAME) 	-- text of token
  is
    TTYPE:  TOKEN_TYPE;
    TTYPE_TEMP: LEXTYPE; -- value for TTYPE_OUT that we can read
		-- warning! LEXTYPE and TOKEN_TYPE are different
  begin
    NEXT_TOKEN (SOURCE_LINE,CHAR_CONTEXT,COL,F_COL,TTYPE,TEXT_OUT);
    if TTYPE = NIL then
      TTYPE_TEMP := LT_END_MARK;
    else
      CHAR_CONTEXT := TRUE;
      if TTYPE = QUOTE then
	TTYPE_TEMP := LT_STRING_LIT;
      elsif TTYPE = INT or TTYPE = DEC then
	TTYPE_TEMP := LT_NUMERIC_LIT;
      elsif TTYPE = CHAR then
	TTYPE_TEMP := LT_CHAR_LIT;
      elsif TTYPE = ERROR then
	TTYPE_TEMP := LT_ERROR;
      else -- TTYPE = IDENT or PUNCT
	if ATTRIBUTE_CONTEXT and then TTYPE = IDENT then
	  TTYPE_TEMP := LT_IDENTIFIER;
	else
	  TTYPE_TEMP := HASH_SEARCH(TO_STRING(TEXT_OUT));
	end if;
	if TTYPE_TEMP = LT_IDENTIFIER then
	  if TTYPE = IDENT then
	    CHAR_CONTEXT := FALSE;
	  else
	    TTYPE_TEMP := LT_ERROR;
	  end if;
	end if;
      end if;
    end if;
    if TTYPE_TEMP = LT_APOSTROPHE then
      ATTRIBUTE_CONTEXT := TRUE;
    else
      ATTRIBUTE_CONTEXT := FALSE;
    end if;
    TTYPE_OUT := TTYPE_TEMP;
  end LEX_SCAN;

  ----------------------------------------------------------------------

  -- Lexical analysis for Ada
  -- Implemented as finite-state machine
  --	label = machine state
  --	goto  = transition

  -- To whom it may concern:
  --   Yes, this procedure is fraught with goto's, and, yes, goto's
  --   are considered harmful.  It was done this way because the
  --   original implementation was done under an Ada-like language
  --   which only had 64K available for data space, including the
  --   heap; the goto implementation takes almost no data space, but
  --   uses code instead.  Also, a lexical scanner can be considered
  --   an implementation of a finite-state machine; the implementation
  --   below exactly corresponds to a reduced finite-state machine.

  procedure NEXT_TOKEN(SOURCE_LINE: LINE;
	CHAR_CONTEXT: BOOLEAN;
	COL: in out NATURAL;
	F_COL: out NATURAL;
	TTYPE_OUT: out TOKEN_TYPE;
	TEXT_OUT: in out PNAME) is

    use ASCII;

    CASE_MAGIC: constant := CHARACTER'POS('a') - CHARACTER'POS('A');

    W_COL: NATURAL;
    TEXT: STRING(1 .. MAX_STRING); -- text of the token
    TTYPE: TOKEN_TYPE;
    CHR: CHARACTER;
    QUOTE_CHR: CHARACTER;
    BASE: INTEGER;
    BASE_DIGIT: CHARACTER;
    BASE_LETTER: CHARACTER;
    LINE_LENGTH: INTEGER;
    TOKEN_LENGTH: INTEGER; -- number of significant chars in TEXT

    SL: LINE renames SOURCE_LINE;

  begin
    LINE_LENGTH := SOURCE_LINE.LEN;
    W_COL := COL + 1;

    while W_COL <= LINE_LENGTH loop
      CHR := SL.BDY (W_COL);
      exit
        when CHR /= ' '
	and then CHR not in ASCII.HT .. ASCII.CR;
      W_COL := W_COL + 1;
    end loop;

    F_COL := W_COL;
    if W_COL > LINE_LENGTH then
      TOKEN_LENGTH := 0;
      TTYPE := NIL;
      goto ACCEPT_TOKEN;
    end if;

    TEXT (1) := CHR;
    TOKEN_LENGTH := 1;
    TTYPE := PUNCT;  -- Default type
    W_COL := W_COL + 1;
    if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;

    case TEXT (1) is
    when 'A' .. 'Z' =>
      TTYPE := IDENT;
      goto SCAN_IDENT;
    when '_' =>
      -- Allow leading underscore for system programming -- switch some day
      TTYPE := IDENT;
      goto SCAN_IDENT;
    when 'a' .. 'z' =>
      TEXT (1) := CHARACTER'VAL(CHARACTER'POS(TEXT(1)) - CASE_MAGIC);
      TTYPE := IDENT;
      goto SCAN_IDENT;
    when '0' .. '9' =>
      TTYPE := INT;
      goto SCAN_INT;
    when '"' | '%' =>
      TTYPE := QUOTE;
      QUOTE_CHR := TEXT (1);
      TEXT (1) := '"';
      goto SCAN_QUOTE;
    when ''' =>
      goto SCAN_CHAR;
    when '-' =>
      goto SCAN_COMMENT;
    when '=' =>
      goto SCAN_EQUAL;
    when '.' =>
      goto SCAN_PERIOD;
    when '*' =>
      goto SCAN_STAR;
    when ':' | '/' =>
      goto SCAN_COLON_SLASH;
    when '>' =>
      goto SCAN_GREATER_THAN;
    when '<' =>
      goto SCAN_LESS_THAN;
    when '&' | '(' | ')' | '+' | ',' | ';' | '|' =>
      goto ACCEPT_TOKEN;
    when '!' =>
      TEXT (1) := '|';
      goto ACCEPT_TOKEN;
    when others =>
      if TEXT (1) not in ' ' .. CHARACTER'VAL(127) then
        TEXT (1) := '?';
      end if;
      goto SCAN_ERROR;
    end case;

  <<SCAN_IDENT>>
    case CHR is
    when '_' =>
      goto SCAN_IDENT_UNDERLINE;
    when 'A' .. 'Z' | '0' .. '9' =>
      null;
    when 'a' .. 'z' =>
      CHR := CHARACTER'VAL(CHARACTER'POS(CHR) - CASE_MAGIC);
    when others =>
      goto ACCEPT_TOKEN;
    end case;
    TOKEN_LENGTH := TOKEN_LENGTH + 1;
    TEXT (TOKEN_LENGTH) := CHR;
    W_COL := W_COL + 1;
    if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
    goto SCAN_IDENT;

  <<SCAN_IDENT_UNDERLINE>>
    TOKEN_LENGTH := TOKEN_LENGTH + 1;
    TEXT (TOKEN_LENGTH) := CHR;
    W_COL := W_COL + 1;
    if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
    if CHR not in 'A' .. 'Z' and then CHR not in 'a' .. 'z'
    and then CHR not in '0' .. '9' then
      TTYPE := ERROR;
    end if;
    goto SCAN_IDENT;

  <<SCAN_INT>>
    case CHR is
    when '0' .. '9' =>
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_INT;
    when '_' =>
      goto SCAN_INT_UNDERLINE;
    when '.' =>
      goto SCAN_INT_PERIOD;
    when 'E' | 'e' =>
      goto SCAN_INT_E;
    when '#' | ':' =>
      QUOTE_CHR := CHR;
      goto SCAN_BASED_INT;
    when others =>
      goto ACCEPT_NUMBER;
    end case;

  <<SCAN_INT_UNDERLINE>>
    TOKEN_LENGTH := TOKEN_LENGTH + 1;
    TEXT (TOKEN_LENGTH) := CHR;
    W_COL := W_COL + 1;
    if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
    if CHR not in '0' .. '9' then
      TTYPE := ERROR;
    end if;
    goto SCAN_INT;

  <<SCAN_INT_PERIOD>>
    if W_COL < LINE_LENGTH and then SL.BDY (W_COL + 1) in '0' .. '9' then
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      CHR:=SL.BDY(W_COL);
      if TTYPE = INT then
	TTYPE := DEC;
      end if;
      -- goto SCAN_DEC;
    else
      goto ACCEPT_NUMBER;
    end if;

  <<SCAN_DEC>>
    case CHR is
    when '0' .. '9' =>
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_DEC;
    when '_' =>
      goto SCAN_DEC_UNDERLINE;
    when 'E' | 'e' =>
      goto SCAN_DEC_E;
    when others =>
      goto ACCEPT_NUMBER;
    end case;

  <<SCAN_DEC_UNDERLINE>>
    TOKEN_LENGTH := TOKEN_LENGTH + 1;
    TEXT (TOKEN_LENGTH) := CHR;
    W_COL := W_COL + 1;
    if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
    if CHR not in '0' .. '9' then
      TTYPE := ERROR;
    end if;
    goto SCAN_DEC;

  <<SCAN_BASED_INT>>
    BASE := 0;
    for I in 1 .. TOKEN_LENGTH loop
      if TEXT (I) in '0' .. '9' and then BASE <= 16 then
        BASE := BASE * 10 + CHARACTER'POS (TEXT (I)) - CHARACTER'POS ('0');
      end if;
    end loop;
    if BASE not in 2 .. 16 then
      TTYPE := ERROR;
      BASE := 16;
    end if;

    if BASE <= 9 then
      BASE_DIGIT := CHARACTER'VAL(CHARACTER'POS('0') + BASE - 1);
    else
      BASE_DIGIT := '9';
    end if;
    BASE_LETTER := CHARACTER'VAL(CHARACTER'POS('A') + BASE - 11);

    TOKEN_LENGTH := TOKEN_LENGTH + 1;
    TEXT (TOKEN_LENGTH) := '#';
    W_COL := W_COL + 1;
    if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
    if CHR in '0' .. '9' or else CHR in 'A' .. 'Z' or else CHR in 'a'..'z' then
      null; -- go to SCAN_BASED_INT_DIGIT
    else
      goto SCAN_ERROR;
    end if;

  <<SCAN_BASED_INT_DIGIT>>
    case CHR is
    when '0' .. '9' =>
      if CHR > BASE_DIGIT then
	TTYPE := ERROR;
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_BASED_INT_DIGIT;
    when 'A' .. 'Z' =>
      if CHR > BASE_LETTER then
	TTYPE := ERROR;
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_BASED_INT_DIGIT;
    when 'a' .. 'z' =>
      CHR := CHARACTER'VAL(CHARACTER'POS(CHR) - CASE_MAGIC);
      goto SCAN_BASED_INT_DIGIT;
    when '_' =>
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      if CHR not in '0' .. '9' and then CHR not in 'A' .. 'Z'
      and then CHR not in 'a' .. 'z' then
	TTYPE := ERROR;
      end if;
      goto SCAN_BASED_INT_DIGIT;
    when '#' | ':' =>
      if CHR /= QUOTE_CHR then
	TTYPE := ERROR;
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := '#';
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      if CHR = 'E' or else CHR = 'e' then
	goto SCAN_INT_E;
      else
	goto ACCEPT_NUMBER;
      end if;
    when '.' =>
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      if CHR not in '0' .. '9' and then CHR not in 'A' .. 'Z'
      and then CHR not in 'a' .. 'z' then
	TTYPE := ERROR;
      end if;
      if TTYPE = INT then
	TTYPE := DEC;
      end if;
      goto SCAN_BASED_DEC_DIGIT;
    when others =>
      goto SCAN_ERROR;
    end case;

  <<SCAN_BASED_DEC_DIGIT>>
    case CHR is
    when '0' .. '9' =>
      if CHR > BASE_DIGIT then
	TTYPE := ERROR;
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_BASED_DEC_DIGIT;
    when 'A' .. 'Z' =>
      if CHR > BASE_LETTER then
	TTYPE := ERROR;
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_BASED_DEC_DIGIT;
    when 'a' .. 'z' =>
      CHR := CHARACTER'VAL(CHARACTER'POS(CHR) - CASE_MAGIC);
      goto SCAN_BASED_DEC_DIGIT;
    when '_' =>
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      if CHR not in '0' .. '9' and then CHR not in 'A' .. 'Z'
      and then CHR not in 'a' .. 'z' then
	TTYPE := ERROR;
      end if;
      goto SCAN_BASED_DEC_DIGIT;
    when '#' | ':' =>
      if CHR /= QUOTE_CHR then
	TTYPE := ERROR;
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := '#';
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      if CHR = 'E' or else CHR = 'e' then
	goto SCAN_DEC_E;
      else
	goto ACCEPT_NUMBER;
      end if;
    when others =>
      goto SCAN_ERROR;
    end case;

  <<SCAN_INT_E>>
    if W_COL < LINE_LENGTH and then SL.BDY (W_COL + 1) = '-' then
      TTYPE := ERROR;
    end if;
    -- goto SCAN_DEC_E

  <<SCAN_DEC_E>>
    if W_COL >= LINE_LENGTH then
      TTYPE := ERROR;
      goto ACCEPT_TOKEN;
    end if;
    CHR := SL.BDY (W_COL + 1);
    if CHR in '0' .. '9' or else CHR = '+' or else CHR = '-' then
      W_COL := W_COL + 1;
      TOKEN_LENGTH := TOKEN_LENGTH + 2;
      TEXT (TOKEN_LENGTH - 1) := 'E';
      TEXT (TOKEN_LENGTH) := CHR;
      if (CHR = '+' or else CHR = '-')
      and then (W_COL >= LINE_LENGTH
                or else SL.BDY (W_COL + 1) not in '0' .. '9') then
	TTYPE := ERROR;
      end if;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      -- goto SCAN_EXPONENT;
    else
      TTYPE := ERROR;
      goto ACCEPT_TOKEN;
    end if;

  <<SCAN_EXPONENT>>
    if CHR in '0' .. '9' or else CHR = '_' then
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if CHR = '_' then
	if W_COL > LINE_LENGTH
        or else SL.BDY (W_COL) not in '0' .. '9' then
	  TTYPE := ERROR;
	end if;
      end if;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_DEC;
    end if;
    goto ACCEPT_NUMBER;

  <<SCAN_QUOTE>>
    if W_COL <= LINE_LENGTH then
      CHR := SL.BDY (W_COL);
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if CHR = QUOTE_CHR then
	-- Copy doubled quote (but not %)
	if W_COL <= LINE_LENGTH and then SL.BDY (W_COL) = QUOTE_CHR then
          if QUOTE_CHR = '"' then
	    TOKEN_LENGTH := TOKEN_LENGTH + 1;
	    TEXT (TOKEN_LENGTH) := CHR;
	  end if;
	  W_COL := W_COL + 1;
	else
          TEXT (TOKEN_LENGTH) := '"';
	  goto ACCEPT_TOKEN;
	end if;
      elsif CHR = '"' then
        TTYPE := ERROR;      -- '"' inside % ... %
      end if;
      goto SCAN_QUOTE;
    else
      TTYPE := ERROR;
      goto ACCEPT_TOKEN;
    end if;

  <<SCAN_CHAR>>
    if CHAR_CONTEXT
    and then W_COL < LINE_LENGTH
    and then SL.BDY (W_COL + 1) = ''' then
      TTYPE := CHAR;
      TOKEN_LENGTH := 3;
      TEXT (2) := SL.BDY (W_COL);
      TEXT (3) := ''';
      W_COL := W_COL + 2;
      if TEXT(2) not in ' ' .. CHARACTER'VAL(127) then
	TTYPE := ERROR;
        TEXT(2) := '?';
      end if;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_COMMENT>>
    if CHR = '-' then
      TTYPE := NIL;
      -- Copy and check for invalid characters
      while W_COL <= LINE_LENGTH loop
	CHR := SL.BDY (W_COL);
	W_COL := W_COL + 1;
        if CHR not in ' ' .. CHARACTER'VAL (127)
	and then CHR not in ASCII.HT .. ASCII.CR then
	  TTYPE := ERROR;
	end if;
      end loop;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_EQUAL>>
    if CHR = '>' then
      TOKEN_LENGTH := 2;
      TEXT (2) := CHR;
      W_COL := W_COL + 1;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_PERIOD>>
    if CHR = '.' then
      TOKEN_LENGTH := 2;
      TEXT (2) := CHR;
      W_COL := W_COL + 1;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_STAR>>
    if CHR = '*' then
      TOKEN_LENGTH := 2;
      TEXT (2) := CHR;
      W_COL := W_COL + 1;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_COLON_SLASH>>
    if CHR = '=' then
      TOKEN_LENGTH := 2;
      TEXT (2) := CHR;
      W_COL := W_COL + 1;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_GREATER_THAN>>
    if CHR = '=' or CHR = '>' then
      TOKEN_LENGTH := 2;
      TEXT (2) := CHR;
      W_COL := W_COL + 1;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_LESS_THAN>>
    if CHR = '=' or CHR = '<' or CHR = '>' then
      TOKEN_LENGTH := 2;
      TEXT (2) := CHR;
      W_COL := W_COL + 1;
    end if;
    goto ACCEPT_TOKEN;

  <<SCAN_ERROR>>
    TTYPE := ERROR;
    case CHR is
    when ' ' | 'A' .. 'Z' | 'a' .. 'z' | '0' .. '9'
         | '&' | ''' | '(' | ')' | '*' | '+' | ','
         | '-' | '.' | '/' | ':' | '<' | '='
         | '>' | '|' | '!' | '%' | HT =>
      goto ACCEPT_TOKEN;
    when others =>
      if CHR not in ' ' .. CHARACTER'VAL(127) then
        CHR := '?';
      end if;
      TOKEN_LENGTH := TOKEN_LENGTH + 1;
      TEXT (TOKEN_LENGTH) := CHR;
      W_COL := W_COL + 1;
      if W_COL<=LINE_LENGTH then CHR:=SL.BDY(W_COL); else CHR:=' '; end if;
      goto SCAN_ERROR;
    end case;

  <<ACCEPT_NUMBER>>
    if CHR in 'A' .. 'Z' or else CHR in 'a' .. 'z'
    or else CHR in '0' .. '9' then
      TTYPE := ERROR;
    end if;
    -- goto ACCEPT_TOKEN;

  <<ACCEPT_TOKEN>>
    COL := W_COL - 1;
    SET(TEXT_OUT, TO => TEXT(1 .. TOKEN_LENGTH));
    TTYPE_OUT := TTYPE;

  end NEXT_TOKEN;

  function HASH_SEARCH (TXT: STRING) return LEXTYPE is
  begin
    return HASH_TABLE(HASH_POS(TXT));
  end;

  function HASH_POS (TXT: STRING) return INTEGER is
    II: INTEGER;
  begin
    II := TXT'LENGTH + 157 * CHARACTER'POS(TXT(TXT'LENGTH));
    II := II mod HASH_SIZE;
    while HASH_TABLE (II) /= LT_IDENTIFIER
    and then LEX_IMAGE(HASH_TABLE(II)) /= TXT loop
      II := II + 1;
      if II = HASH_SIZE then II := 0; end if;
    end loop;
    return II;
  end HASH_POS;

end LSCAN;
