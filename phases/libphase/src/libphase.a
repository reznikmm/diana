with TEXT2_IO, USERPK, DIANA, DIANATTR, DIANAMAN, PAGEMAN;
use  TEXT2_IO, USERPK, DIANA, DIANATTR, DIANAMAN, PAGEMAN;
with SEQUENTIAL_IO;
with DIANATBL; use DIANATBL;
procedure LIBPHASE is

  CONST_VIRGIN: 	TREE;
  ZERO_BYTE:		BYTE := BYTE(0);

  INITIAL_TIMESTAMP:	INTEGER;
  CUR_TIMESTAMP:	INTEGER;
  LIB_INFO_SEQ: 	SEQ_TYPE; -- := MAKE;
  LIB_PREFIX:		PNAME; -- := ""

  GENERIC_LIST:         SEQ_TYPE; -- := MAKE; -- list of generic_param_s
	-- A default subprogram name in a generic_param_s must
	-- be entered in the symbol table because an instantiation
	-- looks for the default name but does not contain its text
  LOADED_UNIT_LIST:	SEQ_TYPE; -- := MAKE; -- list of loaded units
	-- used to go through loaded units and enter id's in
	-- symbol table 

  TRANS_WITH_SEQ:	SEQ_TYPE;
  NEW_UNIT_LIST:	SEQ_TYPE; -- := MAKE;
  CUR_FILESYM:		TREE; -- symbol_rep of filename

  CHTABLE:     constant	STRING(1..32) := "0123456789ABCDEFGHJKLMNPRSTVWXYZ";

  procedure PUT_TREE(T: TREE);
  procedure MAIN;
  procedure OPEN_LIBRARY;
  procedure CLOSE_LIBRARY;
  procedure INSERT_FILE_NAME(COMP_UNIT: TREE);
  function MAKE_FILE_SYM(PRI, SEC: STRING) return TREE;
  procedure WITH_FOR_ONE_COMP_UNIT(COMP_UNIT_ARG: TREE);
  procedure WITH_FOR_ANCESTOR(SUBUNIT: TREE);
  procedure LOAD_WITH_ANCESTOR(ANC_NAME: in out TREE; ANC_PRISYM: out TREE);
  procedure PROCESS_WITH_CLAUSES(COMP_UNIT: TREE);
  procedure CHECK_ONE_USE_ID(CONTEXT_LIST_IN: SEQ_TYPE
		; CONTEXT_ITEM, USE_ID: TREE);
  procedure CHECK_USE_CLAUSES(CONTEXT_LIST_IN: SEQ_TYPE; CONTEXT_ITEM: TREE);
  procedure GENERATE_DUMMY_SPEC(COMP_UNIT: TREE);
  function LOAD_UNIT(PRI,SEC: STRING) return TREE;
  function LOAD_UNIT(FILESYM_ARG: TREE) return TREE;
  procedure WITH_UNIT(UNIT: TREE);
  function COPY_NODE(NODE: TREE) return TREE;
  function MAKE_USED_NAME_ID(USED_ID: TREE) return TREE;
  function UNSELECTED(NAME: TREE) return TREE;
  procedure ENTER_DEFAULT_GENERIC_FORMALS;
  procedure ENTER_USED_DEFINING_IDS;    


  -- Debug routine @@@
  procedure PUT_TREE(T: TREE) is
  begin
    PUT(INTEGER(T.TPG),0);
    PUT('.');PUT(INTEGER(T.TTY),0);
    PUT('.');PUT(INTEGER(T.TLN),0);
  end PUT_TREE;

  procedure MAIN is
    USER_ROOT:	    TREE := D(XD_USER_ROOT, CONST_ROOT);
    COMPILATION:    TREE := D(XD_STRUCTURE,USER_ROOT);
    COMP_UNIT_SEQ:  SEQ_TYPE := LIST(D(AS_COMPLTN_UNIT_S, COMPILATION));
    COMP_UNIT:	    TREE;
  begin
    PUT_LINE("Open library.");
    OPEN_LIBRARY;
    -- Read library units for each comp unit
    while not IS_EMPTY(COMP_UNIT_SEQ) loop
      COMP_UNIT := HEAD(COMP_UNIT_SEQ); COMP_UNIT_SEQ := TAIL(COMP_UNIT_SEQ);
      if KIND(D(AS_ALL_DECL,COMP_UNIT)) = DN_VOID then
	PUT_LINE("*** Pragma-only unit not implemented yet.");
	null;
      else
	INSERT_FILE_NAME(COMP_UNIT);
	PUT("Comp unit: ");PUT_LINE(PRINTNAME(D(XD_LIB_NAME,COMP_UNIT)));
	WITH_FOR_ONE_COMP_UNIT(COMP_UNIT);
      end if;
    end loop;
    LIST(D(AS_COMPLTN_UNIT_S,COMPILATION), NEW_UNIT_LIST);
    if DI(XD_ERR_COUNT, CONST_ROOT) = 0 then
      PUT_LINE("Close library.");
      CLOSE_LIBRARY;
    end if;

    -- enter names which have been used in hash table (replacing txtrep's
    -- by symbol_rep's

    -- first, make sure any default generic formal subprograms are entered  
    ENTER_DEFAULT_GENERIC_FORMALS;
    -- now enter all names which have been used
    ENTER_USED_DEFINING_IDS;    
  end MAIN;

  procedure OPEN_LIBRARY is
    LIB_CTRL:		TEXT2_IO.FILE_TYPE;
    LIB_CHAR:		CHARACTER;
    DUMMY_CHAR: 	CHARACTER;
    LIB_NUM:		INTEGER;
    LIB_SHORT:		STRING(1 .. MAX_STRING);
    LIB_TEXT_1: 	STRING(1 .. MAX_STRING);
    LIB_TEXT_2: 	STRING(1 .. MAX_STRING);
    LIB_SHORT_LENGTH:   INTEGER;
    LIB_TEXT_1_LENGTH:  INTEGER;
    LIB_TEXT_2_LENGTH:  INTEGER;
    LAST:		INTEGER;
    LIB_INFO:		TREE;
  begin
    OPEN(LIB_CTRL, IN_FILE, "ADA__LIB.CTL");
    loop
      GET(LIB_CTRL,LIB_CHAR);
      if LIB_CHAR = 'T' then
	GET(LIB_CTRL,LIB_NUM);
	INITIAL_TIMESTAMP := LIB_NUM;
	CUR_TIMESTAMP := LIB_NUM;
	exit;
      elsif LIB_CHAR = 'P' then
	GET(LIB_CTRL,DUMMY_CHAR);
	GET_LINE(LIB_CTRL,LIB_TEXT_1,LAST);
        SET(LIB_PREFIX, TO => LIB_TEXT_1(1..LAST));
      else
	GET(LIB_CTRL,DUMMY_CHAR);
	GET_LINE(LIB_CTRL,LIB_SHORT,LAST);
	LIB_SHORT_LENGTH := LAST;
	GET_LINE(LIB_CTRL,LIB_TEXT_1,LAST);
	LIB_TEXT_1_LENGTH := LAST;
        if LIB_CHAR = 'U' then
	  LIB_TEXT_2(1..1) := "$";
          LIB_TEXT_2_LENGTH := 1;
        elsif LIB_CHAR = 'S' then
	  GET_LINE(LIB_CTRL,LIB_TEXT_2,LAST);
          LIB_TEXT_2_LENGTH := LAST;
	else
	  raise ASSERTION_ERROR;
	end if;
	LIB_INFO := MAKE(DN_LIB_INFO);
	D(XD_SHORT, LIB_INFO, STORESYM(LIB_SHORT(1 .. LIB_SHORT_LENGTH)));
	D(XD_PRIMARY, LIB_INFO, STORESYM(LIB_TEXT_1(1 .. LIB_TEXT_1_LENGTH)));
	D(XD_SECONDARY, LIB_INFO, STORESYM(LIB_TEXT_2(1 .. LIB_TEXT_2_LENGTH)));
	LIB_INFO_SEQ := APPEND(LIB_INFO_SEQ, LIB_INFO);

--@	PUT("Store: ");PUT_TREE(LIB_INFO);
--@     PUT(' ');PUT(LIB_SHORT);
--@     PUT(' ');PUT(LIB_TEXT_1);
--@     PUT(' ');PUT(LIB_TEXT_2);NEW_LINE;
      end if;
    end loop;
    CLOSE(LIB_CTRL);
  end OPEN_LIBRARY;

  procedure CLOSE_LIBRARY is
    LIB_CTRL:		TEXT2_IO.FILE_TYPE;
    TEMP_SEQ:		SEQ_TYPE := LIB_INFO_SEQ;
    LIB_INFO:		TREE;
    DOLLAR:		TREE := STORESYM("$");
    EXTEN:		TREE;
  begin
    CREATE(LIB_CTRL, OUT_FILE, "ADA__LIB.TMP");
    if LENGTH(LIB_PREFIX) /= 0 then
      PUT(LIB_CTRL,"P ");
      PUT_LINE(LIB_CTRL, TO_STRING(LIB_PREFIX));
    end if;
    while not IS_EMPTY(TEMP_SEQ) loop
      LIB_INFO := HEAD(TEMP_SEQ); TEMP_SEQ := TAIL(TEMP_SEQ);
--@   PUT("Write: ");PUT_TREE(LIB_INFO);NEW_LINE;
      EXTEN := D(XD_SECONDARY, LIB_INFO);
      if EXTEN = DOLLAR then
	PUT(LIB_CTRL,"U ");
	PUT_LINE(LIB_CTRL,PRINTNAME(D(XD_SHORT,LIB_INFO)));
	PUT_LINE(LIB_CTRL,PRINTNAME(D(XD_PRIMARY,LIB_INFO)));
      else
	PUT(LIB_CTRL,"S ");
	PUT_LINE(LIB_CTRL,PRINTNAME(D(XD_SHORT,LIB_INFO)));
	PUT_LINE(LIB_CTRL,PRINTNAME(D(XD_PRIMARY,LIB_INFO)));
	PUT_LINE(LIB_CTRL,PRINTNAME(D(XD_SECONDARY,LIB_INFO)));
      end if;
    end loop;
    PUT(LIB_CTRL,"T ");
    PUT(LIB_CTRL,CUR_TIMESTAMP,0);
    NEW_LINE(LIB_CTRL);
    CLOSE(LIB_CTRL);
  end CLOSE_LIBRARY;

  procedure INSERT_FILE_NAME(COMP_UNIT: TREE) is
    UNIT_BODY:		TREE := D(AS_ALL_DECL, COMP_UNIT);
    UNIT_KIND:		NODE_NAME := KIND(UNIT_BODY);
    PRIMARY:		PNAME;
    SECONDARY:		PNAME;
    SEP_NAME:		TREE;
    FILE_SYM:		TREE;
  begin
    if UNIT_KIND /= DN_SUBUNIT then
      SET(PRIMARY, TO => PRINTNAME(D(LX_SYMREP,SON1(UNIT_BODY))));
      if UNIT_KIND = DN_PACKAGE_BODY or else UNIT_KIND = DN_SUBPROGRAM_BODY then
	SET(SECONDARY, TO => ".BDY");
      else
	SET(SECONDARY, TO => ".DCL");
      end if;
    else
      SET(SECONDARY,
	      TO => PRINTNAME(D(LX_SYMREP,SON1(D(AS_SUBUNIT_BODY,UNIT_BODY)))));
      SEP_NAME := D(AS_NAME,UNIT_BODY);
      while KIND(SEP_NAME) = DN_SELECTED loop
	SEP_NAME := D(AS_NAME,SEP_NAME);
      end loop;
      SET(PRIMARY, TO => PRINTNAME(D(LX_SYMREP,SEP_NAME)));
    end if;
    FILE_SYM := MAKE_FILE_SYM(TO_STRING(PRIMARY), TO_STRING(SECONDARY));
    D(XD_LIB_NAME, COMP_UNIT, FILE_SYM);
  end INSERT_FILE_NAME;

  function MAKE_FILE_SYM(PRI, SEC: STRING) return TREE is
    PRISYM:		TREE;
    SECSYM:		TREE;
    TEMP_INFO_SEQ:	SEQ_TYPE;
    LIB_INFO:		TREE;
    FILENAME:		PNAME;
    EXTEN:		PNAME;
    FILESYM:		TREE;
  begin
    if SEC = ".DCL" or else SEC = ".BDY" then
      if PRI'LENGTH <= 8 then
	return STORESYM(PRI & SEC);
      else
	SECSYM := STORESYM("$");
	SET(EXTEN, TO => SEC);
      end if;
    else
      SECSYM := STORESYM(SEC);
      SET(EXTEN, TO => ".SUB");
    end if;
    PRISYM := STORESYM(PRI);

    TEMP_INFO_SEQ := LIB_INFO_SEQ;
    while not IS_EMPTY(TEMP_INFO_SEQ) loop
      LIB_INFO := HEAD(TEMP_INFO_SEQ); TEMP_INFO_SEQ := TAIL(TEMP_INFO_SEQ);
      if D(XD_PRIMARY, LIB_INFO) = PRISYM
      and then D(XD_SECONDARY, LIB_INFO) = SECSYM then
	SET(FILENAME, TO => PRINTNAME(D(XD_SHORT, LIB_INFO))); -- already found
	return STORESYM(FILENAME & EXTEN);
      end if;
    end loop;

    -- Must make a new symbol
    declare
      FILETEXT: STRING(1..8) := "$$$$$$$$";
      NUM_WORK:		INTEGER;
    begin
      NUM_WORK := PRI'LENGTH;
      if NUM_WORK > 4 then
        NUM_WORK := 4;
      end if;
      FILETEXT(1 .. NUM_WORK) := PRI(1 .. NUM_WORK);
      NUM_WORK := CUR_TIMESTAMP + 1;
      for I in reverse 6 .. 8 loop
        FILETEXT(I) := CHTABLE(NUM_WORK mod 32 + 1);
        NUM_WORK := NUM_WORK / 32;
      end loop;
      SET(FILENAME, TO => FILETEXT);
    end;
    FILESYM := STORESYM(FILENAME & EXTEN);

    -- add to library info
    LIB_INFO := MAKE(DN_LIB_INFO);
    D(XD_SHORT, LIB_INFO, STORESYM(FILENAME));
    D(XD_PRIMARY, LIB_INFO, PRISYM);
    D(XD_SECONDARY, LIB_INFO, SECSYM);
    LIB_INFO_SEQ := APPEND(LIB_INFO_SEQ, LIB_INFO);
--@ PUT("Add: ");PUT_TREE(LIB_INFO);
--@ PUT(' ');PUT(PRINTNAME(D(XD_SHORT, LIB_INFO)));
--@ PUT(' ');PUT(PRINTNAME(D(XD_PRIMARY, LIB_INFO)));
--@ PUT(' ');PUT(PRINTNAME(D(XD_SECONDARY, LIB_INFO)));NEW_LINE;
    return FILESYM;
  end MAKE_FILE_SYM;

  procedure WITH_FOR_ONE_COMP_UNIT(COMP_UNIT_ARG: TREE) is
    COMP_UNIT:		TREE := COMP_UNIT_ARG;
    FILE_SYM:		TREE := D(XD_LIB_NAME, COMP_UNIT);
    UNIT_BODY:		TREE := D(AS_ALL_DECL, COMP_UNIT);
    UNIT_KIND:		NODE_NAME := KIND(UNIT_BODY);
    WITH_LIST:		SEQ_TYPE := MAKE;
    UNIT:		TREE;
    UNIT_PRI:		PNAME;
    UNIT_SEC:		PNAME;
  begin
    TRANS_WITH_SEQ := MAKE;
    UNIT := LOAD_UNIT("_STANDRD",".DCL");
    if UNIT = CONST_VOID then
      PUT_LINE("Predefined environment not found.");
      raise ASSERTION_ERROR;
    end if;
    WITH_UNIT(UNIT);

    -- clear list of trans-with units to avoid abort if self-reference
    LIST(COMP_UNIT, MAKE);

    if UNIT_KIND = DN_SUBPROG_ENTRY_DECL then
      null;
    elsif UNIT_KIND = DN_PACKAGE_DECL
    or UNIT_KIND = DN_GENERIC_DECL then
      null;
    elsif UNIT_KIND = DN_PACKAGE_BODY or UNIT_KIND = DN_SUBPROGRAM_BODY then
      SET(UNIT_PRI, TO => PRINTNAME(D(LX_SYMREP,SON1(UNIT_BODY))));
      UNIT := LOAD_UNIT(TO_STRING(UNIT_PRI), ".DCL");
      if UNIT /= CONST_VOID then
        if UNIT_KIND = DN_SUBPROGRAM_BODY
	and then not (KIND(D(AS_ALL_DECL,UNIT)) = DN_SUBPROG_ENTRY_DECL
		and then KIND(D(AS_UNIT_KIND,D(AS_ALL_DECL,UNIT))) 
				/= DN_INSTANTIATION )
	and then not (KIND(D(AS_ALL_DECL,UNIT)) = DN_GENERIC_DECL
		and then KIND(D(AS_HEADER,D(AS_ALL_DECL,UNIT)))
				in CLASS_SUBP_ENTRY_HEADER )
	then
	  -- subprogram body overrides instantiation or [generic] package
	  -- ... or a previously compiled subprogram body
	  UNIT := CONST_VOID;
	end if;
      end if;
      if UNIT /= CONST_VOID then
	WITH_UNIT(UNIT);
	-- Fill in sm_first and sm_parent for the body
	D(SM_FIRST, SON1(UNIT_BODY), SON1(D(AS_ALL_DECL,UNIT)));
	D(XD_PARENT, COMP_UNIT, UNIT);
      else
	if UNIT_KIND = DN_PACKAGE_BODY then
	  ERROR(D(LX_SRCPOS,COMP_UNIT),
		"Cannot with spec for "
		& PRINTNAME(D(LX_SYMREP,SON1(UNIT_BODY))));
	else
	  -- subprogram body is its own spec
	  declare
	    FILESYM: TREE := MAKE_FILE_SYM(TO_STRING(UNIT_PRI), ".DCL");
	  begin
	    LIST(FILESYM, SINGLETON(COMP_UNIT));
	    D(XD_LIB_NAME, COMP_UNIT, FILESYM);
	  end;
	end if;
      end if;
    else -- unit_kind = subunit
      WITH_FOR_ANCESTOR(UNIT_BODY);
    end if;

    CUR_TIMESTAMP := CUR_TIMESTAMP + 1;
    DI(XD_TIMESTAMP, COMP_UNIT, CUR_TIMESTAMP);
    LIST(FILE_SYM, INSERT(MAKE,COMP_UNIT));

    PROCESS_WITH_CLAUSES(COMP_UNIT);

    LIST(COMP_UNIT, TRANS_WITH_SEQ);
    NEW_UNIT_LIST := APPEND(NEW_UNIT_LIST, COMP_UNIT);
  end WITH_FOR_ONE_COMP_UNIT;

  procedure WITH_FOR_ANCESTOR(SUBUNIT: TREE) is
    ANC_NAME:	TREE; -- name of ancestor, maybe selected
    ANC_PRISYM: TREE; -- returned lx_symrep of first selector
		      -- void if there was no ancestor
    UNIT:	TREE;
  begin
    ANC_NAME := D(AS_NAME,SUBUNIT);
    LOAD_WITH_ANCESTOR(ANC_NAME,ANC_PRISYM);
    D(AS_NAME, SUBUNIT, ANC_NAME); -- put back name as list of used_name_id's
    if ANC_PRISYM /= CONST_VOID
    and then KIND(ANC_NAME) = DN_SELECTED then
      -- ancestor exists and is subunit, check for conflicting subunit
--@   -- debug stuff
--@   PUT_LINE("Check conflict.");
--@   PUT_TREE(ANC_PRISYM);PUT(' ');
--@   PUT_LINE(PRINTNAME(ANC_PRISYM));
--@   PUT_TREE(SUBUNIT);NEW_LINE;
--@   PUT_TREE(D(AS_SUBUNIT_BODY,SUBUNIT));NEW_LINE;
--@   PUT_TREE(SON1(D(AS_SUBUNIT_BODY,SUBUNIT)));NEW_LINE;
--@   PUT_TREE(D(LX_SYMREP,SON1(D(AS_SUBUNIT_BODY,SUBUNIT))));NEW_LINE;
--@   PUT_LINE(PRINTNAME(D(LX_SYMREP,SON1(D(AS_SUBUNIT_BODY,SUBUNIT)))));
--@   -- end debug stuff
      UNIT := LOAD_UNIT(PRINTNAME(ANC_PRISYM),
	    PRINTNAME(D(LX_SYMREP,SON1(D(AS_SUBUNIT_BODY,SUBUNIT)))) );
      if UNIT /= CONST_VOID then
	-- (Note. lx_symrep may still be txtrep, so compare printnames)
	if PRINTNAME(D(LX_SYMREP, D(AS_DESIGNATOR, ANC_NAME) ))
	      /= PRINTNAME(D(LX_SYMREP, D(AS_DESIGNATOR,
		   D(AS_NAME, D(AS_ALL_DECL,UNIT)) ))) then
	  ERROR(SUBUNIT, "Conflicting subunit names");
	end if;
      end if;
    end if;
  end WITH_FOR_ANCESTOR;

  procedure LOAD_WITH_ANCESTOR(ANC_NAME: in out TREE; ANC_PRISYM: out TREE) is
    PRISYM: TREE;
    ANC_UNIT: TREE;
    TEST_UNIT: TREE;
    ANC_ANC_NAME: TREE;
    USED_NAME_ID: TREE;
  begin
    if KIND(ANC_NAME) /= DN_SELECTED then
      -- Ancestor must be library unit body
      PRISYM := D(LX_SYMREP, ANC_NAME);
      -- note .DCL first in case it's subp body as lib unit
      ANC_UNIT := LOAD_UNIT(PRINTNAME(PRISYM), ".DCL");
      if ANC_UNIT /= CONST_VOID then
	if KIND(D(AS_ALL_DECL, ANC_UNIT)) = DN_SUBPROGRAM_BODY then
	  LIST(MAKE_FILE_SYM(PRINTNAME(PRISYM), ".BDY"), SINGLETON(ANC_UNIT));
	else
          ANC_UNIT := LOAD_UNIT(PRINTNAME(PRISYM), ".BDY");
	end if;
      end if;
      if ANC_UNIT = CONST_VOID then
        ERROR(ANC_NAME, "Can't find ancestor - "&PRINTNAME(PRISYM));
	PRISYM := CONST_VOID;
      else
	WITH_UNIT(ANC_UNIT);
	ANC_NAME := MAKE_USED_NAME_ID(ANC_NAME);
	-- (old comment:$$$$)sm_defn will be adjusted to sm_first(sm_defn) later
	D(SM_DEFN, ANC_NAME, D(SM_FIRST,SON1(D(AS_ALL_DECL, ANC_UNIT))));
      end if;
    else
      -- Ancestor is another subunit
      D(SM_EXP_TYPE, ANC_NAME, CONST_VOID);
      ANC_ANC_NAME := D(AS_NAME, ANC_NAME);
      LOAD_WITH_ANCESTOR(ANC_ANC_NAME, PRISYM);
      D(AS_NAME, ANC_NAME, ANC_ANC_NAME); -- used_name_id's
      if PRISYM /= CONST_VOID then
--@	-- debug stuff
--@	PUT_LINE ("Subunit ancestor.");
--@     PUT_TREE(PRISYM);PUT(' ');
--@	PUT_LINE(PRINTNAME(PRISYM));
--@	PUT_TREE(ANC_NAME);NEW_LINE;
--@	PUT_TREE(D(AS_DESIGNATOR,ANC_NAME));NEW_LINE;
--@	PUT_TREE(D(LX_SYMREP,D(AS_DESIGNATOR,ANC_NAME)));NEW_LINE;
--@	PUT_LINE(PRINTNAME(D(LX_SYMREP,D(AS_DESIGNATOR,ANC_NAME))));
--@	-- end debug stuff
	TEST_UNIT := LOAD_UNIT(PRINTNAME(PRISYM),
	      PRINTNAME(D(LX_SYMREP,D(AS_DESIGNATOR,ANC_NAME))) );
	if TEST_UNIT = CONST_VOID then
          ERROR(ANC_NAME, "Can't find ancestor subunit - "
		& PRINTNAME(D(LX_SYMREP, D(AS_DESIGNATOR, ANC_NAME))) );
	  PRISYM := CONST_VOID;
	-- (Note. compare printnames in case it is still a txtrep)
	elsif PRINTNAME(D(LX_SYMREP, UNSELECTED(ANC_ANC_NAME)))
	      /= PRINTNAME(D(LX_SYMREP,
		   UNSELECTED(D(AS_NAME, D(AS_ALL_DECL,TEST_UNIT))) ))
	then
	  ERROR(ANC_NAME, "Conflicting ancestor names - "
		& PRINTNAME(D(LX_SYMREP,
		UNSELECTED(D(AS_DESIGNATOR, ANC_NAME)) )) );
	  PRISYM := CONST_VOID;
	else
	  WITH_UNIT(TEST_UNIT);
	  USED_NAME_ID := MAKE_USED_NAME_ID(D(AS_DESIGNATOR, ANC_NAME));
	  D(SM_DEFN, USED_NAME_ID, D(SM_FIRST,SON1(D(AS_SUBUNIT_BODY,
					  D(AS_ALL_DECL,TEST_UNIT) ))));
	  D(AS_DESIGNATOR, ANC_NAME, USED_NAME_ID);
	end if;
      end if;
    end if;
    ANC_PRISYM := PRISYM;
  end LOAD_WITH_ANCESTOR;

  procedure PROCESS_WITH_CLAUSES(COMP_UNIT: TREE) is
    UNIT_CONTEXT_LIST:	SEQ_TYPE := LIST(D(AS_CONTEXT_ELEM_S,COMP_UNIT));
    CONTEXT_ITEM_LIST:	SEQ_TYPE := UNIT_CONTEXT_LIST;
    CONTEXT_ITEM:	TREE;
    WITH_NAME_LIST:	SEQ_TYPE;
    WITH_NAME:		TREE;
    UNIT:		TREE;
    WITH_BODY:		TREE;
  begin
    while not IS_EMPTY(CONTEXT_ITEM_LIST) loop
      CONTEXT_ITEM := HEAD(CONTEXT_ITEM_LIST);
      CONTEXT_ITEM_LIST := TAIL(CONTEXT_ITEM_LIST);
      if KIND(CONTEXT_ITEM) = DN_WITH then
	WITH_NAME_LIST := LIST(D(AS_NAME_S,CONTEXT_ITEM));
	while not IS_EMPTY(WITH_NAME_LIST) loop
	  WITH_NAME := HEAD(WITH_NAME_LIST);
	  WITH_NAME_LIST := TAIL(WITH_NAME_LIST);
	  UNIT := LOAD_UNIT(PRINTNAME(D(LX_SYMREP,WITH_NAME)), ".DCL");
	  if UNIT = CONST_VOID then
	    ERROR(D(LX_SRCPOS,WITH_NAME),
		  "Withed unit not found - "
		  & PRINTNAME(D(LX_SYMREP,WITH_NAME)) );
	    -- Avoid error when checking USE clause later
	    D(SM_DEFN, WITH_NAME, CONST_VOID);
	  elsif DI(XD_TIMESTAMP, UNIT) = CUR_TIMESTAMP then
	    ERROR(D(LX_SRCPOS,WITH_NAME),
		  "With clause refers to current unit - "
		  & PRINTNAME(D(LX_SYMREP,WITH_NAME)));
	    -- Avoid error when checking USE clause later
	    D(SM_DEFN, WITH_NAME, CONST_VOID);
	  else
	    WITH_UNIT(UNIT);
	    WITH_BODY := D(AS_ALL_DECL,UNIT);
	    D(SM_DEFN, WITH_NAME, SON1(WITH_BODY));
	  end if;
	end loop;
      end if;
      CHECK_USE_CLAUSES(UNIT_CONTEXT_LIST, CONTEXT_ITEM);	
    end loop;
  end PROCESS_WITH_CLAUSES;

  procedure CHECK_USE_CLAUSES(CONTEXT_LIST_IN: SEQ_TYPE; CONTEXT_ITEM: TREE) is
    USE_CLAUSE_LIST: SEQ_TYPE := LIST(D(AS_USE_PRAGMA_S,CONTEXT_ITEM));
    USE_CLAUSE: TREE;
    USE_ID_LIST: SEQ_TYPE;
    USE_ID: TREE;
  begin
    while not IS_EMPTY(USE_CLAUSE_LIST) loop
      POP(USE_CLAUSE_LIST, USE_CLAUSE);
      if KIND(USE_CLAUSE) = DN_USE then
	USE_ID_LIST := LIST(D(AS_NAME_S, USE_CLAUSE));
	while not IS_EMPTY(USE_ID_LIST) loop
	  POP(USE_ID_LIST, USE_ID);
	  if KIND(USE_ID) = DN_USED_OBJECT_ID then
	    CHECK_ONE_USE_ID(CONTEXT_LIST_IN, CONTEXT_ITEM, USE_ID);
	  end if;
	end loop;
      end if;
    end loop;
  end CHECK_USE_CLAUSES;

  procedure CHECK_ONE_USE_ID(CONTEXT_LIST_IN: SEQ_TYPE
		; CONTEXT_ITEM, USE_ID: TREE)
  is
    SYMREP: TREE;
    TEMP_CONTEXT_LIST: SEQ_TYPE := CONTEXT_LIST_IN;
    TEMP_CONTEXT_ITEM: TREE;
    WITH_ID_LIST: SEQ_TYPE;
    WITH_ID: TREE;
  begin
    if KIND(USE_ID) = DN_PRAGMA then
      return;
    end if;

    if KIND(USE_ID) /= DN_USED_OBJECT_ID then
      ERROR(D(LX_SRCPOS, USE_ID), "Only simple names allowed in context use");
    end if;

    SYMREP := D(LX_SYMREP, USE_ID);

    loop
      POP(TEMP_CONTEXT_LIST, TEMP_CONTEXT_ITEM);
      if KIND(TEMP_CONTEXT_ITEM) = DN_WITH then
	WITH_ID_LIST := LIST(D(AS_NAME_S, TEMP_CONTEXT_ITEM));
	while not IS_EMPTY(WITH_ID_LIST) loop
	  POP(WITH_ID_LIST,WITH_ID);
	  if D(LX_SYMREP,WITH_ID) = SYMREP then
	    D(SM_DEFN, USE_ID, D(SM_DEFN,WITH_ID));
	    return;
	  end if;
	end loop;
      end if;
      exit
	when TEMP_CONTEXT_ITEM = CONTEXT_ITEM;
    end loop;

    ERROR(D(LX_SRCPOS,USE_ID)
		, "Use'd name not withed in current context clause - "	
		  & PRINTNAME(SYMREP));
    D(SM_DEFN, USE_ID, CONST_VOID);
  end CHECK_ONE_USE_ID;

  procedure GENERATE_DUMMY_SPEC(COMP_UNIT: TREE) is
    -- generate library unit for default subprogram spec
    SUBP_BODY: TREE := D(AS_ALL_DECL, COMP_UNIT);
    SUBP_HEADER: TREE := D(AS_HEADER, SUBP_BODY);
    NEW_UNIT: TREE := COPY_NODE(COMP_UNIT);
    NEW_ID:   TREE := COPY_NODE(SON1(SUBP_BODY));
    NEW_DECL: TREE := MAKE(DN_SUBPROG_ENTRY_DECL);
  begin
    D(SM_SPEC, NEW_ID, NEW_DECL);
    D(SM_FIRST, NEW_ID, NEW_ID);

    D(AS_SOURCE_NAME, NEW_DECL, NEW_ID);
    D(AS_HEADER, NEW_DECL, D(AS_HEADER, SUBP_BODY));
    D(AS_UNIT_KIND, NEW_DECL, CONST_VOID);
    D(LX_SRCPOS, NEW_DECL, D(LX_SRCPOS, SUBP_BODY));

    -- Worry about duplicated context and pragmas $$$$$$$$
    D(AS_ALL_DECL, NEW_UNIT, NEW_DECL);

    INSERT_FILE_NAME(NEW_UNIT);
    WITH_FOR_ONE_COMP_UNIT(NEW_UNIT);
  end GENERATE_DUMMY_SPEC;

  function LOAD_UNIT(PRI,SEC: STRING) return TREE is
  begin
    return LOAD_UNIT(MAKE_FILE_SYM(PRI, SEC));
  end LOAD_UNIT;

  function LOAD_UNIT(FILESYM_ARG: TREE) return TREE is
    package SEQ_IO is new SEQUENTIAL_IO(SECTOR);

    FILESYM:	TREE := FILESYM_ARG;
    UNIT:	TREE := CONST_VOID;
    LIB_FILE:	SEQ_IO.FILE_TYPE;
    PAGE:	TREE;
    DLTA:	INTEGER;
    UNIT_TIMESTAMP: INTEGER;
    WUNIT_SEQ:	SEQ_TYPE;
    WUNIT_LIST: TREE;
    WUNIT:	TREE;
    WORD:	TREE;

    function OFFSET(T:TREE) return TREE is
      TEMP: TREE := T;
    begin
      TEMP.TPG := TEMP.TPG + SHORT(DLTA);
      return TEMP;
    end OFFSET;

    procedure LOAD_WITHED_UNIT(WUNIT: TREE) is
      UNIT:	TREE;
    begin
      UNIT := LOAD_UNIT(STORESYM(PRINTNAME(
	    OFFSET(D(TW_FILENAME,OFFSET(WUNIT))))));
      if UNIT = CONST_VOID then
	raise NAME_ERROR;
      end if;
      if DI(XD_TIMESTAMP, UNIT) >= UNIT_TIMESTAMP then
	PUT(PRINTNAME(D(XD_LIB_NAME,UNIT)));PUT(" later than ");
	PUT_LINE(PRINTNAME(FILESYM));
	raise NAME_ERROR;
      end if;
    end LOAD_WITHED_UNIT;

    procedure RELOCATE_UNIT(UNIT: TREE) is
      RELOC: array (VPG_NBR) of INTEGER;
      PNTR:  TREE := UNIT;
      LAST_PAGE : INTEGER := INTEGER(PNTR.TPG) + DI(XD_NBR_PAGES,UNIT) - 1;
      WORD_ZERO: TREE;
      WORD:	 TREE;
      NODE_KIND: NODE_NAME;

      procedure RELOC_FOR_WUNIT(WUNIT: TREE) is
	TRANS_WITH : TREE := OFFSET(WUNIT);
	NEW_UNIT : TREE := LOAD_UNIT(STORESYM(PRINTNAME(
	    OFFSET(D(TW_FILENAME,TRANS_WITH)) ))); -- find it again
	FIRST_PAGE: INTEGER := INTEGER(NEW_UNIT.TPG);
	UNIT_PNTR:   TREE := D(TW_COMP_UNIT, TRANS_WITH); -- the old one
	DLTA: INTEGER := FIRST_PAGE - INTEGER(UNIT_PNTR.TPG);
	NBR_PAGES: INTEGER := DI(XD_NBR_PAGES,
              MAKE_TREE(FIRST_PAGE, NODE_NAME'POS(DN_COMPILATION_UNIT), 1));
      begin
	for I in INTEGER(UNIT_PNTR.TPG) 
		.. INTEGER(UNIT_PNTR.TPG) + NBR_PAGES - 1 loop
	  RELOC(I) := I + DLTA;
	end loop;
      end RELOC_FOR_WUNIT;

    begin
      for I in VPG_NBR loop
	RELOC(I) := -1;
      end loop;

      for I in INTEGER(UNIT.TPG)
			 .. INTEGER(UNIT.TPG) + DI(XD_NBR_PAGES,UNIT) - 1 loop
	RELOC(I - DLTA) := I;
      end loop;

      WUNIT_LIST := WUNIT_SEQ.H;
      if WUNIT_LIST /= CONST_NIL then
	while KIND(WUNIT_LIST) = DN_LIST loop
	  WUNIT := D(XD_HEAD,OFFSET(WUNIT_LIST));
	  WUNIT_LIST := D(XD_TAIL,OFFSET(WUNIT_LIST));
	  RELOC_FOR_WUNIT(WUNIT);
	end loop;
	RELOC_FOR_WUNIT(WUNIT_LIST);
      end if;

--@   declare
--@	PRIOR: INTEGER := 0;
--@   begin
--@	PUT_LINE("---------- RELOC table:");
--@	for I in VPG_NBR loop
--@	  if RELOC(I) /= PRIOR then
--@	    PUT(I,4);PUT(RELOC(I),5);NEW_LINE;
--@	    PRIOR := RELOC(I);
--@	  end if;
--@	end loop;
--@	PUT_LINE("----------");
--@   end;

      -- table is set up, do the reloc
      while INTEGER(PNTR.TPG) <= LAST_PAGE loop
--@	PUT("PNTR = ");PUT_TREE(PNTR);NEW_LINE;
	WORD_ZERO := DABS(0,PNTR);
--@	PUT("WD_0 = ");PUT_TREE(WORD_ZERO);
--@	if WORD_ZERO.TPG > 0 then
--@       PUT(' ');PUT(NODE_IMAGE(NODE_NAME'VAL(WORD_ZERO.TPG)));
--@	end if;
--@	NEW_LINE;
	if WORD_ZERO = CONST_VIRGIN then
	  PNTR.TPG := PNTR.TPG + 1;
	  PNTR.TLN := BYTE(1);
	else
          NODE_KIND := NODE_NAME'VAL(WORD_ZERO.TPG);
	  PNTR.TTY := NODE_NAME'POS(NODE_KIND);
	  if NODE_KIND = DN_TXTREP or NODE_KIND = DN_NUM_VAL then
	    null;
	  else
	    for I in 1 .. INTEGER(WORD_ZERO.TLN) loop
	      WORD := DABS(I, PNTR);
--@           PUT("--");PUT(I,2);PUT(' ');PUT_TREE(WORD);NEW_LINE;
	      if WORD.TLN = ZERO_BYTE then
		null;
	      elsif WORD.TPG < 0 then
		if WORD /= CONST_VIRGIN then
		  WORD.TPG := SHORT(- RELOC( - INTEGER(WORD.TPG)));
		end if;
		DABS(I, PNTR, WORD);
	      else
		WORD.TPG := SHORT(RELOC(INTEGER(WORD.TPG)));
		DABS(I, PNTR, WORD);
--@             PUT(">>");PUT(I,2);PUT(' ');PUT_TREE(WORD);
--@             PUT(' ');PUT_LINE(NODE_IMAGE(KIND(WORD)));
		if KIND(WORD) = DN_GENERIC_DECL then
		  GENERIC_LIST := INSERT(GENERIC_LIST, WORD);
		--if KIND(WORD) = DN_TXTREP
		--and then A_SPEC(N_SPEC(INTEGER(WORD_ZERO.TPG)).NS_FIRST_A
		--	 + I - 1)
                --    .AS_ATNBR = ATTRIBUTE_NAME'POS(LX_SYMREP) then
		--WORD := FINDSYM(PRINTNAME(WORD));
		--if WORD /= CONST_VOID then
		  --DABS(I, PNTR, WORD);
		    --case NODE_KIND is
		    --when  dn_var_id
			--| dn_const_id
			--| dn_number_id
			--| dn_type_id
			--| dn_subtype_id
			--| dn_enum_id
			--| dn_def_char
			--| dn_comp_id
			--| dn_dscrmt_id
			--| dn_label_id
			--| dn_named_stm_id
			--| dn_iteration_id
			--| dn_proc_id
			--| dn_function_id
			--| dn_def_op
			--| dn_deriv_proc_id
			--| dn_deriv_fcn_id
			--| dn_deriv_def_op
			--| dn_in_id
			--| dn_in_out_id
			--| dn_package_id
			--| dn_out_id
			--| dn_private_type_id
			--| dn_l_private_type_id
			--| dn_task_body_id
			--| dn_entry_id
			--| dn_exception_id
			--| dn_generic_id
			--| dn_attr_id
			--| dn_argument_id
			--| dn_pragma_id
			--| dn_bltn_op =>
	            --  LIST(WORD, INSERT(LIST(WORD), PNTR));
		    --when others =>
		    --  null;
		    --end case;
		  --end if;
		end if;
	      end if;
	    end loop;
	  end if;
	  PNTR.TLN := BYTE(INTEGER(PNTR.TLN) + INTEGER(WORD_ZERO.TLN) + 1);
	  if INTEGER(PNTR.TLN) >= SECTOR_SIZE then
	    PNTR.TPG := PNTR.TPG + 1;
	    PNTR.TLN := BYTE(1);
	  end if;
	end if;
      end loop;
    end RELOCATE_UNIT;

  begin -- LOAD_UNIT
    if not IS_EMPTY(LIST(FILESYM)) then
      UNIT := HEAD(LIST(FILESYM));
      return UNIT;

    -- Must actually load it
    end if;
    SEQ_IO.OPEN(LIB_FILE, SEQ_IO.IN_FILE, LIB_PREFIX & PRINTNAME(FILESYM));
    PUT("Loading ");PUT(PRINTNAME(FILESYM));PUT('.');NEW_LINE;
    PAGE := MAKE(0, SECTOR_SIZE-1);
    SEQ_IO.READ(LIB_FILE, RPG(VPG(INTEGER(PAGE.TPG)).RP).DATA.all);
    UNIT := DABS(0,PAGE); -- construct unit pointer
    UNIT := MAKE_TREE(INTEGER(PAGE.TPG), INTEGER(UNIT.TPG), 1);

    for I in 2 .. DI(XD_NBR_PAGES, UNIT) loop
      PAGE := MAKE(0, SECTOR_SIZE-1);
      SEQ_IO.READ(LIB_FILE, RPG(VPG(INTEGER(PAGE.TPG)).RP).DATA.all);
    end loop;
    SEQ_IO.CLOSE(LIB_FILE);

    PUT_LINE("Relocate.");
    WORD := D(XD_LIB_NAME, UNIT); -- a pointer into old first page
    DLTA := INTEGER(UNIT.TPG - WORD.TPG); -- offset from position in file
    UNIT_TIMESTAMP := DI(XD_TIMESTAMP, UNIT);

    WUNIT_SEQ := LIST(UNIT); -- "list" -- but with offset pointers
    WUNIT_LIST:= WUNIT_SEQ.H;
    if WUNIT_LIST /= CONST_NIL then
      while KIND(WUNIT_LIST) = DN_LIST loop
	WUNIT := D(XD_HEAD,OFFSET(WUNIT_LIST));
	WUNIT_LIST := D(XD_TAIL,OFFSET(WUNIT_LIST));
	LOAD_WITHED_UNIT(WUNIT);
      end loop;
      LOAD_WITHED_UNIT(WUNIT_LIST);
    end if;
    RELOCATE_UNIT(UNIT);
    LOADED_UNIT_LIST := INSERT(LOADED_UNIT_LIST, UNIT);
    LIST(FILESYM, INSERT(MAKE,UNIT));
    return UNIT;
  exception
    when NAME_ERROR =>
      PUT("Not found ");PUT(PRINTNAME(FILESYM));PUT('.');NEW_LINE;
      LIST(FILESYM, INSERT(MAKE,CONST_VOID));
      return CONST_VOID;
  end LOAD_UNIT;

  procedure WITH_UNIT(UNIT: TREE) is
    WITH_UNIT_SEQ: SEQ_TYPE := TRANS_WITH_SEQ;
    U_TO_WITH:	   TREE;
    FILE_NAME:	   PNAME;
    SUB_WITH_SEQ:  SEQ_TYPE;
    SUB_WITH:	   TREE;
  begin
    while not IS_EMPTY(WITH_UNIT_SEQ) loop
      U_TO_WITH := HEAD(WITH_UNIT_SEQ); WITH_UNIT_SEQ := TAIL(WITH_UNIT_SEQ);
      if D(TW_COMP_UNIT, U_TO_WITH) = UNIT then
	return;
      end if;
    end loop;

    -- Put transitively withed things on with list first
    SUB_WITH_SEQ := LIST(UNIT);
    while not IS_EMPTY(SUB_WITH_SEQ) loop
      SUB_WITH := HEAD(SUB_WITH_SEQ); SUB_WITH_SEQ := TAIL(SUB_WITH_SEQ);
      WITH_UNIT(D(TW_COMP_UNIT,SUB_WITH));
    end loop;

    U_TO_WITH := MAKE(DN_TRANS_WITH);
    PUT("With: ");PUT(PRINTNAME(D(XD_LIB_NAME,UNIT)));PUT('.');NEW_LINE;
    -- Force new txtrep so it is in correct library file
    SET(FILE_NAME, TO => PRINTNAME(D(XD_LIB_NAME, UNIT)));
    D(TW_FILENAME, U_TO_WITH, STORETEXT(FILE_NAME));
    D(TW_COMP_UNIT, U_TO_WITH, UNIT);
    TRANS_WITH_SEQ := APPEND(TRANS_WITH_SEQ, U_TO_WITH);
  end WITH_UNIT;

  function COPY_NODE(NODE: TREE) return TREE is
    NEW_NODE: TREE;
    WORD_ZERO: TREE;
  begin
    WORD_ZERO := DABS(0, NODE);
    NEW_NODE := MAKE(INTEGER(WORD_ZERO.TPG), INTEGER(WORD_ZERO.TLN));
    for I in 1 .. INTEGER(WORD_ZERO.TLN) loop
      DABS(I, NEW_NODE, DABS(I, NODE));
    end loop;
    return NEW_NODE;
  end COPY_NODE;

  function MAKE_USED_NAME_ID(USED_ID: TREE) return TREE is
    USED_NAME_ID: TREE := MAKE(DN_USED_NAME_ID);
  begin
    D(LX_SYMREP, USED_NAME_ID, D(LX_SYMREP, USED_ID));
    D(LX_SRCPOS, USED_NAME_ID, D(LX_SRCPOS, USED_ID));
    return USED_NAME_ID;
  end MAKE_USED_NAME_ID;

  function UNSELECTED(NAME: TREE) return TREE is
  begin
    if KIND(NAME) = DN_SELECTED then
      return D(AS_DESIGNATOR,NAME);
    else
      return NAME;
    end if;
  end UNSELECTED;

  procedure ENTER_DEFAULT_GENERIC_FORMALS is
    GENERIC_DECL: TREE;
    FORMAL_LIST: SEQ_TYPE;
    FORMAL: TREE;
    SUBPROGRAM_DEF: TREE;
    
    procedure INSERT_SYMBOL(NAME: TREE) is
      DUMMY: TREE;
    begin
      if KIND(NAME) = DN_SELECTED then
	INSERT_SYMBOL(D(AS_NAME, NAME));
	INSERT_SYMBOL(D(AS_DESIGNATOR, NAME));
      else
        -- must be a def_id, def_op, used_id, used_op
	DUMMY := STORESYM(PRINTNAME(D(LX_SYMREP,NAME)));
      end if;
    end INSERT_SYMBOL;

  begin
    while not IS_EMPTY(GENERIC_LIST) loop
      POP(GENERIC_LIST, GENERIC_DECL);
      FORMAL_LIST := LIST(D(AS_ITEM_S,GENERIC_DECL));
      while not IS_EMPTY(FORMAL_LIST) loop
        POP(FORMAL_LIST, FORMAL);
	if KIND(FORMAL) = DN_SUBPROG_ENTRY_DECL then
	  SUBPROGRAM_DEF := D(AS_UNIT_KIND, FORMAL);
	  if KIND(SUBPROGRAM_DEF) = DN_BOX_DEFAULT then
	    INSERT_SYMBOL(D(AS_SOURCE_NAME, FORMAL));
	  end if;
	end if;
      end loop;
    end loop;
  end ENTER_DEFAULT_GENERIC_FORMALS;

  procedure ENTER_USED_DEFINING_IDS is
    UNIT: TREE;
    PNTR: TREE;
    WORD_ZERO: TREE;
    NODE_TYPE: NODE_NAME;
    SYMREP: TREE;
  begin
    while not IS_EMPTY(LOADED_UNIT_LIST) loop
      POP(LOADED_UNIT_LIST, UNIT);
      PNTR := UNIT;
      for I in 1 .. DI(XD_NBR_PAGES, UNIT) loop
	PNTR.TLN := 1;
	while PNTR.TLN < SECTOR_SIZE loop
	  WORD_ZERO := DABS(0, PNTR);
	  exit 
	    when WORD_ZERO = CONST_VIRGIN;
	  PNTR.TTY := BYTE(WORD_ZERO.TPG);
	  NODE_TYPE := NODE_NAME'VAL(WORD_ZERO.TPG);
	  case NODE_TYPE is
	  when  CLASS_DEF_NAME =>
	    SYMREP := D(LX_SYMREP, PNTR);
	    if KIND(SYMREP) = DN_TXTREP then
	      if NODE_TYPE in CLASS_UNIT_NAME
	      or else (NODE_TYPE = DN_VARIABLE_ID 
			and then KIND(D(SM_OBJ_TYPE,PNTR)) = DN_TASK_SPEC)
	      or else NODE_TYPE = DN_TYPE_ID then
	        if NODE_TYPE = DN_VARIABLE_ID
		or else D(SM_FIRST,PNTR) = PNTR then
    		    -- possible region name
	      	    SYMREP := STORESYM(PRINTNAME(SYMREP));
		elsif NODE_TYPE = DN_TYPE_ID then
		    -- check for full spec of incomplete
		    if KIND(D(SM_TYPE_SPEC, D(SM_FIRST,PNTR))) = DN_INCOMPLETE
		    then
			D(XD_FULL_TYPE_SPEC
				, D(SM_TYPE_SPEC, D(SM_FIRST,PNTR))
				, D(SM_TYPE_SPEC, PNTR) );
		    end if;
		end if;
	      else
	        SYMREP := FINDSYM(PRINTNAME(SYMREP));
	      end if;
	      if SYMREP /= CONST_VOID then
	        D(LX_SYMREP, PNTR, SYMREP);
		--LIST(SYMREP, INSERT(LIST(SYMREP), PNTR));
	      end if;
	    end if;
	  when CLASS_DESIGNATOR =>
	    SYMREP := D(SM_DEFN, PNTR);
	    if SYMREP.TPG > 0 -- allow for void (in, e.g., ignored pragma)
	    and then KIND(SYMREP) in CLASS_DEF_NAME then
	      SYMREP := D(LX_SYMREP, SYMREP);
	      if KIND(SYMREP) = DN_SYMBOL_REP then
	        D(LX_SYMREP, PNTR, SYMREP);
	      end if;
	    end if;
	  when others =>
	    null;
	  end case;
	  PNTR.TLN := PNTR.TLN + WORD_ZERO.TLN + 1;
	end loop;
	PNTR.TPG := PNTR.TPG + 1;
      end loop;
    end loop;
  end ENTER_USED_DEFINING_IDS;

begin
  CONST_VIRGIN.TPG := -1;
  CONST_VIRGIN.TTY := BYTE(255);
  CONST_VIRGIN.TLN := BYTE(255);
  OPEN_DIANA;
  LIB_INFO_SEQ := MAKE;
  SET(LIB_PREFIX, TO => "");
  GENERIC_LIST := MAKE;
  LOADED_UNIT_LIST := MAKE;
  NEW_UNIT_LIST := MAKE;
  if DI(XD_ERR_COUNT, CONST_ROOT) > 0 then
      PUT_LINE("Libphase: not executed");
  else
      MAIN;
  end if;
  CLOSE_DIANA;
end LIBPHASE;
