with DIANA, DIANATTR, DIANAMAN; use DIANA, DIANATTR, DIANAMAN;
with EXPRESO; use EXPRESO;
with REQUTIL; use REQUTIL; -- get_base_struct

package body CHKSTAT is
    -- functions to check for static ranges and subtypes
    -- the implementation of these functions follows RM 4.9/11

    function IS_STATIC_RANGE(A: TREE) return BOOLEAN is
    begin
	return KIND(A) = DN_RANGE
		and then GET_STATIC_VALUE(D(AS_EXP1, A)) /= CONST_VOID
		and then GET_STATIC_VALUE(D(AS_EXP2, A)) /= CONST_VOID;
    end IS_STATIC_RANGE;


    function IS_STATIC_SUBTYPE(A: TREE) return BOOLEAN is
    begin
	if KIND(A) in CLASS_PRIVATE_SPEC then
	    return KIND(GET_BASE_STRUCT(A)) in CLASS_SCALAR
		    and then IS_STATIC_SUBTYPE(D(SM_TYPE_SPEC,A));
	elsif KIND(A) = DN_INCOMPLETE then
	    return KIND(GET_BASE_STRUCT(A)) in CLASS_SCALAR
		    and then IS_STATIC_SUBTYPE(D(XD_FULL_TYPE_SPEC,A));
	end if;

	if KIND(A) not in CLASS_SCALAR then
	    return FALSE;
	end if;

	if D(SM_BASE_TYPE, A) = A then
	    -- this is a scalar base type; test for generic formal type
	    return D(SM_RANGE, A) /= CONST_VOID;
	else
	    -- this a subtype, not a base type
	    return IS_STATIC_RANGE(D(SM_RANGE, A))
		    and then IS_STATIC_SUBTYPE(D(SM_TYPE_SPEC,D(SM_RANGE,A)));
	end if;
    end IS_STATIC_SUBTYPE;


    function IS_STATIC_DISCRETE_RANGE(A: TREE) return BOOLEAN is
    begin
	case KIND(A) is
	when DN_DISCRETE_SUBTYPE =>
	    return IS_STATIC_DISCRETE_RANGE(D(AS_SUBTYPE_INDICATION,A));
	when DN_SUBTYPE_INDICATION =>
	    if D(AS_CONSTRAINT, A) = CONST_VOID then
		return IS_STATIC_DISCRETE_RANGE(D(AS_NAME, A));
	    else
		return IS_STATIC_DISCRETE_RANGE(D(AS_NAME, A))
			and then IS_STATIC_RANGE(D(AS_CONSTRAINT, A));
	    end if;
	when DN_RANGE =>
	    return IS_STATIC_RANGE(A);
	when DN_USED_NAME_ID =>
	    return D(SM_DEFN,A) /= CONST_VOID
		    and then IS_STATIC_DISCRETE_RANGE
				( D(SM_EXP_TYPE,D(SM_DEFN,A)) );
	when DN_SELECTED =>
	    return IS_STATIC_DISCRETE_RANGE(D(AS_DESIGNATOR,A));
	when others =>
	    return FALSE;
	end case;
    end IS_STATIC_DISCRETE_RANGE;

    function IS_STATIC_INDEX_CONSTRAINT(ARRAY_TYPE, INDEX_CONSTRAINT: TREE)
	    return BOOLEAN
    is
	INDEX_LIST: SEQ_TYPE := LIST(D(AS_DISCRETE_RANGE_S,INDEX_CONSTRAINT));
	INDEX: TREE;
	ARRAY_TYPE_SPEC: TREE := ARRAY_TYPE;
    begin
	while not IS_EMPTY(INDEX_LIST) loop
	    POP(INDEX_LIST, INDEX);

	    if not IS_STATIC_DISCRETE_RANGE(INDEX) then
		return FALSE;
	    end if;
	end loop;

	if KIND(ARRAY_TYPE_SPEC) in CLASS_PRIVATE_SPEC then
	     ARRAY_TYPE_SPEC := D(SM_TYPE_SPEC,ARRAY_TYPE_SPEC);
	elsif KIND(ARRAY_TYPE_SPEC) = DN_INCOMPLETE then
	    ARRAY_TYPE_SPEC := D(XD_FULL_TYPE_SPEC,ARRAY_TYPE_SPEC);
	end if;

	if KIND(ARRAY_TYPE_SPEC) = DN_CONSTRAINED_ARRAY then
	    -- $$$$ should not happen [RM 3.6.1/3]
	    return FALSE;
	end if;

	INDEX_LIST := LIST(D(SM_INDEX_S,ARRAY_TYPE_SPEC));
	while not IS_EMPTY(INDEX_LIST) loop
	    POP(INDEX_LIST, INDEX);
	    if not IS_STATIC_SUBTYPE(D(SM_TYPE_SPEC, INDEX)) then
		return FALSE;
	    end if;
	end loop;

	return TRUE;
    end IS_STATIC_INDEX_CONSTRAINT;

end CHKSTAT;
