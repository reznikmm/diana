with DIANA, DIANAMAN, DIANATTR; use DIANA, DIANAMAN, DIANATTR;
with VISUTIL; use VISUTIL;
with defutil; use defutil;
with REDSUBP; use REDSUBP;
with setutil; use setutil;
with exptype, expreso; use exptype, expreso;
with attwalk; use attwalk;
with makenod; use makenod;

package body HOMUNIT is

    function WALK_HOMOGRAPH_UNIT (UNIT_NAME: TREE; HEADER: TREE)
	    return TREE
    is
	NEW_NAME: TREE := UNIT_NAME;
	INDEX: TREE := CONST_VOID;
	TYPESET: TYPESET_TYPE := EMPTY_TYPESET;
	DEFSET: DEFSET_TYPE;
	DEFINTERP: DEFINTERP_TYPE;
	DEF: TREE;
	DEF_HEADER: TREE;
	NEW_DEFSET: DEFSET_TYPE := EMPTY_DEFSET;
	index_ok: boolean := true;
	extrainfo: extrainfo_type := null_extrainfo;
	dummy_flag: boolean;
    begin
	if KIND(NEW_NAME) = DN_STRING_LITERAL then
	    NEW_NAME := MAKE_USED_OP_FROM_STRING(NEW_NAME);
	end if;

	if KIND(NEW_NAME) = DN_FUNCTION_CALL
	and then (KIND(D(AS_NAME, NEW_NAME)) = DN_USED_OBJECT_ID
		or else KIND(D(AS_NAME, NEW_NAME)) = DN_SELECTED )
	and then IS_EMPTY(TAIL(LIST(D(AS_GENERAL_ASSOC_S, NEW_NAME))))
	and then KIND(HEAD(LIST(D(AS_GENERAL_ASSOC_S, NEW_NAME)))) /= DN_ASSOC
	then
	    INDEX := HEAD(LIST(D(AS_GENERAL_ASSOC_S, NEW_NAME)));
	    NEW_NAME := D(AS_NAME, NEW_NAME);
	    EVAL_EXP_TYPES(INDEX, TYPESET);
	end if;

	if KIND(NEW_NAME) = DN_ATTRIBUTE then
	    EVAL_ATTRIBUTE(NEW_NAME, TYPESET, dummy_flag, is_function => true);
	    -- $$$$ should check for valid attribute
	    NEW_NAME := RESOLVE_ATTRIBUTE(NEW_NAME);
	elsif KIND(NEW_NAME) = DN_USED_OBJECT_ID
	or else KIND(NEW_NAME) = DN_USED_OP
	or else KIND(NEW_NAME) = DN_USED_CHAR
	or else KIND(NEW_NAME) = DN_SELECTED then
	    FIND_VISIBILITY(NEW_NAME, DEFSET);
	    if not IS_EMPTY(DEFSET) then
		while not IS_EMPTY(DEFSET) loop
		    POP(DEFSET, DEFINTERP);
		    DEF := GET_DEF(DEFINTERP);
		    DEF_HEADER := D(XD_HEADER, DEF);
		    if INDEX = CONST_VOID then
			if KIND(DEF_HEADER)
				in DN_PROCEDURE_SPEC .. DN_FUNCTION_SPEC
			or else ( KIND(DEF_HEADER) = DN_ENTRY
				and then D(AS_DISCRETE_RANGE, DEF_HEADER)
					= CONST_VOID )
			then
			    if ARE_HOMOGRAPH_HEADERS (HEADER, DEF_HEADER)
			    then
				ADD_TO_DEFSET(NEW_DEFSET, DEFINTERP);
			    end if;
			end if;
		    else
			-- retrieve the header for entry family member
			if KIND(D(XD_SOURCE_NAME, DEF)) = DN_ENTRY_ID then
			    DEF_HEADER := D(SM_SPEC, D(XD_SOURCE_NAME,DEF));
			end if;

			if KIND(DEF_HEADER) = DN_ENTRY
			and then D(AS_DISCRETE_RANGE, DEF_HEADER) /= CONST_VOID
			then
			    CHECK_ACTUAL_TYPE
				    ( GET_TYPE_OF_DISCRETE_RANGE
					    ( D(AS_DISCRETE_RANGE, DEF_HEADER) )
				    , TYPESET
				    , INDEX_OK
				    , EXTRAINFO );
			    if INDEX_OK
			    and then IS_SAME_PARAMETER_PROFILE
				    ( D(AS_PARAM_S, HEADER)
				    , D(AS_PARAM_S, DEF_HEADER) )
			    then
				ADD_EXTRAINFO(DEFINTERP, EXTRAINFO);
				ADD_TO_DEFSET(NEW_DEFSET, DEFINTERP);
			    end if;
			end if;
		    end if;
		end loop;
		DEFSET := NEW_DEFSET;
		if IS_EMPTY(DEFSET) then
		    if kind(new_name) = dn_selected then
                        ERROR(D(LX_SRCPOS,UNIT_NAME)
				, "No matching subprograms - "
				  & PRINTNAME(D(LX_SYMREP
					, d(as_designator,NEW_NAME) )) );
		    else
                        ERROR(D(LX_SRCPOS,UNIT_NAME)
				, "No matching subprograms - "
				  & PRINTNAME(D(LX_SYMREP,NEW_NAME)) );
		    end if;
		end if;
		REQUIRE_UNIQUE_DEF(NEW_NAME, DEFSET);
		NEW_NAME := RESOLVE_NAME(NEW_NAME, GET_THE_ID(DEFSET));
		if INDEX /= CONST_VOID then
		    if IS_EMPTY(DEFSET) then
			INDEX := RESOLVE_EXP(INDEX, CONST_VOID);
		    else
			INDEX := RESOLVE_EXP(INDEX,
				GET_TYPE_OF_DISCRETE_RANGE
					( D(AS_DISCRETE_RANGE, DEF_HEADER) ));
		    end if;
		    NEW_NAME := MAKE_INDEXED
			    ( AS_NAME => NEW_NAME
			    , AS_EXP_S => MAKE_EXP_S
				    ( LIST => SINGLETON(INDEX)
				    , LX_SRCPOS => D(LX_SRCPOS
					    , D(AS_GENERAL_ASSOC_S,UNIT_NAME) ))
			    , LX_SRCPOS => D(LX_SRCPOS, UNIT_NAME) );
		end if;
	    end if;
	else
            ERROR(D(LX_SRCPOS,NEW_NAME), "Cannot be subprogram name");
	    NEW_NAME := RESOLVE_EXP(NEW_NAME, CONST_VOID);
	end if;

	return NEW_NAME;
    end WALK_HOMOGRAPH_UNIT;

end HOMUNIT;
