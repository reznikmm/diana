with UNIVOPS; use UNIVOPS;
with EVALNUM;
with expreso; use expreso;
with diana,dianattr,dianaman; use diana,dianattr,dianaman;

package body UARITH is
    -- universal arithmetic functions

    -- Note.  This package was originally implemented with an Ada-like
    --	 compiler (old Janus) which did not have 32-bit arithmetic;
    --	 hence the multiple precision arithmetic using 8-bit pieces.

    function IS_ZERO(V: VECTOR) return BOOLEAN;

    -- make universal value from an integer
    function U_VAL(A: INTEGER) return TREE is
	A_SPREAD: VECTOR;
    begin
	SPREAD(A, A_SPREAD);
	return U_INT(A_SPREAD);
    end U_VAL;

    -- make universal value (integer or real) from string
    -- return void if illegal value
    function U_VALUE(TXT: STRING) return TREE is
    begin
	return EVALNUM(TXT);
    end U_VALUE;

    -- return integer value for universal (must be in range)
    function U_POS(A: TREE) return INTEGER is
    begin
	if A.TLN /= 0 then
	    raise ASSERTION_ERROR;
	end if;
	return INTEGER(A.TPG);
    end U_POS;

    -- operators on universal values
    -- return void if either operand is void

    -- following return 0 or 1 or void
    function U_EQUAL(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL then
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);
		if L_SPREAD.S = R_SPREAD.S
		and then V_EQUAL(L_SPREAD, R_SPREAD) then
		    return U_VAL(1);
		else
		    return U_VAL(0);
		end if;
	    end;
	else -- nust be real_val
	    return U_EQUAL( D(XD_NUMER,LEFT) * D(XD_DENOM,RIGHT),
			    D(XD_NUMER,RIGHT) * D(XD_DENOM,LEFT));
	end if;
    end U_EQUAL;

    function U_NOT_EQUAL(LEFT, RIGHT: TREE) return TREE is
    begin
	return not U_EQUAL(LEFT, RIGHT);
    end U_NOT_EQUAL;

    function "<"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL then
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);
		if L_SPREAD.S < 0 then
		    if R_SPREAD.S > 0
		    or else V_LESS(R_SPREAD, L_SPREAD) then
			return U_VAL(1);
		    end if;
		else
		    if R_SPREAD.S > 0
		    and then V_LESS(L_SPREAD, R_SPREAD) then
			return U_VAL(1);
		    end if;
		end if;
		return U_VAL(0);
	    end;
	else -- must be real_val
            return "<" ( D(XD_NUMER,LEFT) * D(XD_DENOM,RIGHT),
			 D(XD_NUMER,RIGHT) * D(XD_DENOM,LEFT));
	end if;
    end "<";

    function "<="(LEFT, RIGHT: TREE) return TREE is
    begin
	return not (RIGHT < LEFT);
    end "<=";

    function ">"(LEFT, RIGHT: TREE) return TREE is
    begin
	return (RIGHT < LEFT);
    end ">";

    function ">="(LEFT, RIGHT: TREE) return TREE is
    begin
	return not (LEFT < RIGHT);
    end ">=";

    function U_MEMBER(VALUE, DISCRETE_RANGE: TREE) return TREE is
    begin
	if VALUE = CONST_VOID then
	    return CONST_VOID;
	end if;

	if KIND(DISCRETE_RANGE) = DN_RANGE then
	    return (VALUE >= GET_STATIC_VALUE(D(AS_EXP1,DISCRETE_RANGE)))
	            and (VALUE <= GET_STATIC_VALUE(D(AS_EXP2,DISCRETE_RANGE)));

	elsif KIND(DISCRETE_RANGE) = DN_RANGE_ATTRIBUTE then
	    QUIT("$$$$ range attr discr subt");
	    return CONST_VOID;

	elsif KIND(DISCRETE_RANGE) = DN_DISCRETE_SUBTYPE then
	    declare
		SUBTYPE_INDICATION: constant TREE
			:= D(AS_SUBTYPE_INDICATION, DISCRETE_RANGE);
		NAME: constant TREE := D(AS_NAME, SUBTYPE_INDICATION);
		CONSTRAINT: constant TREE
			:= D(AS_CONSTRAINT, SUBTYPE_INDICATION);
	    begin
	  	if KIND(CONSTRAINT) in CLASS_RANGE then
		    return U_MEMBER(VALUE, CONSTRAINT);
		elsif KIND(CONSTRAINT) in CLASS_REAL_CONSTRAINT
		and then D(AS_RANGE,CONSTRAINT) /= CONST_VOID then
		    return U_MEMBER(VALUE, D(AS_RANGE,CONSTRAINT));
		elsif CONSTRAINT /= CONST_VOID then
		    QUIT("$$$$ u_member: index/dscrmt constraint");
		end if;

		if D(SM_DEFN,NAME) = CONST_VOID then
		    return CONST_VOID;
		end if;

		-- (better be a discrete subtype)
		return U_MEMBER
			( VALUE
			, D(SM_RANGE,D(SM_TYPE_SPEC,D(SM_DEFN,NAME))) );
	    end;
	end if;
    end U_MEMBER;


    -- following return BOOLEAN (for compiler range tests)
    function "<="(LEFT, RIGHT: TREE) return BOOLEAN is
    begin
	return (LEFT <= RIGHT) = U_VAL(1);
    end "<=";

    function ">="(LEFT, RIGHT: TREE) return BOOLEAN is
    begin
	return (LEFT >= RIGHT) = U_VAL(1);
    end ">=";

    function U_EQUAL(LEFT, RIGHT: TREE) return BOOLEAN is
    begin
	return U_EQUAL(LEFT, RIGHT) = U_VAL(1);
    end U_EQUAL;

    function U_MEMBER(VALUE, DISCRETE_RANGE: TREE) return BOOLEAN is
    begin
	return U_MEMBER(VALUE, DISCRETE_RANGE) = U_VAL(1);
    end U_MEMBER;


    -- following expect 0 or 1 as argument -- boolean operators
    function "AND"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif LEFT.TPG > 0 and RIGHT.TPG > 0 then
	    return U_VAL(1);
	else
	    return U_VAL(0);
	end if;
    end "AND";

    function "OR"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif LEFT.TPG > 0 or RIGHT.TPG > 0 then
	    return U_VAL(1);
	else
	    return U_VAL(0);
	end if;
    end "OR";

    function "XOR"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif LEFT.TPG /= RIGHT.TPG then
	    return U_VAL(1);
	else
	    return U_VAL(0);
	end if;
    end "XOR";

    function "NOT"(RIGHT: TREE) return TREE is
    begin
	if RIGHT = CONST_VOID then
	    return CONST_VOID;
	else
	    return U_VAL(1 - INTEGER(RIGHT.TPG));
	end if;
    end "NOT";


    -- unary functions
    function "-"(RIGHT: TREE) return TREE is
    begin
	if RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(RIGHT) = DN_NUM_VAL then
	    declare
		R_SPREAD: VECTOR;
	    begin
		SPREAD(RIGHT, R_SPREAD);
		R_SPREAD.S := - R_SPREAD.S;
		return U_INT(R_SPREAD);
	    end;
	else -- must be real_val
	    return U_REAL( - D(XD_NUMER, RIGHT), D(XD_DENOM, RIGHT) );
	end if;
    end "-";

    function "ABS"(RIGHT: TREE) return TREE is
    begin
	if RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(RIGHT) = DN_NUM_VAL then
	    declare
		R_SPREAD: VECTOR;
	    begin
		SPREAD(RIGHT, R_SPREAD);
		if R_SPREAD.S > 0 then
		    return RIGHT;
		else
		    R_SPREAD.S := +1;
		    return U_INT(R_SPREAD);
		end if;
	    end;
	else -- must be real_val
	    return U_REAL( abs D(XD_NUMER, RIGHT), D(XD_DENOM, RIGHT) );
	end if;
    end "ABS";


    -- binary functions
    function "+"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL then
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);
		if L_SPREAD.S = R_SPREAD.S then
		    V_ADD(L_SPREAD, R_SPREAD);
		    return U_INT(R_SPREAD);
		elsif V_EQUAL(L_SPREAD, R_SPREAD) then
		    return U_VAL(0);
		elsif V_LESS(L_SPREAD, R_SPREAD) then
		    V_SUB(L_SPREAD, R_SPREAD);
		    return U_INT(R_SPREAD);
		else
		    V_SUB(R_SPREAD, L_SPREAD);
		    return U_INT(L_SPREAD);
		end if;
	    end;
	else -- must be real_val
	    return U_REAL( D(XD_NUMER, LEFT) * D(XD_DENOM, RIGHT)
			   + D(XD_NUMER, RIGHT) * D(XD_DENOM, LEFT)
			 , D(XD_DENOM, LEFT) * D(XD_DENOM, RIGHT) );
	end if;
    end "+";

    function "-"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL then
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);
		R_SPREAD.S := - R_SPREAD.S; -- rest of code same as +
		if L_SPREAD.S = R_SPREAD.S then
		    V_ADD(L_SPREAD, R_SPREAD);
		    return U_INT(R_SPREAD);
		elsif V_EQUAL(L_SPREAD, R_SPREAD) then
		    return U_VAL(0);
		elsif V_LESS(L_SPREAD, R_SPREAD) then
		    V_SUB(L_SPREAD, R_SPREAD);
		    return U_INT(R_SPREAD);
		else
		    V_SUB(R_SPREAD, L_SPREAD);
		    return U_INT(L_SPREAD);
		end if;
	    end;
	else -- must be real_val
	    return U_REAL( D(XD_NUMER, LEFT) * D(XD_DENOM, RIGHT)
			   - D(XD_NUMER, RIGHT) * D(XD_DENOM, LEFT)
			 , D(XD_DENOM, LEFT) * D(XD_DENOM, RIGHT) );
	end if;
    end "-";

    function "*"(LEFT, RIGHT: TREE) return TREE is -- i*i, i*r, r*i, r*r
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL and KIND(RIGHT) = DN_NUM_VAL then
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
		TEMP: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);
		V_MUL(L_SPREAD, R_SPREAD, TEMP);
		TEMP.S := L_SPREAD.S * R_SPREAD.S;
		return U_INT(TEMP);
	    end;
	elsif KIND(RIGHT) = DN_NUM_VAL then
	    return U_REAL( D(XD_NUMER,LEFT) * RIGHT
			 , D(XD_DENOM,LEFT) );
	elsif KIND(LEFT) = DN_NUM_VAL then
	    return RIGHT * LEFT;
	else -- must be real_val
	    return U_REAL( D(XD_NUMER, LEFT) * D(XD_NUMER, RIGHT)
			 , D(XD_DENOM, LEFT) * D(XD_DENOM, RIGHT) );
	end if;
    end "*";

    function "/"(LEFT, RIGHT: TREE) return TREE is -- i/i, r/i, r/r
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL and KIND(RIGHT) = DN_NUM_VAL then
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
		TEMP: VECTOR;
	    begin
		SPREAD(RIGHT, R_SPREAD);
		if IS_ZERO(R_SPREAD) then
		    return CONST_VOID;
		end if;
		SPREAD(LEFT, L_SPREAD);
		V_DIV(R_SPREAD, L_SPREAD, TEMP);
		TEMP.S := L_SPREAD.S * R_SPREAD.S;
		return U_INT(TEMP);
	    end;
	elsif KIND(RIGHT) = DN_NUM_VAL then
	    if RIGHT = U_VAL(0) then
		return CONST_VOID;
	    end if;
	    return U_REAL( D(XD_NUMER,LEFT)
			 , D(XD_DENOM,LEFT) * RIGHT);
	else -- must be real_val
	    if D(XD_NUMER,RIGHT) = U_VAL(0) then
		return CONST_VOID;
	    end if;
	    return U_REAL( D(XD_NUMER, LEFT) * D(XD_DENOM, RIGHT)
			 , D(XD_DENOM, LEFT) * D(XD_NUMER, RIGHT) );
	end if;
    end "/";

    function "MOD"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	else
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
		TEMP: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);

	        if IS_ZERO(R_SPREAD) then
		    return CONST_VOID; -- zero divide
		end if;

		V_DIV(R_SPREAD, L_SPREAD, TEMP);
		if L_SPREAD.S /= R_SPREAD.S
		and then not IS_ZERO(L_SPREAD) then
		    V_SUB(L_SPREAD, R_SPREAD);
		    L_SPREAD.D(1..R_SPREAD.L) := R_SPREAD.D(1..R_SPREAD.L);
		end if;
		L_SPREAD.S := R_SPREAD.S;
		return U_INT(L_SPREAD);
	    end;
	end if;
    end "MOD";

    function "REM"(LEFT, RIGHT: TREE) return TREE is
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	else
	    declare
		L_SPREAD, R_SPREAD: VECTOR;
		TEMP: VECTOR;
	    begin
		SPREAD(LEFT, L_SPREAD);
		SPREAD(RIGHT, R_SPREAD);

		if IS_ZERO(R_SPREAD) then
		    return CONST_VOID; -- zero divide
		end if;

		V_DIV(R_SPREAD, L_SPREAD, TEMP);
		-- sign is sign of original L_SPREAD
		return U_INT(L_SPREAD);
	    end;
	end if;
    end "REM";

    function "**"(LEFT, RIGHT: TREE) return TREE is -- i**i, r**i
    begin
	if LEFT = CONST_VOID or RIGHT = CONST_VOID then
	    return CONST_VOID;
	elsif RIGHT.TLN /= 0 then
	    --constraint error on second argument
	    --!!!! node hard-wired 16 bits !!!!
	    return CONST_VOID;
	elsif KIND(LEFT) = DN_NUM_VAL then
	    declare
		L_SPREAD: VECTOR;
		TEMP: VECTOR;
		RESULT: VECTOR;
		COUNT: INTEGER := U_POS(RIGHT); -- better be in range
	    begin
		if COUNT < 0 then
		    return CONST_VOID; -- constraint error for - exp
		end if;
		SPREAD(LEFT, L_SPREAD);
		SPREAD(1, RESULT);
		while COUNT > 0 loop
		    V_MUL(L_SPREAD, RESULT, TEMP);
		    V_COPY(TEMP, RESULT);
		    RESULT.S := RESULT.S * L_SPREAD.S;
		    COUNT := COUNT - 1;
		end loop;
		return U_INT(RESULT);
	    end;
	else
	    if U_POS(RIGHT) >= 0 then
		return U_REAL( D(XD_NUMER,LEFT) ** RIGHT
			     , D(XD_DENOM,LEFT) ** RIGHT );
	    else
		return U_REAL( D(XD_DENOM,LEFT) ** (- RIGHT)
			     , D(XD_NUMER,LEFT) ** (- RIGHT) );
	    end if;
	end if;
    end "**";

    function IS_ZERO(V: VECTOR) return BOOLEAN is
    begin
	return V.D(1..V.L) = (1..V.L => 0);
    end IS_ZERO;

end UARITH;
