with DIANA, DIANATTR, DIANAMAN; use DIANA, DIANAMAN, DIANATTR;
with DEFUTIL; use DEFUTIL;
with SEMGLOB; use SEMGLOB;
with VISUTIL; use VISUTIL;
with UARITH;
with EXPTYPE; use EXPTYPE;
with MAKENOD; use MAKENOD;
with REDSUBP; use REDSUBP;
with REQUTIL; use REQUTIL;
with DEFWALK; use DEFWALK;
with AGGRESO; use AGGRESO;
with ATTWALK; use ATTWALK;

package body EXPRESO is

    function WALK_DISCRMT_CONSTRAINT
		( RECORD_TYPE:		TREE
		; GENERAL_ASSOC_S:	TREE )
	    return TREE;

    function RESOLVE_RANGE(EXP: TREE; TYPE_SPEC: TREE) return TREE;


    function GET_NAME_DEFN(NAME: TREE) return TREE is
    begin
	case KIND(NAME) is
	when DN_VOID =>
	    return CONST_VOID;
	when DN_SELECTED =>
	    return D(SM_DEFN, D(AS_DESIGNATOR, NAME));
	when CLASS_DESIGNATOR =>
	    return D(SM_DEFN, NAME);
	when others =>
            QUIT("Get_Name_Defn: invalid parameter");
	end case;
    end GET_NAME_DEFN;

    -- $$$$ probably shouldn't be here
    function LENGTH(A: SEQ_TYPE) return NATURAL is
	COUNT: NATURAL := 0;
	ATAIL: SEQ_TYPE := A;
    begin
	while not IS_EMPTY(ATAIL) loop
	    COUNT := COUNT + 1;
	    ATAIL := TAIL(ATAIL);
	end loop;
	return COUNT;
    end LENGTH;

    function APPROP_STRUCT(TYPE_SPEC: TREE) return TREE is
	TYPE_STRUCT: TREE := GET_BASE_STRUCT(TYPE_SPEC);
    begin
	if KIND(TYPE_STRUCT) = DN_ACCESS then
	    TYPE_STRUCT := GET_BASE_STRUCT(D(SM_DESIG_TYPE,TYPE_STRUCT));
	end if;
	return TYPE_STRUCT;
    end APPROP_STRUCT;

    function GET_STATIC_VALUE(EXP: TREE) return TREE is
    begin
	case KIND(EXP) is
	when CLASS_USED_OBJECT | CLASS_NAME_VAL | CLASS_EXP_VAL =>
	    return D(SM_VALUE, EXP);
	when DN_CONSTANT_ID | DN_NUMBER_ID =>
	    return GET_STATIC_VALUE(D(SM_INIT_EXP, EXP));
	when CLASS_ENUM_LITERAL =>
	    return UARITH.U_VAL(DI(SM_POS, EXP));
	when others =>
	    return CONST_VOID;
	end case;
    end GET_STATIC_VALUE;

    --========================================================================

    function RESOLVE_EXP(EXP: TREE; TYPE_SPEC: TREE) return TREE is
	EXP_KIND:		constant NODE_NAME := KIND(EXP);

    begin
	-- should be syntactical expression or void
	if EXP_KIND not in CLASS_EXP then
	    -- presumably any error messages have been given
	    if EXP_KIND = DN_RANGE or EXP_KIND = DN_DISCRETE_SUBTYPE then
		return RESOLVE_DISCRETE_RANGE(EXP, TYPE_SPEC);
	    else
		return EXP;
	    end if;
	end if;


        case CLASS_EXP'(EXP_KIND) is

	when DN_USED_CHAR | DN_USED_OBJECT_ID =>
	    declare
		DEFSET: DEFSET_TYPE;
		DEFINTERP: DEFINTERP_TYPE;
		DEF: TREE;
		DEF_TYPE: TREE;
		NEW_DEFSET: DEFSET_TYPE := EMPTY_DEFSET;

		DEFN: TREE := CONST_VOID;
	    begin
		if TYPE_SPEC /= CONST_VOID then
		    DEFSET := FETCH_DEFSET(EXP);
		    while not IS_EMPTY(DEFSET) loop
			POP(DEFSET, DEFINTERP);
			DEF := GET_DEF(DEFINTERP);
			DEF_TYPE := EXPRESSION_TYPE_OF_DEF(DEF);
			if DEF_TYPE = TYPE_SPEC
			or else (KIND(DEF_TYPE) = DN_ANY_INTEGER
				and then (KIND(TYPE_SPEC) = DN_INTEGER
					  or else KIND(TYPE_SPEC)
						    = DN_UNIVERSAL_INTEGER))
			or else (KIND(DEF_TYPE) = DN_ANY_REAL
				and then (KIND(TYPE_SPEC) = DN_FLOAT
					  or else KIND(TYPE_SPEC) = DN_FIXED
					  or else KIND(TYPE_SPEC)
						    = DN_UNIVERSAL_REAL))
			then
			    ADD_TO_DEFSET(NEW_DEFSET, DEFINTERP);
			end if;
		    end loop;
		    if IS_EMPTY(NEW_DEFSET) then
                        ERROR(D(LX_SRCPOS,EXP), "**** No defs in resolve");
		    end if;
		    REQUIRE_UNIQUE_DEF(EXP, NEW_DEFSET);
		    DEFN := GET_THE_ID(NEW_DEFSET);
		end if;

		D(SM_DEFN, EXP, DEFN);
		if KIND(DEFN) = DN_FUNCTION_ID
                or else KIND(DEFN) = DN_GENERIC_ID then
                    -- it's function call with all default args
		    declare
			NEW_EXP: TREE;
		    begin
			NEW_EXP := MAKE_FUNCTION_CALL
				( LX_SRCPOS => D(LX_SRCPOS,EXP)
				, AS_NAME => MAKE_USED_NAME_ID_FROM_OBJECT
					( EXP )
				, AS_GENERAL_ASSOC_S => MAKE_GENERAL_ASSOC_S
					( LIST => MAKE )
				, SM_EXP_TYPE => D(SM_TYPE_SPEC, GET_NAME_DEFN
					( D(AS_NAME, D(SM_SPEC, DEFN)) )) );
			-- make normalized_param_s for default params
			D(SM_NORMALIZED_PARAM_S
				, NEW_EXP
				, RESOLVE_SUBP_PARAMETERS
					  ( GET_DEF(HEAD(NEW_DEFSET))
					  , D(AS_GENERAL_ASSOC_S, NEW_EXP) ) );
			return NEW_EXP;
		    end;
		elsif KIND(DEFN) in CLASS_TYPE_NAME then
		    -- (for name of task type inside the task body)
		    D(SM_EXP_TYPE, EXP, D(SM_TYPE_SPEC, DEFN));
		elsif DEFN /= CONST_VOID then
		    D(SM_EXP_TYPE, EXP, D(SM_OBJ_TYPE, DEFN));
		    D(SM_VALUE, EXP, GET_STATIC_VALUE(DEFN));
		else
		    D(SM_EXP_TYPE, EXP, CONST_VOID);
		end if;
	    end;


	when DN_USED_OP =>
            QUIT("Invalid parameter for Resolve_Exp");


	when DN_USED_NAME_ID =>
	    -- already resolved
	    null;


	when DN_ATTRIBUTE =>
	    declare
		NEW_EXP: TREE;
	    begin
		NEW_EXP := RESOLVE_ATTRIBUTE(EXP);
		if KIND(D(SM_EXP_TYPE,NEW_EXP)) in CLASS_UNSPECIFIED_TYPE then
		    D(SM_EXP_TYPE, NEW_EXP, TYPE_SPEC);
		end if;
		return NEW_EXP;
	    end;

	when DN_SELECTED =>
	    declare
		NAME: TREE := D(AS_NAME, EXP);
		DESIGNATOR: TREE := D(AS_DESIGNATOR, EXP);
		DESIGNATOR_REGION: TREE := CONST_VOID;

		NAME_TYPESET: TYPESET_TYPE;
		NAME_TYPEINTERP: TYPEINTERP_TYPE;
		NEW_NAME_TYPESET: TYPESET_TYPE := EMPTY_TYPESET;
	    begin

		-- resolve the designator
		DESIGNATOR := RESOLVE_EXP(DESIGNATOR, TYPE_SPEC);
		D(AS_DESIGNATOR, EXP, DESIGNATOR);

		-- if designator represents an expression
		if KIND(DESIGNATOR) in CLASS_USED_OBJECT then

		    -- copy value and subtype
		    D(SM_VALUE, EXP, GET_STATIC_VALUE(DESIGNATOR));
		    D(SM_EXP_TYPE, EXP, D(SM_EXP_TYPE, DESIGNATOR));

		    -- if prefix can be expression
		    if KIND(NAME) not in CLASS_USED_NAME then

			-- get saved typeset for name
			NAME_TYPESET := FETCH_TYPESET(NAME);

			-- get possible types of prefix
			if D(SM_DEFN, DESIGNATOR) /= CONST_VOID then
			    DESIGNATOR_REGION
				    := D(XD_SOURCE_NAME,D(XD_REGION_DEF
				     , GET_DEF_FOR_ID(D(SM_DEFN,DESIGNATOR)) ));
			end if;
			while not IS_EMPTY(NAME_TYPESET) loop
			    POP(NAME_TYPESET, NAME_TYPEINTERP);
			    if D(XD_SOURCE_NAME
				      ,APPROP_STRUCT(GET_TYPE(NAME_TYPEINTERP)))
				    = DESIGNATOR_REGION
			    then
				ADD_TO_TYPESET
					( NEW_NAME_TYPESET
					, NAME_TYPEINTERP);
			    end if;
			end loop;

			-- require a unique type
			REQUIRE_UNIQUE_TYPE(NAME, NEW_NAME_TYPESET);

			-- resolve the name
			NAME := RESOLVE_EXP(NAME, NEW_NAME_TYPESET);
			D(AS_NAME, EXP, NAME);
		    end if;

		-- else if designator is a function call
		elsif KIND(DESIGNATOR) = DN_FUNCTION_CALL then

		    -- replace:
		    --	    selected
		    --	      as_name: <prefix_name>
		    --	      as_designator: function_call
		    --		as_name: <function_name>
		    --		...
		    -- by:
		    --	    function_call
		    --	      as_name: selected
		    --		as_name: <prefix_name>
		    --		as_designator: <function_name>
		    --	      ...
		    D(AS_DESIGNATOR, EXP, D(AS_NAME, DESIGNATOR));
		    D(SM_EXP_TYPE, EXP, CONST_VOID);
		    D(AS_NAME, DESIGNATOR, EXP);
		    D(LX_SRCPOS, DESIGNATOR, D(LX_SRCPOS, NAME));
		    return DESIGNATOR;
		end if;
	    end;


	when DN_FUNCTION_CALL =>
	    return RESOLVE_FUNCTION_CALL(EXP, TYPE_SPEC);


	when DN_INDEXED =>
            QUIT("Resolve_Exp: invalid node");



	when DN_SLICE =>
            QUIT("Resolve_Exp: invalid node");


	when DN_ALL =>
	    declare
		NAME: TREE := D(AS_NAME, EXP);
		NAME_TYPESET: TYPESET_TYPE := FETCH_TYPESET(NAME);
		NAME_TYPEINTERP: TYPEINTERP_TYPE;
		NAME_STRUCT: TREE;
		NEW_NAME_TYPESET: TYPESET_TYPE := EMPTY_TYPESET;
	    begin

		-- get list of name types with required desig type
		-- ... (Find at least one unless type_spec is void)
		while not IS_EMPTY(NAME_TYPESET) loop
		    POP(NAME_TYPESET, NAME_TYPEINTERP);
		    NAME_STRUCT := GET_BASE_STRUCT(GET_TYPE(NAME_TYPEINTERP));
		    if GET_BASE_TYPE(D(SM_DESIG_TYPE,NAME_STRUCT)) = TYPE_SPEC
		    then
			ADD_TO_TYPESET
				( NEW_NAME_TYPESET
				, NAME_TYPEINTERP );
		    end if;
		end loop;

		-- resolve the name
		REQUIRE_UNIQUE_TYPE(NAME, NEW_NAME_TYPESET);
		NAME := RESOLVE_EXP(NAME, NEW_NAME_TYPESET);
		D(AS_NAME, EXP, NAME);

		-- expression type is designated subtype of name type
		if not IS_EMPTY(NEW_NAME_TYPESET) then
		    D(SM_EXP_TYPE
			    , EXP
			    , D(SM_DESIG_TYPE
				    , GET_BASE_STRUCT
					    ( GET_THE_TYPE(NEW_NAME_TYPESET))));
		else
		    D(SM_EXP_TYPE, EXP, TYPE_SPEC);
		end if;
	    end;


	when DN_SHORT_CIRCUIT =>
	    declare
		EXP1: TREE := D(AS_EXP1, EXP);
		EXP2: TREE := D(AS_EXP2, EXP);
	    begin

		-- resolve the two expressions
		EXP1 := RESOLVE_EXP(EXP1, TYPE_SPEC);
		D(AS_EXP1, EXP, EXP1);
		EXP2 := RESOLVE_EXP(EXP2, TYPE_SPEC);
		D(AS_EXP2, EXP, EXP2);

		-- store the result type
		D(SM_EXP_TYPE, EXP, TYPE_SPEC);
	    end;


	when DN_NUMERIC_LITERAL =>
	    declare
	    begin

		-- Value already known
		-- Store type which is result of any implicit conversion
		D(SM_EXP_TYPE, EXP, TYPE_SPEC);
	    end;


	when DN_NULL_ACCESS =>
	    declare
	    begin

		-- store the result type
		D(SM_EXP_TYPE, EXP, TYPE_SPEC);
	    end;


	when DN_RANGE_MEMBERSHIP =>
	    declare
		EXP_NODE: TREE := D(AS_EXP, EXP);
		RANGE_NODE: TREE := D(AS_RANGE, EXP);
		EXP_TYPESET: TYPESET_TYPE;
		RANGE_TYPESET: TYPESET_TYPE;
		TYPESET: TYPESET_TYPE;
		TYPE_MARK_TYPE: TREE;
	    begin
		EVAL_EXP_TYPES(EXP_NODE, EXP_TYPESET);
		if KIND(RANGE_NODE) = DN_RANGE
		or KIND(RANGE_NODE) = DN_ATTRIBUTE
		or ( KIND(RANGE_NODE) = DN_FUNCTION_CALL
			and then KIND(D(AS_NAME,RANGE_NODE)) = DN_ATTRIBUTE )
		then
		    EVAL_RANGE(RANGE_NODE, RANGE_TYPESET);
		    REQUIRE_SAME_TYPES
				( EXP_NODE, EXP_TYPESET
				, RANGE_NODE, RANGE_TYPESET
				, TYPESET );
		    REQUIRE_UNIQUE_TYPE(RANGE_NODE, TYPESET);
		    EXP_NODE := RESOLVE_EXP(EXP_NODE, TYPESET);
		    D(AS_EXP, EXP, EXP_NODE);
		    RANGE_NODE := RESOLVE_RANGE
				(RANGE_NODE, GET_THE_TYPE(TYPESET));
		    D(AS_RANGE, EXP, RANGE_NODE);
		    D(SM_EXP_TYPE, EXP, PREDEFINED_BOOLEAN);
		else
		    TYPE_MARK_TYPE := EVAL_TYPE_MARK(RANGE_NODE);
		    RANGE_NODE := RESOLVE_TYPE_MARK(RANGE_NODE);
		    REQUIRE_TYPE(TYPE_MARK_TYPE, EXP_NODE, EXP_TYPESET);
		    EXP_NODE := RESOLVE_EXP(EXP_NODE, EXP_TYPESET);
		    return MAKE_TYPE_MEMBERSHIP
				( LX_SRCPOS => D(LX_SRCPOS,EXP)
				, AS_EXP => EXP_NODE
				, AS_NAME => RANGE_NODE
				, AS_MEMBERSHIP_OP
					=> D(AS_MEMBERSHIP_OP, EXP)
				, SM_EXP_TYPE => PREDEFINED_BOOLEAN );
		end if;
	    end;


	when DN_TYPE_MEMBERSHIP | DN_CONVERSION =>
            QUIT("Resolve_Exp: invalid node");


	when DN_QUALIFIED =>
	    declare
		EXP_NODE: TREE := D(AS_EXP, EXP);
		NAME: TREE := D(AS_NAME, EXP);

		EXP_TYPESET: TYPESET_TYPE;
		NAME_DEFN: TREE;
		SUBTYPE_SPEC: TREE;
		VALUE: TREE := D(SM_VALUE, EXP);
	    begin
		NAME := RESOLVE_TYPE_MARK(NAME);
		D(AS_NAME, EXP, NAME);
		NAME_DEFN := GET_NAME_DEFN(NAME);
		if NAME_DEFN /= CONST_VOID then
		    SUBTYPE_SPEC := D(SM_TYPE_SPEC, NAME_DEFN);
		else
		    SUBTYPE_SPEC := CONST_VOID;
		end if;

		EVAL_EXP_TYPES(EXP_NODE, EXP_TYPESET);
		REQUIRE_TYPE(GET_BASE_TYPE(SUBTYPE_SPEC)
				, EXP_NODE, EXP_TYPESET);
		if not IS_EMPTY(EXP_TYPESET) then
		    EXP_NODE := RESOLVE_EXP_OR_AGGREGATE
				( EXP_NODE
				, SUBTYPE_SPEC
				, NAMED_OTHERS_OK => TRUE );
		else
		    EXP_NODE := RESOLVE_EXP
				( EXP_NODE
				, CONST_VOID );
		end if;
		D(AS_EXP, EXP, EXP_NODE);

		D(SM_EXP_TYPE, EXP, SUBTYPE_SPEC);
		D(SM_VALUE, EXP, GET_STATIC_VALUE(EXP_NODE));
	    end;


	when DN_PARENTHESIZED =>
	    declare
		EXP_NODE: TREE := D(AS_EXP, EXP);
	    begin
		EXP_NODE := RESOLVE_EXP(EXP_NODE, TYPE_SPEC);
		D(AS_EXP, EXP, EXP_NODE);
		D(SM_EXP_TYPE, EXP, D(SM_EXP_TYPE, EXP_NODE));
		D(SM_VALUE, EXP, GET_STATIC_VALUE(EXP_NODE));
	    end;


	when DN_AGGREGATE =>
	    RESOLVE_AGGREGATE(EXP, TYPE_SPEC);

	when DN_STRING_LITERAL =>
	    RESOLVE_STRING(EXP, TYPE_SPEC);


	when DN_QUALIFIED_ALLOCATOR =>
	    declare
		QUALIFIED: TREE := D(AS_QUALIFIED, EXP);
	    begin
		-- (Note: required type ignored in resolve_exp)
		QUALIFIED := RESOLVE_EXP(QUALIFIED, CONST_VOID);
		D(SM_EXP_TYPE, EXP, TYPE_SPEC);
	    end;


	when DN_SUBTYPE_ALLOCATOR =>
	    declare
		SUBTYPE_INDICATION: TREE := D(AS_SUBTYPE_INDICATION, EXP);
		EXP_TYPE: TREE := D(SM_EXP_TYPE, EXP);
		DESIG_TYPE: TREE := D(SM_DESIG_TYPE, EXP);
		SUBTYPE_SPEC: TREE;
	    begin
		RESOLVE_SUBTYPE_INDICATION(SUBTYPE_INDICATION, SUBTYPE_SPEC);
		D(AS_SUBTYPE_INDICATION, EXP, SUBTYPE_INDICATION);
		D(SM_EXP_TYPE, EXP, TYPE_SPEC);
		D(SM_DESIG_TYPE, EXP, SUBTYPE_SPEC);
	    end;

	end case;

	--$$$$$ need to have a temporary for exp
	return EXP;
    end RESOLVE_EXP;

    ------------------------------------------------------------------------

    function RESOLVE_RANGE(EXP: TREE; TYPE_SPEC: TREE) return TREE is
    begin
	-- if it is a range
	if KIND(EXP) = DN_RANGE then

	    -- save the range type and resolve the bounds
	    D(SM_TYPE_SPEC, EXP, TYPE_SPEC);
	    D(AS_EXP1, EXP, RESOLVE_EXP(D(AS_EXP1, EXP), TYPE_SPEC));
	    D(AS_EXP2, EXP, RESOLVE_EXP(D(AS_EXP2, EXP), TYPE_SPEC));
	    return EXP;

	-- else if it is a range attribute
	elsif KIND(EXP) = DN_ATTRIBUTE
	or else ( KIND(EXP) = DN_FUNCTION_CALL
		 and then KIND(D(AS_NAME,EXP)) = DN_ATTRIBUTE )
	then

	    -- resolve the attribute
	    return RESOLVE_ATTRIBUTE(EXP);

	else
            QUIT("Resolve_Range: Not a range");
	end if;
    end RESOLVE_RANGE;


    function RESOLVE_DISCRETE_RANGE(EXP: TREE; TYPE_SPEC: TREE) return TREE is
    begin
	-- if it is a range or range attribute
	if KIND(EXP) = DN_RANGE
	or KIND(EXP) = DN_ATTRIBUTE
	or KIND(EXP) = DN_FUNCTION_CALL then

	    -- resolve the range
	    return RESOLVE_RANGE(EXP, TYPE_SPEC);

	-- else if it is a discrete_subtype (intermediate node)
	elsif KIND(EXP) = DN_DISCRETE_SUBTYPE then

	    -- resolve the subtype indication
	    declare
		SUBTYPE_INDICATION: TREE := D(AS_SUBTYPE_INDICATION, EXP);
		THE_SUBTYPE: TREE;
	    begin
		RESOLVE_SUBTYPE_INDICATION
				( SUBTYPE_INDICATION, THE_SUBTYPE );
	    end;
	    return EXP;

	-- else if it is subtype indication
	elsif KIND(EXP) = DN_SUBTYPE_INDICATION then

	    -- make discrete subtype node and resolve
	    return RESOLVE_DISCRETE_RANGE
		    ( MAKE_DISCRETE_SUBTYPE
			    ( LX_SRCPOS => D(LX_SRCPOS, EXP)
			    , AS_SUBTYPE_INDICATION => EXP )
		    , TYPE_SPEC );

	-- else -- since it must be a type mark
	else

	    -- make subtype indication and resolve
	    return RESOLVE_DISCRETE_RANGE
		    ( MAKE_SUBTYPE_INDICATION
			    ( LX_SRCPOS => D(LX_SRCPOS, EXP)
			    , AS_NAME => EXP
			    , AS_CONSTRAINT => CONST_VOID )
		    , TYPE_SPEC );

	end if;

    end RESOLVE_DISCRETE_RANGE;

    ------------------------------------------------------------------------

    function RESOLVE_TYPE_MARK(EXP: TREE) return TREE is
    begin
	if KIND(EXP) = DN_SUBTYPE_INDICATION then
	    return RESOLVE_TYPE_MARK(D(AS_NAME, EXP));
	    -- note error already given if non-void constraint
	end if;

	if KIND(EXP) = DN_SELECTED then
	    D(AS_DESIGNATOR, EXP, RESOLVE_TYPE_MARK(D(AS_DESIGNATOR,EXP)));
	    D(SM_EXP_TYPE, EXP, CONST_VOID);
	    return EXP;

	elsif KIND(EXP) = DN_USED_OBJECT_ID then
	    -- $$$$ sometimes still a def? why?
	    if KIND(D(SM_DEFN,EXP)) = DN_DEF then
		D(SM_DEFN, EXP, D(XD_SOURCE_NAME, D(SM_DEFN,EXP)));
	    end if;
	    return MAKE_USED_NAME_ID_FROM_OBJECT (EXP);


	else
	    return EXP;
	end if;
    end RESOLVE_TYPE_MARK;

    ------------------------------------------------------------------------

    procedure WALK_RANGE (BASE_TYPE: TREE; RANGE_NODE: TREE) is
	EXP1: TREE := D(AS_EXP1, RANGE_NODE);
	EXP2: TREE := D(AS_EXP2, RANGE_NODE);
	TYPESET_1, TYPESET_2: TYPESET_TYPE;
    begin
	EVAL_EXP_TYPES(EXP1, TYPESET_1);
	EVAL_EXP_TYPES(EXP2, TYPESET_2);
	REQUIRE_TYPE(BASE_TYPE, EXP1, TYPESET_1);
	REQUIRE_TYPE(BASE_TYPE, EXP2, TYPESET_2);
	EXP1 := RESOLVE_EXP(EXP1, TYPESET_1);
	D(AS_EXP1, RANGE_NODE, EXP1);
	EXP2 := RESOLVE_EXP(EXP2, TYPESET_2);
	D(AS_EXP2, RANGE_NODE, EXP2);
	D(SM_TYPE_SPEC, RANGE_NODE, BASE_TYPE);
    end WALK_RANGE;

    procedure RESOLVE_SUBTYPE_INDICATION
		( EXP: in out TREE; SUBTYPE_SPEC: out TREE)
    is
	NAME:		TREE;
	NAME_DEFN:	TREE;
	CONSTRAINT:	TREE;
	TYPE_STRUCT:	TREE;
	DESIG_STRUCT:	TREE;
	NEW_TYPE_SPEC:	TREE := CONST_VOID;
    begin
	if KIND(EXP) /= DN_SUBTYPE_INDICATION then
	    if KIND(EXP) = DN_FUNCTION_CALL then
                QUIT("subtype_ind is function call $$$$$$");
	    end if;

	    -- (must be a type mark)
	    EXP := MAKE_SUBTYPE_INDICATION
			( AS_NAME => EXP
			, AS_CONSTRAINT => CONST_VOID
			, LX_SRCPOS => D(LX_SRCPOS, EXP) );
	end if;

	NAME := D(AS_NAME, EXP);
	NAME := RESOLVE_TYPE_MARK(NAME);
	D(AS_NAME, EXP, NAME);
	NAME_DEFN := GET_NAME_DEFN(NAME);
	if NAME_DEFN /= CONST_VOID then
	    NEW_TYPE_SPEC := D(SM_TYPE_SPEC, NAME_DEFN);
	end if;
	TYPE_STRUCT := GET_BASE_STRUCT(NEW_TYPE_SPEC);
	if KIND(NEW_TYPE_SPEC) in CLASS_PRIVATE_SPEC
	--and then KIND(TYPE_STRUCT) not in CLASS_PRIVATE_SPEC then
	and then TYPE_STRUCT /= D(SM_TYPE_SPEC,D(XD_SOURCE_NAME,TYPE_STRUCT))
        then
	    NEW_TYPE_SPEC := D(SM_TYPE_SPEC, NEW_TYPE_SPEC);
	end if;
	DESIG_STRUCT := TYPE_STRUCT;
	if KIND(DESIG_STRUCT) = DN_ACCESS then
	    DESIG_STRUCT := GET_BASE_STRUCT(D(SM_DESIG_TYPE, DESIG_STRUCT));
	end if;

	CONSTRAINT := D(AS_CONSTRAINT, EXP);
	if KIND(CONSTRAINT) = DN_ATTRIBUTE
	or else (KIND(CONSTRAINT) = DN_FUNCTION_CALL
		 and then KIND(D(AS_NAME, CONSTRAINT)) = DN_ATTRIBUTE)
	then
	    declare
		TYPESET: TYPESET_TYPE;
		IS_TYPE: BOOLEAN;
	    begin
		EVAL_ATTRIBUTE(CONSTRAINT, TYPESET, IS_TYPE);
		CONSTRAINT := RESOLVE_ATTRIBUTE(CONSTRAINT);
		if IS_EMPTY(TYPESET) and not IS_TYPE then
		    CONSTRAINT := CONST_VOID;
		end if;
		D(AS_CONSTRAINT, EXP, CONSTRAINT);
	    end;
	end if;
	case KIND(CONSTRAINT) is
	when DN_VOID =>
	    null;
	when CLASS_RANGE =>
	    if KIND(TYPE_STRUCT) in CLASS_SCALAR then
		if KIND(CONSTRAINT) = DN_RANGE then
		    WALK_RANGE
			    ( GET_BASE_TYPE(TYPE_STRUCT)
			    , CONSTRAINT );
		end if;
		-- $$$$ is this right for a range attribute?
		if KIND(NEW_TYPE_SPEC) in CLASS_PRIVATE_SPEC then
		    NEW_TYPE_SPEC := D(SM_TYPE_SPEC, NEW_TYPE_SPEC);
		elsif KIND(NEW_TYPE_SPEC) = DN_INCOMPLETE then
		    NEW_TYPE_SPEC := D(XD_FULL_TYPE_SPEC, NEW_TYPE_SPEC);
		end if;
		D(SM_TYPE_SPEC, CONSTRAINT, NEW_TYPE_SPEC);

		NEW_TYPE_SPEC := COPY_NODE(TYPE_STRUCT);
		D(SM_RANGE, NEW_TYPE_SPEC, CONSTRAINT);
		D(SM_DERIVED, NEW_TYPE_SPEC, CONST_VOID);
	    else
                ERROR(D(LX_SRCPOS,CONSTRAINT), "Range constraint not allowed");
	    end if;
	when DN_FIXED_CONSTRAINT =>
	    if KIND(TYPE_STRUCT) = DN_FIXED then
		declare
		    RANGE_NODE: TREE := D(AS_RANGE, CONSTRAINT);
		    EXP: TREE := D(AS_EXP, CONSTRAINT);
		    TYPESET: TYPESET_TYPE;
		    ACCURACY: TREE;
		begin
		    D(SM_TYPE_SPEC, CONSTRAINT, GET_BASE_TYPE(NEW_TYPE_SPEC));
		    NEW_TYPE_SPEC := COPY_NODE(NEW_TYPE_SPEC);
		    D(SM_DERIVED, NEW_TYPE_SPEC, CONST_VOID);
		    EVAL_EXP_TYPES(EXP, TYPESET);
		    REQUIRE_REAL_TYPE(EXP, TYPESET);
		    REQUIRE_UNIQUE_TYPE(EXP, TYPESET);
		    EXP := RESOLVE_EXP(EXP, TYPESET);
		    D(AS_EXP, CONSTRAINT, EXP);
		    ACCURACY := GET_STATIC_VALUE(EXP);
		    if ACCURACY = CONST_VOID then
                        ERROR(D(LX_SRCPOS,EXP), "Static delta required");
		    else
			D(SM_ACCURACY, NEW_TYPE_SPEC, ACCURACY);
		    end if;

		    if D(AS_RANGE, CONSTRAINT) /= CONST_VOID then
			WALK_RANGE
				( GET_BASE_TYPE(TYPE_STRUCT)
				, RANGE_NODE );
			D(SM_RANGE, NEW_TYPE_SPEC, RANGE_NODE);
		    end if;
		end;
	    else
                ERROR(D(LX_SRCPOS,CONSTRAINT), "Fixed constraint not allowed");
	    end if;

	when DN_FLOAT_CONSTRAINT =>
	    if KIND(TYPE_STRUCT) = DN_FLOAT then
		declare
		    RANGE_NODE: TREE := D(AS_RANGE, CONSTRAINT);
		    EXP: TREE := D(AS_EXP, CONSTRAINT);
		    TYPESET: TYPESET_TYPE;
		    ACCURACY: TREE;
		begin
		    D(SM_TYPE_SPEC, CONSTRAINT, GET_BASE_TYPE(NEW_TYPE_SPEC));
		    NEW_TYPE_SPEC := COPY_NODE(NEW_TYPE_SPEC);
		    D(SM_DERIVED, NEW_TYPE_SPEC, CONST_VOID);
		    EVAL_EXP_TYPES(EXP, TYPESET);
		    REQUIRE_INTEGER_TYPE(EXP, TYPESET);
		    REQUIRE_UNIQUE_TYPE(EXP, TYPESET);
		    EXP := RESOLVE_EXP(EXP, TYPESET);
		    D(AS_EXP, CONSTRAINT, EXP);
		    ACCURACY := GET_STATIC_VALUE(EXP);
		    if ACCURACY = CONST_VOID then
                        ERROR(D(LX_SRCPOS,EXP), "Static digits required");
		    else
			D(SM_ACCURACY, NEW_TYPE_SPEC, ACCURACY);
		    end if;

		    if D(AS_RANGE, CONSTRAINT) /= CONST_VOID then
			WALK_RANGE
				( GET_BASE_TYPE(TYPE_STRUCT)
				, RANGE_NODE );
			D(SM_RANGE, NEW_TYPE_SPEC, RANGE_NODE);
		    end if;
		end;
	    else
                ERROR(D(LX_SRCPOS,CONSTRAINT), "Float constraint not allowed");
		--    D(SM_DERIVED, NEW_TYPE_SPEC, CONST_VOID);
	    end if;

	when DN_GENERAL_ASSOC_S =>

	    -- for a record or private type (must be discriminant constraint)
	    if KIND(DESIG_STRUCT) = DN_RECORD
	    or else KIND(DESIG_STRUCT) in CLASS_PRIVATE_SPEC
	    or else KIND(DESIG_STRUCT) = DN_INCOMPLETE then

		NEW_TYPE_SPEC := MAKE_CONSTRAINED_RECORD
			( SM_NORMALIZED_DSCRMT_S => WALK_DISCRMT_CONSTRAINT
				( DESIG_STRUCT, CONSTRAINT )
			, XD_SOURCE_NAME => D(XD_SOURCE_NAME, DESIG_STRUCT)
			, SM_BASE_TYPE => GET_BASE_STRUCT(DESIG_STRUCT) );

		CONSTRAINT := MAKE_DSCRMT_CONSTRAINT
			( LX_SRCPOS => D(LX_SRCPOS, CONSTRAINT)
			, AS_GENERAL_ASSOC_S => CONSTRAINT );
		D(AS_CONSTRAINT, EXP, CONSTRAINT);

	    -- for an array type (must be index constraint)
	    elsif KIND(DESIG_STRUCT) = DN_ARRAY then
		declare
		    DISCRETE_RANGE_LIST: SEQ_TYPE := LIST(CONSTRAINT);
		    DISCRETE_RANGE: TREE;
		    INDEX_LIST: SEQ_TYPE := LIST(D(SM_INDEX_S, DESIG_STRUCT));
		    INDEX: TREE;
		    TYPESET: TYPESET_TYPE;
		    NEW_RANGE_LIST: SEQ_TYPE := MAKE;
		    SCALAR_LIST: SEQ_TYPE := MAKE;
		begin
		    -- for each matching index
		    while not IS_EMPTY(INDEX_LIST)
		    and not IS_EMPTY(DISCRETE_RANGE_LIST) loop
			POP(INDEX_LIST, INDEX);
			POP(DISCRETE_RANGE_LIST, DISCRETE_RANGE);

			-- eval and resolve the discrete range
			EVAL_DISCRETE_RANGE(DISCRETE_RANGE, TYPESET);
			REQUIRE_TYPE
				( GET_BASE_TYPE(D(SM_TYPE_SPEC, INDEX))
				, DISCRETE_RANGE
				, TYPESET );
			DISCRETE_RANGE := RESOLVE_DISCRETE_RANGE
				( DISCRETE_RANGE, GET_THE_TYPE(TYPESET) );
			NEW_RANGE_LIST := APPEND
				( NEW_RANGE_LIST, DISCRETE_RANGE );

			-- construct subtype for this index and add to scalar_s
			SCALAR_LIST := APPEND
				( SCALAR_LIST
				, GET_SUBTYPE_OF_DISCRETE_RANGE
					( DISCRETE_RANGE ) );
		    end loop;

		    -- check for dimension mismatch
		    if not IS_EMPTY(INDEX_LIST) then
			ERROR(D(LX_SRCPOS,CONSTRAINT),
                                "Too few elements in index constraint");
		    elsif not IS_EMPTY(DISCRETE_RANGE_LIST) then
			ERROR(D(LX_SRCPOS,HEAD(DISCRETE_RANGE_LIST)),
                                "Too many elements in index constraint");
		    end if;

		    -- construct index constraint with resolved expressions
		    CONSTRAINT := MAKE_INDEX_CONSTRAINT
			    ( AS_DISCRETE_RANGE_S => MAKE_DISCRETE_RANGE_S
				    ( LIST => NEW_RANGE_LIST
				    , LX_SRCPOS => D(LX_SRCPOS, CONSTRAINT) )
			    , LX_SRCPOS => D(LX_SRCPOS, CONSTRAINT) );
		    D(AS_CONSTRAINT, EXP, CONSTRAINT);

		    -- make new constrained array subtype
		    NEW_TYPE_SPEC := MAKE_CONSTRAINED_ARRAY
			    ( SM_INDEX_SUBTYPE_S => MAKE_SCALAR_S
				    ( LIST => SCALAR_LIST )
			    , SM_BASE_TYPE => D(SM_BASE_TYPE, DESIG_STRUCT)
			    , XD_SOURCE_NAME
				    => D(XD_SOURCE_NAME, DESIG_STRUCT) );
		end;

	    else
		ERROR(D(LX_SRCPOS,CONSTRAINT)
                        , "Index or discriminant constraint not allowed");
	    end if;

	    -- if type mark was an access type
	    if KIND(TYPE_STRUCT) = DN_ACCESS then

		-- make constrained access subtype
		NEW_TYPE_SPEC := MAKE_CONSTRAINED_ACCESS
			    ( SM_DESIG_TYPE => NEW_TYPE_SPEC
			    , SM_BASE_TYPE => GET_BASE_STRUCT(TYPE_STRUCT)
			    , XD_SOURCE_NAME
					=> D(XD_SOURCE_NAME, TYPE_STRUCT) );
	    end if;

	when others =>
            ERROR(D(LX_SRCPOS,CONSTRAINT), "Not valid as a constraint");
	end case;

	SUBTYPE_SPEC := NEW_TYPE_SPEC;
    end RESOLVE_SUBTYPE_INDICATION;

    ------------------------------------------------------------------------

    function RESOLVE_EXP(EXP: TREE; TYPESET: TYPESET_TYPE) return TREE is
	TEMP_TYPESET: TYPESET_TYPE := TYPESET;
    begin
	REQUIRE_UNIQUE_TYPE(EXP, TEMP_TYPESET);
	return RESOLVE_EXP(EXP, GET_THE_TYPE(TEMP_TYPESET));
    end RESOLVE_EXP;

    ------------------------------------------------------------------------

    function RESOLVE_NAME(NAME: TREE; DEFN: TREE) return TREE is
    begin
	if KIND(NAME) = DN_SELECTED then
	    declare
		DESIGNATOR: TREE := D(AS_DESIGNATOR, NAME);
		PREFIX: TREE;
		PREFIX_DEFSET: DEFSET_TYPE;
		PREFIX_DEFINTERP: DEFINTERP_TYPE;
		PREFIX_TYPESET: TYPESET_TYPE;
		PREFIX_TYPEINTERP: TYPEINTERP_TYPE;
		PREFIX_TYPE: TREE;
		NEW_TYPESET: TYPESET_TYPE := EMPTY_TYPESET;
	    begin
		DESIGNATOR := RESOLVE_NAME(DESIGNATOR, DEFN);
		D(AS_DESIGNATOR, NAME, DESIGNATOR);
		if KIND(DESIGNATOR) = DN_USED_OBJECT_ID
		or else KIND(DESIGNATOR) = DN_USED_CHAR then
		    D(SM_EXP_TYPE, NAME, D(SM_EXP_TYPE, DESIGNATOR));
		else
		    D(SM_EXP_TYPE, NAME, CONST_VOID);
		end if;

		PREFIX := D(AS_NAME, NAME);

		-- if the prefix can be an expression
		-- (otherwise it is already resolved as a used name)
		if KIND(PREFIX) in CLASS_USED_OBJECT
		or else (KIND(PREFIX) = DN_SELECTED
			and then KIND(D(AS_DESIGNATOR,PREFIX))
				    in CLASS_USED_OBJECT)
		-- added 7/20/90 wbe
		or else (KIND(PREFIX) /= DN_SELECTED
			and then KIND(PREFIX) in CLASS_NAME_EXP)
		then

		    -- get the type of the prefix expression
		    if KIND(PREFIX) = DN_SELECTED
		    or else KIND(PREFIX) in CLASS_DESIGNATOR then
                        -- it's an id or selected id, look at names
			if DEFN /= CONST_VOID then
			    PREFIX_DEFSET := FETCH_DEFSET(PREFIX);
			else
			    -- 8/9/90 avoid crash for undefined designator
			    PREFIX_DEFSET := EMPTY_DEFSET;
			end if;
			PREFIX_TYPESET := EMPTY_TYPESET;
			while not IS_EMPTY(PREFIX_DEFSET) loop
			    POP(PREFIX_DEFSET, PREFIX_DEFINTERP);
			    PREFIX_TYPE := GET_BASE_TYPE
				    ( D(XD_SOURCE_NAME
				      , GET_DEF(PREFIX_DEFINTERP)) );
			    ADD_TO_TYPESET
				    ( PREFIX_TYPESET
				    , PREFIX_TYPE
				    , GET_EXTRAINFO(PREFIX_DEFINTERP) );
			end loop;
		    else
                        -- it's a complex expression, get saved typeset
			PREFIX_TYPESET := FETCH_TYPESET(PREFIX);
		    end if;

		    -- scan typeset to replace accesses with designated types
		    while not IS_EMPTY(PREFIX_TYPESET) loop
			POP(PREFIX_TYPESET, PREFIX_TYPEINTERP);
			PREFIX_TYPE := GET_BASE_STRUCT
				( GET_TYPE(PREFIX_TYPEINTERP) );
			if KIND(PREFIX_TYPE) = DN_ACCESS then
			    PREFIX_TYPE := GET_BASE_STRUCT
				     ( D(SM_DESIG_TYPE,PREFIX_TYPE) );
			end if;
			if DEFN /= CONST_VOID
			and then D(XD_REGION, DEFN)
				    = D(XD_SOURCE_NAME, PREFIX_TYPE)
			then
			    ADD_TO_TYPESET(NEW_TYPESET, PREFIX_TYPEINTERP);
			end if;
		    end loop;
		    if IS_EMPTY(NEW_TYPESET)
		    and then DEFN /= CONST_VOID then
			ERROR(D(LX_SRCPOS,NAME)
                                , "***** No defs for prefix of selected");
		    end if;
		    D(AS_NAME, NAME, RESOLVE_EXP
				( D(AS_NAME,NAME)
				, NEW_TYPESET ));
		end if;
		return NAME;
	    end;
	elsif KIND(NAME) in CLASS_DESIGNATOR then
	    D(SM_DEFN, NAME, DEFN);

	    if KIND(NAME) = DN_USED_OBJECT_ID then
		if KIND(DEFN) in CLASS_OBJECT_NAME then
		    D(SM_EXP_TYPE, NAME, D(SM_OBJ_TYPE, DEFN));
		    return NAME;
		else
		    return MAKE_USED_NAME_ID_FROM_OBJECT(NAME);
		end if;
	    else
		return NAME;
	    end if;

	else
	    return NAME;
	end if;
    end RESOLVE_NAME;

    ------------------------------------------------------------------------

    function WALK_ERRONEOUS_EXP(EXP: TREE) return TREE is
	DUMMY_TYPESET:	TYPESET_TYPE;
	DUMMY_IS_SUBTYPE: BOOLEAN;
    begin
	EVAL_EXP_SUBTYPE_TYPES(EXP, DUMMY_TYPESET, DUMMY_IS_SUBTYPE);
	return RESOLVE_EXP(EXP, CONST_VOID);
    end WALK_ERRONEOUS_EXP;

    ------------------------------------------------------------------------

    function WALK_DISCRMT_CONSTRAINT
		( RECORD_TYPE:		TREE
		; GENERAL_ASSOC_S:	TREE )
	    return TREE
    is
	ACTUAL_COUNT:	NATURAL := COUNT_AGGREGATE_CHOICES(GENERAL_ASSOC_S);
	AGGREGATE_ARRAY: AGGREGATE_ARRAY_TYPE(1 .. ACTUAL_COUNT);
	NORMALIZED_LIST: SEQ_TYPE := MAKE;
	LAST_POSITIONAL: NATURAL := 0;
    begin
	SPREAD_ASSOC_S (GENERAL_ASSOC_S, AGGREGATE_ARRAY);
	WALK_RECORD_DECL_S
		( GENERAL_ASSOC_S
		, D(SM_DISCRIMINANT_S, RECORD_TYPE)
		, AGGREGATE_ARRAY
		, NORMALIZED_LIST
		, LAST_POSITIONAL );
	RESOLVE_RECORD_ASSOC_S(GENERAL_ASSOC_S, AGGREGATE_ARRAY);
	return MAKE_EXP_S(LIST => NORMALIZED_LIST);
    end WALK_DISCRMT_CONSTRAINT;
end EXPRESO;
