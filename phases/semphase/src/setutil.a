with TEXT2_IO; use TEXT2_IO; -- for test
with DIANA, DIANATTR, DIANAMAN; use DIANA, DIANATTR, DIANAMAN;
with DEFUTIL; use DEFUTIL;
with SEMGLOB; use SEMGLOB;
with PRENAME; use PRENAME;
with VISUTIL; use VISUTIL; -- CAST_...

package body SETUTIL is

    DEBUG: BOOLEAN renames USERPK.DEBUG; -- conflict with pre_name

    function IS_MEMBER(ITEM_LIST: SEQ_TYPE; ITEM: TREE) return BOOLEAN;
    procedure REDUCE_UNIQUE
		( ITEM_LIST: in out SEQ_TYPE
		; IS_CONFLICT: out BOOLEAN );
    function COMBINE_EXTRAINFO(EXTRAINFO_1, EXTRAINFO_2: EXTRAINFO_TYPE)
	    return EXTRAINFO_TYPE;

    --======================================================================

    function GET_DEF(DEFINTERP: DEFINTERP_TYPE) return TREE is
	DEF:		TREE := TREE(DEFINTERP);
    begin
	if KIND(DEF) = DN_IMPLICIT_CONV
	or else KIND(DEF) = DN_NULLARY_CALL then
	    DEF := D(XD_ITEM, DEF);
	end if;
	return DEF;
    end GET_DEF;

    ------------------------------------------------------------------------

    function IS_NULLARY(DEFINTERP: DEFINTERP_TYPE) return BOOLEAN is
    begin
	return KIND(TREE(DEFINTERP)) = DN_NULLARY_CALL;

    end IS_NULLARY;

    ------------------------------------------------------------------------

    function GET_EXTRAINFO(DEFINTERP: DEFINTERP_TYPE) return EXTRAINFO_TYPE is
    begin
	if KIND(TREE(DEFINTERP)) = DN_IMPLICIT_CONV then
	    return EXTRAINFO_TYPE(LIST(TREE(DEFINTERP)));
	else
	    return NULL_EXTRAINFO;
	end if;
    end GET_EXTRAINFO;

    ------------------------------------------------------------------------

    function IS_EMPTY(DEFSET: DEFSET_TYPE) return BOOLEAN is
    begin
	return IS_EMPTY(SEQ_TYPE(DEFSET));
    end IS_EMPTY;

    ------------------------------------------------------------------------

    function HEAD(DEFSET: DEFSET_TYPE) return DEFINTERP_TYPE is
    begin
	return DEFINTERP_TYPE(HEAD(SEQ_TYPE(DEFSET)));
    end HEAD;

    ------------------------------------------------------------------------

    procedure POP(DEFSET: in out DEFSET_TYPE; DEFINTERP: out DEFINTERP_TYPE) is
	TREE_DEFINTERP: TREE;
    begin
	-- (Note.  Verdix does not accept conversion on out parameter)
	--POP(SEQ_TYPE(DEFSET), TREE(DEFINTERP));
	POP(SEQ_TYPE(DEFSET), TREE_DEFINTERP);
	DEFINTERP := DEFINTERP_TYPE(TREE_DEFINTERP);
    end POP;

    ------------------------------------------------------------------------

    function GET_TYPE(TYPEINTERP: TYPEINTERP_TYPE) return TREE is
	TYPE_SPEC:	TREE := TREE(TYPEINTERP);
    begin
	if KIND(TYPE_SPEC) = DN_IMPLICIT_CONV then
	    TYPE_SPEC := D(XD_ITEM, TYPE_SPEC);
	end if;
	return TYPE_SPEC;
    end GET_TYPE;

    ------------------------------------------------------------------------

    function GET_EXTRAINFO(TYPEINTERP: TYPEINTERP_TYPE) return EXTRAINFO_TYPE is
    begin
	if KIND(TREE(TYPEINTERP)) = DN_IMPLICIT_CONV then
	    return EXTRAINFO_TYPE(LIST(TREE(TYPEINTERP)));
	else
	    return NULL_EXTRAINFO;
	end if;
    end GET_EXTRAINFO;

    ------------------------------------------------------------------------

    function IS_EMPTY(TYPESET: TYPESET_TYPE) return BOOLEAN is
    begin
	return IS_EMPTY(SEQ_TYPE(TYPESET));
    end IS_EMPTY;

    ------------------------------------------------------------------------

    function HEAD(TYPESET: TYPESET_TYPE) return TYPEINTERP_TYPE is
    begin
	return TYPEINTERP_TYPE(HEAD(SEQ_TYPE(TYPESET)));
    end HEAD;

    ------------------------------------------------------------------------

    procedure POP ( TYPESET: in out TYPESET_TYPE
		  ; TYPEINTERP: out TYPEINTERP_TYPE)
    is
	TREE_TYPEINTERP: TREE;
    begin
	-- (Note.  Verdix does not accept conversion on out parameter)
	--POP(SEQ_TYPE(TYPESET), TREE(TYPEINTERP));
	POP(SEQ_TYPE(TYPESET), TREE_TYPEINTERP);
	TYPEINTERP := TYPEINTERP_TYPE(TREE_TYPEINTERP);
    end POP;

    ------------------------------------------------------------------------

    procedure ADD_TO_DEFSET ( DEFSET: in out DEFSET_TYPE
			    ; DEFINTERP: DEFINTERP_TYPE )
    is
	DEFLIST: SEQ_TYPE := SEQ_TYPE(DEFSET);
    begin
	DEFLIST := APPEND(DEFLIST, TREE(DEFINTERP));
	DEFSET := DEFSET_TYPE(DEFLIST);
    end ADD_TO_DEFSET;

    ------------------------------------------------------------------------

    procedure ADD_TO_DEFSET ( DEFSET: in out DEFSET_TYPE
			    ; DEF: TREE
			    ; EXTRAINFO: EXTRAINFO_TYPE := NULL_EXTRAINFO
			    ; IS_NULLARY: BOOLEAN := FALSE )
    is
	DEFLIST: SEQ_TYPE := SEQ_TYPE(DEFSET);
	DEFTREE: TREE;
    begin
	if not IS_EMPTY(SEQ_TYPE(EXTRAINFO)) then
	    DEFTREE := MAKE(DN_IMPLICIT_CONV);
	    D(XD_ITEM, DEFTREE, DEF);
	    LIST(DEFTREE, SEQ_TYPE(EXTRAINFO));
	elsif IS_NULLARY then
	    DEFTREE := MAKE(DN_NULLARY_CALL);
	    D(XD_ITEM, DEFTREE, DEF);
	else
	    DEFTREE := DEF;
	end if;
	DEFLIST := APPEND(DEFLIST, DEFTREE);
	DEFSET := DEFSET_TYPE(DEFLIST);
    end ADD_TO_DEFSET;

    ------------------------------------------------------------------------

    procedure ADD_TO_TYPESET ( TYPESET: in out TYPESET_TYPE
			     ; TYPEINTERP: TYPEINTERP_TYPE )
    is
    begin
	ADD_TO_TYPESET
		( TYPESET
		, GET_TYPE(TYPEINTERP)
		, GET_EXTRAINFO(TYPEINTERP) );
    end ADD_TO_TYPESET;

    ------------------------------------------------------------------------

    procedure ADD_TO_TYPESET ( TYPESET: in out TYPESET_TYPE
			     ; TYPE_SPEC: TREE
			     ; EXTRAINFO: EXTRAINFO_TYPE := NULL_EXTRAINFO )
    is

	function MAKE_TYPEINTERP(TYPE_SPEC: TREE; EXTRALIST: SEQ_TYPE)
		return TREE
	is
	    RESULT: TREE := TYPE_SPEC;
	begin
	    if not IS_EMPTY(EXTRALIST) then
		RESULT := MAKE(DN_IMPLICIT_CONV);
		D(XD_ITEM, RESULT, TYPE_SPEC);
		LIST(RESULT, EXTRALIST);
	    end if;
	    return RESULT;
	end MAKE_TYPEINTERP;

	function ADD_INFO(TYPETREE: TREE; EXTRALIST: SEQ_TYPE) return TREE is
	    -- There are two interpretations with same result type
	    -- Check for compatibility of implicit conversions

	    TYPE_SPEC:	constant TREE := GET_TYPE(TYPEINTERP_TYPE(TYPETREE));
	    OLD_EXTRALIST: SEQ_TYPE;
	    TEMP_LIST: SEQ_TYPE;
	    TEMP_ITEM: TREE;
	    NEW_LIST: SEQ_TYPE := MAKE;
	    IS_AMBIGUOUS: BOOLEAN := FALSE;
	begin
	    -- if no implicit conversions for new interpretation
	    if IS_EMPTY(EXTRALIST) then

		-- return interpretation with no conversions
		return TYPE_SPEC;
	    end if;

	    -- if no implicit conversions for old interpretation
	    OLD_EXTRALIST := SEQ_TYPE(GET_EXTRAINFO(TYPEINTERP_TYPE(TYPETREE)));
	    if IS_EMPTY(OLD_EXTRALIST) then

		-- return interpretation with no conversions
		return TYPE_SPEC;
	    end if;

	    -- both have conversions
	    -- get common conversions and test for conflict in old interp
	    -- (new_list := list of common conversions)
            -- (is_ambiguous := true if old interp has a conv that new doesn't)
	    TEMP_LIST := OLD_EXTRALIST;
	    while not IS_EMPTY(TEMP_LIST) loop
		POP(TEMP_LIST, TEMP_ITEM);
		if TEMP_ITEM = CONST_VOID then
		    IS_AMBIGUOUS := TRUE;
		elsif IS_MEMBER(EXTRALIST, TEMP_ITEM) then
		    NEW_LIST := APPEND(NEW_LIST, TEMP_ITEM);
		else
		    IS_AMBIGUOUS := TRUE;

	    -- if no conflict in old interpretation
		end if;
	    end loop;
	    if not IS_AMBIGUOUS then

		-- retain old interpretation
		return TYPETREE;
	    end if;

	    -- old interpretation had a conflict
	    -- for each conversion in new interpretation
	    TEMP_LIST := EXTRALIST;
	    while not IS_EMPTY(TEMP_LIST) loop
		POP(TEMP_LIST, TEMP_ITEM);

		-- if it is already known that there is a conflict
		-- or if conversion is not common to the old interpretation
		if TEMP_ITEM = CONST_VOID
		or else not IS_MEMBER(NEW_LIST, TEMP_ITEM) then

		    -- add void to new list to mark conflict and stop looking
		    NEW_LIST := INSERT(NEW_LIST, CONST_VOID);
		    exit;
		end if;
	    end loop;

	    -- return interpretation with new conversion list
	    return MAKE_TYPEINTERP(TYPE_SPEC, NEW_LIST);
	end ADD_INFO;

	function INSERT_TYPE ( TYPELIST: SEQ_TYPE
			     ; TYPE_SPEC: TREE
			     ; EXTRALIST: SEQ_TYPE )
		return SEQ_TYPE
	is
	    OLD_HEAD:	TREE;
	    OLD_TYPE:	TREE;
	    OLD_TAIL:	SEQ_TYPE;
	    NEW_HEAD:	TREE;
	    NEW_TAIL:	SEQ_TYPE;
	begin
	    if IS_EMPTY(TYPELIST) then
		return SINGLETON(MAKE_TYPEINTERP(TYPE_SPEC, EXTRALIST));
	    else
		OLD_HEAD := HEAD(TYPELIST);
		OLD_TYPE := GET_TYPE(TYPEINTERP_TYPE(OLD_HEAD));
		if OLD_TYPE = TYPE_SPEC then
		    NEW_HEAD := ADD_INFO(OLD_HEAD, EXTRALIST);
		    if NEW_HEAD = OLD_HEAD then
			return TYPELIST;
		    else
			return INSERT(TAIL(TYPELIST), NEW_HEAD);
		    end if;
		elsif OLD_TYPE.TPG > TYPE_SPEC.TPG
		or (OLD_TYPE.TPG = TYPE_SPEC.TPG
				and OLD_TYPE.TLN > TYPE_SPEC.TLN)
		then
		    OLD_TAIL := TAIL(TYPELIST);
		    NEW_TAIL := INSERT_TYPE ( OLD_TAIL
					    , TYPE_SPEC
					    , EXTRALIST );
		    if OLD_TAIL = NEW_TAIL then
			return TYPELIST;
		    else
			return INSERT(NEW_TAIL, OLD_HEAD);
		    end if;
		else
		    return INSERT ( TYPELIST
				  , MAKE_TYPEINTERP(TYPE_SPEC, EXTRALIST) );
		end if;
	    end if;
	end INSERT_TYPE;

    begin -- Add_To_Typeset
	TYPESET := TYPESET_TYPE(INSERT_TYPE
			( SEQ_TYPE(TYPESET)
			, TYPE_SPEC
			, SEQ_TYPE(EXTRAINFO) ));
    end ADD_TO_TYPESET;

    ------------------------------------------------------------------------

    procedure REQUIRE_UNIQUE_DEF(EXP: TREE; DEFSET: in out DEFSET_TYPE) is
	IS_CONFLICTING_CONVERSION:	BOOLEAN;
	SAVE_DEFSET:			constant DEFSET_TYPE := DEFSET;
    begin
	if IS_EMPTY(DEFSET) then
	    return;
	end if;

	REDUCE_UNIQUE(SEQ_TYPE(DEFSET), IS_CONFLICTING_CONVERSION);
	if IS_EMPTY(DEFSET) then
	    if not IS_CONFLICTING_CONVERSION then
                ERROR(D(LX_SRCPOS,EXP), "Ambiguous name - "
		       & PRINTNAME(D(LX_SYMREP,GET_THE_ID(SAVE_DEFSET))) );
	    else
                ERROR(D(LX_SRCPOS,EXP), "Implicit conversion conflict - "
		       & PRINTNAME(D(LX_SYMREP,GET_THE_ID(SAVE_DEFSET))) );
	    end if;
	end if;
    end REQUIRE_UNIQUE_DEF;

    ------------------------------------------------------------------------

    procedure REQUIRE_UNIQUE_TYPE(EXP: TREE; TYPESET: in out TYPESET_TYPE) is
	IS_CONFLICTING_CONVERSION:	BOOLEAN;
	TYPE_SPEC:			TREE;
    begin
	if IS_EMPTY(TYPESET) then
	    return;
	end if;

	REDUCE_UNIQUE(SEQ_TYPE(TYPESET), IS_CONFLICTING_CONVERSION);
	if IS_EMPTY(TYPESET) then
	    if not IS_CONFLICTING_CONVERSION then
                ERROR(D(LX_SRCPOS,EXP), "Ambiguous expression type");
	    else
		ERROR ( D(LX_SRCPOS,EXP)
                      , "Implicit conversion conflict" );
	    end if;

	else
	    TYPE_SPEC := GET_THE_TYPE(TYPESET);
	    if KIND(TYPE_SPEC) = DN_ANY_INTEGER then
		TYPESET := EMPTY_TYPESET;
		ADD_TO_TYPESET(TYPESET, MAKE(DN_UNIVERSAL_INTEGER));
	    elsif KIND(TYPE_SPEC) = DN_ANY_REAL then
		TYPESET := EMPTY_TYPESET;
		ADD_TO_TYPESET(TYPESET, MAKE(DN_UNIVERSAL_REAL));
	    end if;
	end if;
    end REQUIRE_UNIQUE_TYPE;

    ------------------------------------------------------------------------

    function GET_THE_ID(DEFSET: DEFSET_TYPE) return TREE is
    begin
        if IS_EMPTY(DEFSET) then
	    return CONST_VOID;
	else
	    return D(XD_SOURCE_NAME, GET_DEF(HEAD(DEFSET)));
	end if;
    end GET_THE_ID;

    ------------------------------------------------------------------------

    function THE_ID_IS_NULLARY(DEFSET: DEFSET_TYPE) return BOOLEAN is
    begin
	return KIND(HEAD(SEQ_TYPE(DEFSET))) = DN_NULLARY_CALL;
    end THE_ID_IS_NULLARY;

    ------------------------------------------------------------------------

    function GET_THE_TYPE(TYPESET: TYPESET_TYPE) return TREE is
    begin
        if IS_EMPTY(TYPESET) then
	    return CONST_VOID;
	else
	    return GET_TYPE(HEAD(TYPESET));
	end if;
    end GET_THE_TYPE;

    ------------------------------------------------------------------------

    procedure REDUCE_OPERATOR_DEFS(EXP: TREE; DEFSET: in out DEFSET_TYPE) is
	TEMP_DEFSET:	DEFSET_TYPE := DEFSET;
	DEFINTERP:	DEFINTERP_TYPE;
	DEF:		TREE;
	DEF_ID:		TREE;
	HEADER: 	TREE;
	IS_CONVERSION_REQUIRED: BOOLEAN;
	NEW_DEFSET: DEFSET_TYPE;

	function IS_UNIVERSAL_FIRST_PARAM(DEF: TREE) return BOOLEAN is
	    HEADER: TREE := D(XD_HEADER, DEF);
	    FIRST_PARAM: TREE := HEAD(LIST(D(AS_PARAM_S, HEADER)));
	    FIRST_PARAM_ID: TREE := HEAD(LIST(D(AS_SOURCE_NAME_S,FIRST_PARAM)));
	    PARAM_TYPE_KIND: NODE_NAME := KIND(D(SM_OBJ_TYPE,FIRST_PARAM_ID));
	begin
	    return PARAM_TYPE_KIND = DN_UNIVERSAL_INTEGER
			or PARAM_TYPE_KIND = DN_UNIVERSAL_REAL;
	end IS_UNIVERSAL_FIRST_PARAM;

    begin -- Reduce_Operator_Defs
	-- first, see if this is a relational operator with univ parameters
	-- for each interpretation
	while not IS_EMPTY(TEMP_DEFSET) loop
	    POP(TEMP_DEFSET, DEFINTERP);

	    -- if it is a builtin operator
	    DEF := GET_DEF(DEFINTERP);
	    DEF_ID := D(XD_SOURCE_NAME, DEF);
	    if KIND(DEF_ID) = DN_BLTN_OPERATOR_ID then

		-- if it is not a relational operator
                if OP_CLASS'VAL(DI(SM_OPERATOR,DEF_ID))
				not in CLASS_EQ_RELATIONAL_OP
		then

		    -- no reduction to be done -- return
		    return;

		-- else if this interpretation has universal parameters
		elsif IS_UNIVERSAL_FIRST_PARAM(DEF) then

		    -- remember if conversions required for parameters
		    IS_CONVERSION_REQUIRED
			    := KIND(TREE(DEFINTERP)) = DN_IMPLICIT_CONV;

		    -- set up to scan entire defset again and stop searching
		    TEMP_DEFSET := DEFSET;
		    exit;
		end if;

	    -- else if it is not an operator (builtin or otherwise)
	    elsif KIND(DEF_ID) /= DN_OPERATOR_ID then

		-- no reduction to be made -- just return
		return;
	    end if;
	end loop;

	if DEBUG then
	    PUT("in Reduce_Operator_Defs - ");PUT_LINE(NODE_REP(EXP));

	-- if no interpretation as relational with universal parameters
	end if;
	if IS_EMPTY(TEMP_DEFSET) then

	    -- nothing to reduce; no interpretations without conversions
	    -- return with defset unchanged
	    return;
	end if;

	-- there is an interpretation as relational with universal parameters
	-- is_conversion_required is true if that interpretation has conversions
	-- for each interpretation
	NEW_DEFSET := EMPTY_DEFSET;
	while not IS_EMPTY(TEMP_DEFSET) loop
	    POP(TEMP_DEFSET, DEFINTERP);

	    DEF := GET_DEF(DEFINTERP);
	    HEADER := D(XD_HEADER, DEF);
	    if DEBUG then
		PUT("... ");PUT(NODE_REP(DEF));
		PUT(" ");PUT_LINE(NODE_REP(HEADER));
	    end if;
	    if GET_BASE_TYPE(D(AS_NAME, HEADER)) = PREDEFINED_BOOLEAN then
		if IS_UNIVERSAL_FIRST_PARAM(DEF) then
		    if DEBUG then
			PUT_LINE("... - universal");
		    end if;
		    ADD_TO_DEFSET(NEW_DEFSET, DEFINTERP);
		elsif IS_CONVERSION_REQUIRED then
		    if DEBUG then
			PUT_LINE("... - boolean; conversion required");
		    end if;
		    ADD_TO_DEFSET
			    ( NEW_DEFSET
			    , DEF
			    , EXTRAINFO_TYPE(INSERT
				    ( SEQ_TYPE(GET_EXTRAINFO(DEFINTERP))
				    , EXP ) ));
		end if;
	    else
		if DEBUG then
		    PUT_LINE("... - non_boolean");
		end if;
		ADD_TO_DEFSET
			( NEW_DEFSET
			, DEF
			, EXTRAINFO_TYPE(INSERT
				( SEQ_TYPE(GET_EXTRAINFO(DEFINTERP))
				, EXP ) ));
	    end if;
	end loop;
	DEFSET := NEW_DEFSET;
    end REDUCE_OPERATOR_DEFS;

    ------------------------------------------------------------------------

    procedure ADD_EXTRAINFO
		( DEFINTERP:	in out DEFINTERP_TYPE
		; EXTRAINFO:	EXTRAINFO_TYPE )
    is
	NEW_EXTRAINFO: EXTRAINFO_TYPE
		:= COMBINE_EXTRAINFO(GET_EXTRAINFO(DEFINTERP), EXTRAINFO);
	NEW_DEFINTERP: TREE;
    begin
	if IS_EMPTY(SEQ_TYPE(NEW_EXTRAINFO)) then
	    null;
	else
	    NEW_DEFINTERP := MAKE(DN_IMPLICIT_CONV);
	    D(XD_ITEM, NEW_DEFINTERP, GET_DEF(DEFINTERP));
	    LIST(NEW_DEFINTERP, SEQ_TYPE(NEW_EXTRAINFO));
	    DEFINTERP := DEFINTERP_TYPE(NEW_DEFINTERP);
	end if;
    end ADD_EXTRAINFO;

    ------------------------------------------------------------------------

    procedure ADD_EXTRAINFO
		( DEFINTERP:	in out DEFINTERP_TYPE
		; EXTRAINFO_OF: TYPEINTERP_TYPE )
    is
    begin
	ADD_EXTRAINFO(DEFINTERP, GET_EXTRAINFO(EXTRAINFO_OF));
    end ADD_EXTRAINFO;

    ------------------------------------------------------------------------

    procedure ADD_EXTRAINFO
		( TYPEINTERP:	in out TYPEINTERP_TYPE
		; EXTRAINFO:	EXTRAINFO_TYPE )
    is
	NEW_EXTRAINFO: EXTRAINFO_TYPE
		:= COMBINE_EXTRAINFO(GET_EXTRAINFO(TYPEINTERP), EXTRAINFO);
	NEW_TYPEINTERP: TREE;
    begin
	if IS_EMPTY(SEQ_TYPE(NEW_EXTRAINFO)) then
	    null;
	else
	    NEW_TYPEINTERP := MAKE(DN_IMPLICIT_CONV);
	    D(XD_ITEM, NEW_TYPEINTERP, GET_TYPE(TYPEINTERP));
	    LIST(NEW_TYPEINTERP, SEQ_TYPE(NEW_EXTRAINFO));
	    TYPEINTERP := TYPEINTERP_TYPE(NEW_TYPEINTERP);
	end if;
    end ADD_EXTRAINFO;

    ------------------------------------------------------------------------

    procedure ADD_EXTRAINFO
		( TYPEINTERP:	in out TYPEINTERP_TYPE
		; EXTRAINFO_OF: TYPEINTERP_TYPE )
    is
    begin
	ADD_EXTRAINFO(TYPEINTERP, GET_EXTRAINFO(EXTRAINFO_OF));
    end ADD_EXTRAINFO;

    ------------------------------------------------------------------------

    procedure ADD_EXTRAINFO
		( EXTRAINFO:	in out EXTRAINFO_TYPE
		; EXTRAINFO_IN:	EXTRAINFO_TYPE )
    is
    begin
	EXTRAINFO := COMBINE_EXTRAINFO(EXTRAINFO, EXTRAINFO_IN);
    end ADD_EXTRAINFO;

    --======================================================================

    function IS_MEMBER(ITEM_LIST: SEQ_TYPE; ITEM: TREE) return BOOLEAN is
	TEMP_LIST: SEQ_TYPE := ITEM_LIST;
    begin
	while not IS_EMPTY(TEMP_LIST) loop
	    if HEAD(TEMP_LIST) = ITEM then
		return TRUE;
	    end if;
	    TEMP_LIST := TAIL(TEMP_LIST);
	end loop;
	return FALSE;
    end IS_MEMBER;

    function INSERT(DEFSET: DEFSET_TYPE; DEFINTERP: DEFINTERP_TYPE)
	    return DEFSET_TYPE
    is
    begin
	return DEFSET_TYPE(INSERT(SEQ_TYPE(DEFSET), TREE(DEFINTERP)));
    end INSERT;

    function INSERT(TYPESET: TYPESET_TYPE; TYPEINTERP: TYPEINTERP_TYPE)
	    return TYPESET_TYPE is
    begin
	return TYPESET_TYPE(INSERT(SEQ_TYPE(TYPESET), TREE(TYPEINTERP)));
    end INSERT;

    procedure STASH_DEFSET(EXP: TREE; DEFSET: DEFSET_TYPE) is
    begin
	if KIND(EXP) = DN_SELECTED then
	    STASH_DEFSET(D(AS_DESIGNATOR,EXP), DEFSET);
	else
	    D(SM_DEFN, EXP, CAST_TREE(SEQ_TYPE(DEFSET)));
	end if;
    end STASH_DEFSET;
	   	
    function FETCH_DEFSET(EXP: TREE) return DEFSET_TYPE is
    begin
	if KIND(EXP) = DN_SELECTED then
	    return FETCH_DEFSET(D(AS_DESIGNATOR,EXP));
	else
	    return DEFSET_TYPE(CAST_SEQ_TYPE(D(SM_DEFN, EXP)));
	end if;
    end FETCH_DEFSET;

    procedure STASH_TYPESET(EXP: TREE; TYPESET: TYPESET_TYPE) is
    begin
	D(SM_EXP_TYPE, EXP, CAST_TREE(SEQ_TYPE(TYPESET)));
    end STASH_TYPESET;

    function FETCH_TYPESET(EXP: TREE) return TYPESET_TYPE is
    begin
	return TYPESET_TYPE(CAST_SEQ_TYPE(D(SM_EXP_TYPE, EXP)));
    end FETCH_TYPESET;

    ------------------------------------------------------------------------

    procedure REDUCE_UNIQUE
		( ITEM_LIST: in out SEQ_TYPE
		; IS_CONFLICT: out BOOLEAN)
    is
	TEMP_LIST: SEQ_TYPE := ITEM_LIST;
	TEMP_ITEM: TREE;
	TEMP_TYPE: TREE; -- may be def too
	RESULT_SEEN_WITHOUT_CONVERSION: BOOLEAN := FALSE;
	RESULT_SEEN_WITHOUT_CONFLICT: BOOLEAN := FALSE;
	RESULT_SEEN_WITH_CONFLICT: BOOLEAN := FALSE;

	function IS_CONFLICTING_CONVERSION(ITEM: TREE) return BOOLEAN is
	    CONV_LIST: SEQ_TYPE;
	    CONV_ITEM: TREE;
	    TEMP_LIST: SEQ_TYPE;
	    TEMP_ITEM: TREE;
	begin
	    if KIND(ITEM) /= DN_IMPLICIT_CONV then
		RESULT_SEEN_WITHOUT_CONVERSION := TRUE;
		return FALSE;
	    end if;

	    -- fast return if item without conversion already seen
	    if RESULT_SEEN_WITHOUT_CONVERSION then
		return TRUE;
	    end if;

	    CONV_LIST := LIST(ITEM);
	    if HEAD(CONV_LIST) = CONST_VOID then
		return TRUE;
	    end if;

	    while not IS_EMPTY(CONV_LIST) loop
		POP(CONV_LIST, CONV_ITEM);

		TEMP_LIST := ITEM_LIST;
		while not IS_EMPTY(TEMP_LIST) loop
		    POP(TEMP_LIST, TEMP_ITEM);
		    if TEMP_ITEM = ITEM then
			null;
		    elsif KIND(TEMP_ITEM) /= DN_IMPLICIT_CONV then
			RESULT_SEEN_WITHOUT_CONVERSION := TRUE;
			return TRUE;
		    elsif not IS_MEMBER(LIST(TEMP_ITEM), CONV_ITEM) then
			return TRUE;
		    end if;
		end loop;
	    end loop;
	    return FALSE;
	end IS_CONFLICTING_CONVERSION;

    begin -- Reduce_Unique
	IS_CONFLICT := FALSE;

	if IS_EMPTY(ITEM_LIST) then
	    return;
	end if;

	TEMP_LIST := ITEM_LIST;
	while not IS_EMPTY(TEMP_LIST) loop
	    POP(TEMP_LIST, TEMP_ITEM);
	    if KIND(TEMP_ITEM) = DN_IMPLICIT_CONV then
		TEMP_TYPE := D(XD_ITEM, TEMP_ITEM);
	    else
		TEMP_TYPE:= TEMP_ITEM;
	    end if;

	    -- if there is an interpretation as a universal integer or real
	    if KIND(TEMP_TYPE) = DN_UNIVERSAL_INTEGER
	    or KIND(TEMP_TYPE) = DN_UNIVERSAL_REAL then

		-- this is only possible interpretation
		-- if this interpretation requires a conversion not required
		-- ... by some other interpretation
		if IS_CONFLICTING_CONVERSION(TEMP_ITEM) then

		    -- all interpretations conflict, since others require
		    -- ... conversion of the universal type
		    ITEM_LIST := MAKE;
		    IS_CONFLICT := TRUE;

		-- else -- since this interpretation has no conflicts
		else

		    -- this interpretation is the correct one
		    if KIND(TEMP_ITEM) = DN_IMPLICIT_CONV then
			ITEM_LIST := SINGLETON(D(XD_ITEM,TEMP_ITEM));
		    else
			ITEM_LIST := SINGLETON(TEMP_ITEM);
		    end if;
		    IS_CONFLICT := FALSE;
		end if;

		-- return
		return;
	    end if;
		    
	
	    if IS_CONFLICTING_CONVERSION(TEMP_ITEM) then
		RESULT_SEEN_WITH_CONFLICT := TRUE;
	    else
		if RESULT_SEEN_WITHOUT_CONFLICT then
		    ITEM_LIST := MAKE;
		else
		    ITEM_LIST := SINGLETON(TEMP_TYPE);
		    RESULT_SEEN_WITHOUT_CONFLICT := TRUE;
		end if;
	    end if;
	end loop;

	if RESULT_SEEN_WITHOUT_CONFLICT then
	    return;
	else
	    ITEM_LIST := MAKE;
	    IS_CONFLICT := RESULT_SEEN_WITH_CONFLICT;
	end if;
    end REDUCE_UNIQUE;

    function COMBINE_EXTRAINFO(EXTRAINFO_1, EXTRAINFO_2: EXTRAINFO_TYPE)
	    return EXTRAINFO_TYPE
    is
	-- given two extrainfo lists, return extrainfo list with conversions
	-- required by both lists
    begin
	if IS_EMPTY(SEQ_TYPE(EXTRAINFO_1)) then
	    return EXTRAINFO_2;
	end if;

	if IS_EMPTY(SEQ_TYPE(EXTRAINFO_2)) then
	    return EXTRAINFO_1;
	end if;

	declare
	    LIST_1:	SEQ_TYPE := SEQ_TYPE(EXTRAINFO_1);
	    LIST_2:	SEQ_TYPE := SEQ_TYPE(EXTRAINFO_2);
	    RESULT:	SEQ_TYPE := MAKE;
	begin
	    if HEAD(LIST_2) = CONST_VOID then
		LIST_2 := TAIL(LIST_2);
		if HEAD(LIST_1) /= CONST_VOID then
		    RESULT := SINGLETON(CONST_VOID);
		end if;
		if IS_EMPTY(LIST_2) then
		    return EXTRAINFO_TYPE(APPEND(RESULT,LIST_1.H));
		end if;
	    end if;

	    while not IS_EMPTY(LIST_1) loop
		RESULT := APPEND(RESULT,HEAD(LIST_1));
		LIST_1 := TAIL(LIST_1);
	    end loop;
	    return EXTRAINFO_TYPE(APPEND(RESULT, LIST_2.H));
	end;
    end COMBINE_EXTRAINFO;

end SETUTIL;
