with TEXT2_IO; use TEXT2_IO; -- for debug
with DIANA, DIANAMAN, DIANATTR; use DIANA, DIANATTR, DIANAMAN;
with DEFUTIL; use DEFUTIL;
with VISUTIL; use VISUTIL;
with SETUTIL; use SETUTIL;
with REQUTIL; use REQUTIL;
with EXPTYPE, EXPRESO; use EXPTYPE, EXPRESO;
with SEMGLOB; use SEMGLOB;
with NODWALK; use NODWALK;
with MAKENOD; use MAKENOD;
with REDSUBP; use REDSUBP;
with DEFWALK; use DEFWALK;

package body STMWALK is

    -- count used to generate unique names for blocks and loops without names
    GEN_BLOCK_LOOP_COUNT: NATURAL := 0;

    ------------------------------------------------------------------------
    --		Declare_Label_Block_Loop_Ids				  --
    ------------------------------------------------------------------------

    procedure DECLARE_ONE_LABEL_BLOCK_LOOP_ID
		( SOURCE_NAME:	TREE
		; STM:		TREE
		; H:		H_TYPE );


    procedure CHECK_DUMMY_BLOCK_LOOP_NAME(ID: TREE; PREFIX_TEXT: STRING);
    function TRIM(A: STRING) return STRING;

    procedure DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S: TREE; H: H_TYPE) is
        -- For a sequence of statements, scan for label_id's and
        -- ... block_loop_id's and create def nodes for them. (Label_is's
        -- ... and block_loop_id's are implicitly declared at the end
	-- ... of the declarative part of a block or unit)

	STM_LIST:	SEQ_TYPE := LIST(STM_S);
	STM:		TREE;
    begin

	-- for each statement in the stm_s
	while not IS_EMPTY(STM_LIST) loop
	    POP(STM_LIST, STM);

	    -- if this statement has labels
	    if KIND(STM) = DN_LABELED then
		declare
		    SOURCE_NAME_S: constant TREE := D(AS_SOURCE_NAME_S, STM);
		    STM_NODE: constant TREE := D(AS_STM, STM);

		    SOURCE_NAME_LIST: SEQ_TYPE := LIST(SOURCE_NAME_S);
		    SOURCE_NAME: TREE;
		begin
		    -- for each label on this statement
		    while not IS_EMPTY(SOURCE_NAME_LIST) loop
			POP(SOURCE_NAME_LIST, SOURCE_NAME);

			-- define the label
			DECLARE_ONE_LABEL_BLOCK_LOOP_ID
					(SOURCE_NAME, STM_NODE, H);
		    end loop;

		    -- strip labels from the statement
		    STM := STM_NODE;
		end;
	    end if;

	    -- Stm now has labels stripped off
	    -- Define block and loop names
	    --	 and scan subordinate statements for labels and names

	    case KIND(STM) is

	    -- for a case statement
	    when DN_CASE =>
		declare
		    ALTERNATIVE_S: constant TREE := D(AS_ALTERNATIVE_S, STM);

		    ALTERNATIVE_LIST: SEQ_TYPE := LIST(ALTERNATIVE_S);
		    ALTERNATIVE: TREE;
		begin

		    -- for each alternative
		    while not IS_EMPTY(ALTERNATIVE_LIST) loop
			POP(ALTERNATIVE_LIST, ALTERNATIVE);

			-- if it is an alternative (rather than a pragma)
			if KIND(ALTERNATIVE) = DN_ALTERNATIVE then

			    -- scan for labels in the sequence of statements
			    DECLARE_LABEL_BLOCK_LOOP_IDS
					( D(AS_STM_S, ALTERNATIVE), H);
			end if;
		    end loop;
		end;

	    -- for an accept statement
	    when DN_ACCEPT =>
		declare
		    STM_S: constant TREE := D(AS_STM_S, STM);
		begin
		    -- scan for labels in the sequence of statements
		    DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S, H);
		end;

	    -- for a loop statement
	    when DN_LOOP =>
		declare
		    SOURCE_NAME: constant TREE := D(AS_SOURCE_NAME, STM);
		    SOURCE_DEF: TREE;
		    STM_S: constant TREE := D(AS_STM_S, STM);
		begin
		    -- make sure there is a name
                    CHECK_DUMMY_BLOCK_LOOP_NAME(SOURCE_NAME, "Loop__");

		    -- define the label
		    DECLARE_ONE_LABEL_BLOCK_LOOP_ID(SOURCE_NAME, STM, H);
		    SOURCE_DEF := GET_DEF_FOR_ID(SOURCE_NAME);

		    -- scan for labels in the sequence of statements
		    DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S, H);
		end;

	    -- for a block statement
	    when DN_BLOCK =>
		declare
		    SOURCE_NAME: constant TREE := D(AS_SOURCE_NAME, STM);
		    BLOCK_BODY: constant TREE := D(AS_BLOCK_BODY, STM);
		begin
		    -- make sure there is a name
                    CHECK_DUMMY_BLOCK_LOOP_NAME(SOURCE_NAME, "Block__");

		    -- define the label
		    DECLARE_ONE_LABEL_BLOCK_LOOP_ID(SOURCE_NAME, STM, H);
		end;

	    -- for a conditional entry call or timed entry call
	    when DN_COND_ENTRY | DN_TIMED_ENTRY =>
		declare
		    STM_S1: constant TREE := D(AS_STM_S1, STM);
		    STM_S2: constant TREE := D(AS_STM_S2, STM);
		begin
		    -- scan for labels in both sequences of statements
		    DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S1, H);
		    DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S2, H);
		end;

	    -- for an if statement or a selective wait statement
	    when DN_IF | DN_SELECTIVE_WAIT =>
		declare
		    TEST_CLAUSE_ELEM_S: constant TREE
				    := D(AS_TEST_CLAUSE_ELEM_S, STM);
		    STM_S: constant TREE := D(AS_STM_S, STM);

		    TEST_CLAUSE_ELEM_LIST: SEQ_TYPE := LIST(TEST_CLAUSE_ELEM_S);
		    TEST_CLAUSE_ELEM: TREE;
		begin

		    -- for each test_clause_elem
		    while not IS_EMPTY(TEST_CLAUSE_ELEM_LIST) loop
			POP(TEST_CLAUSE_ELEM_LIST, TEST_CLAUSE_ELEM);

			-- if it is a test_clause (rather than a pragma)
			if KIND(TEST_CLAUSE_ELEM) in CLASS_TEST_CLAUSE then

			    -- scan for labels in the sequence of statements
			    DECLARE_LABEL_BLOCK_LOOP_IDS
					( D(AS_STM_S, TEST_CLAUSE_ELEM), H);
			end if;
		    end loop;

		    -- scan for labels in the if/wait sequence of statements
		    DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S, H);
		end;

	    when others =>
		null;
	    end case;
	end loop;
    end DECLARE_LABEL_BLOCK_LOOP_IDS;


    procedure DECLARE_ONE_LABEL_BLOCK_LOOP_ID
		( SOURCE_NAME:	TREE
		; STM:		TREE
		; H:		H_TYPE )
    is
	-- (called only by declare_label_block_loop_ids)
	-- creates def node for the source name and sets its sm_stm
	-- ... attribute to the statement referred to

	SOURCE_DEF: TREE := MAKE_DEF_FOR_ID(SOURCE_NAME, H);
    begin
	MAKE_DEF_VISIBLE(SOURCE_DEF);
	D(SM_STM, SOURCE_NAME, STM);
    end DECLARE_ONE_LABEL_BLOCK_LOOP_ID;

    procedure CHECK_DUMMY_BLOCK_LOOP_NAME(ID: TREE; PREFIX_TEXT: STRING) is
    begin
	if D(LX_SYMREP, ID) = CONST_VOID then
	    GEN_BLOCK_LOOP_COUNT := GEN_BLOCK_LOOP_COUNT + 1;
	    D(LX_SYMREP, ID,
		     STORESYM( PREFIX_TEXT
                               & TRIM(INTEGER'IMAGE(GEN_BLOCK_LOOP_COUNT)) ) );
	end if;
    end CHECK_DUMMY_BLOCK_LOOP_NAME;

    function TRIM(A: STRING) return STRING is
        FIRST: NATURAL := A'FIRST;
        LAST: NATURAL := A'LAST;
    begin
        while LAST > 0 and then (A(LAST) = ' ' or A(LAST) = ASCII.HT) loop
	    LAST := LAST - 1;
	end loop;
	if LAST >= FIRST then
            while A(FIRST) = ' ' or A(FIRST) = ASCII.HT loop
		FIRST := FIRST + 1;
	    end loop;
	end if;
	declare
	    RESULT: STRING(1 .. LAST - FIRST + 1) := A(FIRST .. LAST);
	begin
	    return RESULT;
	end;
    end TRIM;

    ------------------------------------------------------------------------
    --		Walk_Stm_S						  --
    ------------------------------------------------------------------------

    procedure WALK_STM_S(STM_S: TREE; H: H_TYPE) is
	STM_LIST: SEQ_TYPE := LIST(STM_S);
	STM: TREE;

	NEW_STM_LIST: SEQ_TYPE := MAKE;
    begin
	-- for each stm in the sequence of statements
	while not IS_EMPTY(STM_LIST) loop
	    POP(STM_LIST, STM);

	    -- walk the statement and add to new statement list
	    NEW_STM_LIST := APPEND(NEW_STM_LIST, WALK_STM(STM, H));
	end loop;

	-- replace statement list with new statement list
	LIST(STM_S, NEW_STM_LIST);
    end WALK_STM_S;

    ------------------------------------------------------------------------
    --		Walk_Alternative_S					  --
    ------------------------------------------------------------------------

    procedure WALK_ALTERNATIVE_S(ALTERNATIVE_S: TREE; H: H_TYPE) is
	ALTERNATIVE_LIST: SEQ_TYPE;
	ALTERNATIVE_ELEM: TREE;

	CHOICE_S: TREE;
	CHOICE_LIST: SEQ_TYPE;
	CHOICE: TREE;
	CHOICE_EXP: TREE;
	STM_S: TREE;
    begin
	-- if there is no exception part
	if ALTERNATIVE_S = CONST_VOID then

	    -- do nothing and return
	    return;
	end if;

	-- for each element of the alternative list
	ALTERNATIVE_LIST := LIST(ALTERNATIVE_S);
	while not IS_EMPTY(ALTERNATIVE_LIST) loop
	    POP(ALTERNATIVE_LIST, ALTERNATIVE_ELEM);

	    -- if it is an alternative
	    if KIND(ALTERNATIVE_ELEM) = DN_ALTERNATIVE then

		-- for each choice
		CHOICE_S := D(AS_CHOICE_S, ALTERNATIVE_ELEM);
		CHOICE_LIST := LIST(CHOICE_S);
		while not IS_EMPTY(CHOICE_LIST) loop
		    POP(CHOICE_LIST, CHOICE);

		    -- if it is an others choice
		    if KIND(CHOICE) = DN_CHOICE_OTHERS then

			-- nothing to do
			null;

		    -- else if it is an expression choice
		    elsif KIND(CHOICE) = DN_CHOICE_EXP then

			-- resolve exception name
			CHOICE_EXP := D(AS_EXP, CHOICE);
			CHOICE_EXP := WALK_NAME(DN_EXCEPTION_ID, CHOICE_EXP);
			D(AS_EXP, CHOICE, CHOICE_EXP);

		    -- else
		    else

			-- it cannot be a valid choice
                        ERROR(D(LX_SRCPOS,CHOICE), "Invalid choice");
		    end if;

		-- walk the statement sequence
		end loop;
		STM_S := D(AS_STM_S, ALTERNATIVE_ELEM);
		WALK_STM_S(STM_S, H);

	    -- else -- since it must be a pragma
	    else

		-- walk the pragma
		WALK(D(AS_PRAGMA, ALTERNATIVE_ELEM), H);

	    end if;
	end loop;

    end WALK_ALTERNATIVE_S;

    ------------------------------------------------------------------------
    --		Walk_Stm						  --
    ------------------------------------------------------------------------

    function WALK_STM (STM_IN: TREE; H: H_TYPE) return TREE is
	STM: TREE := STM_IN;
	STM_KIND: NODE_NAME := KIND(STM);
    begin

        PUT("Wstm "); PUT(NODE_REP(STM)); NEW_LINE;
	if STM_KIND not in CLASS_STM_ELEM then
            QUIT("Walk_Stm: Not a stm_elem node");
	end if;


        case CLASS_STM_ELEM'(STM_KIND) is

	-- for terminate or null statement
	when  DN_TERMINATE | DN_NULL_STM =>

	    -- nothing needs to be done
	    null;


	-- for a labeled statement
	when DN_LABELED =>
	    declare
		--SOURCE_NAME_S: constant TREE := D(AS_SOURCE_NAME_S, stm);
		PRAGMA_S: constant TREE := D(AS_PRAGMA_S, STM);
		STM_NODE: TREE := D(AS_STM, STM);
	    begin
		-- $$$$ need to check for duplicate def in unit
		--WALK(SOURCE_NAME_S, H);

		-- walk pragmas between the labels and the statement
		WALK_ITEM_S(PRAGMA_S, H);

		-- walk the statement
		STM_NODE := WALK_STM(STM_NODE, H);
		D(AS_STM, STM, STM_NODE);
	    end;


	-- for an abort statement
	when DN_ABORT =>
	    declare
		NAME_S: constant TREE := D(AS_NAME_S, STM);

		NAME_LIST: SEQ_TYPE := LIST(NAME_S);
		NAME: TREE;
		TYPESET: TYPESET_TYPE;
		NEW_NAME_LIST: SEQ_TYPE := MAKE;
	    begin
		-- for each name in the sequence of names
		while not IS_EMPTY(NAME_LIST) loop
		    POP(NAME_LIST, NAME);

		    -- process the name
		    EVAL_EXP_TYPES(NAME, TYPESET);
		    REQUIRE_TASK_TYPE(NAME, TYPESET);
		    REQUIRE_UNIQUE_TYPE(NAME, TYPESET);
		    NAME := RESOLVE_EXP(NAME, TYPESET);

		    -- add to new name list
		    NEW_NAME_LIST := APPEND(NEW_NAME_LIST, NAME);

		-- replace name list with new name list
		end loop;
		LIST(NAME_S, NEW_NAME_LIST);
	    end;


	-- for a return statement
	when DN_RETURN =>
	    declare
		EXP: TREE := D(AS_EXP, STM);

		TYPESET: TYPESET_TYPE;
	    begin

		-- if an expression is given
		if EXP /= CONST_VOID then

		    -- $$$$ check that it is within a function

		    -- resolve the expression
		    EVAL_EXP_TYPES(EXP, TYPESET);
		    REQUIRE_TYPE(H.RETURN_TYPE, EXP, TYPESET);
		    EXP := RESOLVE_EXP(EXP, TYPESET);
		    D(AS_EXP, STM, EXP);

		-- $$$$ else -- since there is no expression given

		    -- $$$$ check that it is not within a function

		end if;
	    end;


	-- for a delay statement
	when DN_DELAY =>
	    declare
		EXP: TREE := D(AS_EXP, STM);

		TYPESET: TYPESET_TYPE;
	    begin

		-- require expression to be of type duration
		EVAL_EXP_TYPES(EXP, TYPESET);
		REQUIRE_TYPE(GET_BASE_TYPE(PREDEFINED_DURATION), EXP, TYPESET);
		EXP := RESOLVE_EXP(EXP, TYPESET);
		D(AS_EXP, STM, EXP);
	    end;


	-- for an assignment statement
	when DN_ASSIGN =>
	    declare
		EXP: TREE := D(AS_EXP, STM);
		NAME: TREE := D(AS_NAME, STM);

		NAME_TYPESET: TYPESET_TYPE;
		EXP_TYPESET: TYPESET_TYPE;
		TYPESET: TYPESET_TYPE;
	    begin
		-- require same nonlimited type
		EVAL_EXP_TYPES(NAME, NAME_TYPESET);
		EVAL_EXP_TYPES(EXP, EXP_TYPESET);
		REQUIRE_NONLIMITED_TYPE(NAME, NAME_TYPESET);
		REQUIRE_SAME_TYPES
			( NAME, NAME_TYPESET
			, EXP, EXP_TYPESET
			, TYPESET );

		-- resolve exp
		EXP := RESOLVE_EXP(EXP, TYPESET);
		D(AS_EXP, STM, EXP);

		-- resolve name
		NAME := RESOLVE_EXP(NAME, TYPESET);
		D(AS_NAME, STM, NAME);

		-- $$$$ need to check that name can be assigned to
	    end;


	-- for an exit statement
	when DN_EXIT =>
	    declare
		EXP: TREE := D(AS_EXP, STM);
		NAME: TREE := D(AS_NAME, STM);

		TYPESET: TYPESET_TYPE;
		LOOP_ID: TREE;
	    begin
		-- if an expression is given
		if EXP /= CONST_VOID then

		    -- require some boolean type
		    EVAL_EXP_TYPES(EXP, TYPESET);
		    REQUIRE_BOOLEAN_TYPE(EXP, TYPESET);
		    EXP := RESOLVE_EXP(EXP, TYPESET);
		    D(AS_EXP, STM, EXP);
		end if;

		-- if a loop name is given
		if NAME /= CONST_VOID then

		    -- require a block_loop_id for enclosing loop
		    NAME := WALK_NAME(DN_BLOCK_LOOP_ID, NAME);
		    LOOP_ID := D(SM_DEFN, NAME);

		    -- $$$$ check that it is an enclosing loop

		-- else -- since no loop name is given
		else

		    -- use id of enclosing loop
		    LOOP_ID := H.ENCLOSING_LOOP_ID;

		    -- check that there is one
		    if LOOP_ID = CONST_VOID then
			ERROR(D(LX_SRCPOS, STM)
                                    , "Exit statement not in a loop" );
		    end if;
		end if;

		-- if the proper enclosing loop has been found
		if LOOP_ID /= CONST_VOID then

		    -- copy pointer to the loop stm into the exit stm
		    D(SM_STM, STM, D(SM_STM, LOOP_ID));
		end if;
	    end;


	-- for a code statement
	when DN_CODE =>
	    declare
	    begin

		-- error -- not supported
                ERROR(D(LX_SRCPOS, STM), "Code statement not supported");
	    end;


	-- for a case statement
	when DN_CASE =>
	    declare
		EXP: TREE := D(AS_EXP, STM);
		ALTERNATIVE_S: constant TREE := D(AS_ALTERNATIVE_S, STM);

		TYPESET: TYPESET_TYPE;
		REQUIRED_TYPE: TREE;

		ALTERNATIVE_LIST: SEQ_TYPE := LIST(ALTERNATIVE_S);
		ALTERNATIVE: TREE;

	    begin

		-- resolve case expression (a complete context)
		EVAL_EXP_TYPES(EXP, TYPESET);
		REQUIRE_DISCRETE_TYPE(EXP, TYPESET);
		-- $$$$ REQUIRE_NOT_GENERIC_FORMAL_TYPE(EXP, TYPESET);
		-- ???? is this used in overload resolution?
		REQUIRE_UNIQUE_TYPE(EXP, TYPESET);
		REQUIRED_TYPE := GET_THE_TYPE(TYPESET);
		EXP := RESOLVE_EXP(EXP, REQUIRED_TYPE);
		D(AS_EXP, STM, EXP);

		-- for each element of the alternative list
		while not IS_EMPTY(ALTERNATIVE_LIST) loop
		    POP(ALTERNATIVE_LIST, ALTERNATIVE);

		    -- if it is a pragma
		    if KIND(ALTERNATIVE) = DN_ALTERNATIVE_PRAGMA then

			-- walk the pragma
			WALK(D(AS_PRAGMA, ALTERNATIVE), H);

		    -- else -- since it must be an alternative
		    else

			-- walk the list of choices
			WALK_DISCRETE_CHOICE_S
				( D(AS_CHOICE_S, ALTERNATIVE)
				, REQUIRED_TYPE );

			-- walk the sequence of statements for this choice
			WALK_STM_S( D(AS_STM_S, ALTERNATIVE), H);
		    end if;
		end loop;

		-- $$$$ check that choices are complete and not overlapping
	    end;


	-- for a goto statement
	when DN_GOTO =>
	    declare
		NAME: TREE := D(AS_NAME, STM);

	    begin

		-- evaluate the label name
		NAME := WALK_NAME(DN_LABEL_ID, NAME);
		D(AS_NAME, STM, NAME);

		-- $$$$ check that goto target is legal
	    end;


	-- for a raise statement
	when DN_RAISE =>
	    declare
		NAME: TREE := D(AS_NAME, STM);
	    begin

		-- if an exception name is given
		if NAME /= CONST_VOID then

		    -- evaluate the exception name
		    NAME := WALK_NAME(DN_EXCEPTION_ID, NAME);
		    D(AS_NAME, STM, NAME);
		end if;
	    end;


	-- for an entry call or a procedure call
	when DN_PROCEDURE_CALL | DN_ENTRY_CALL =>
	    declare
		NAME: TREE := D(AS_NAME, STM);
		GENERAL_ASSOC_S: constant TREE := D(AS_GENERAL_ASSOC_S, STM);

		INDEX_LIST: SEQ_TYPE;
		INDEX: TREE := CONST_VOID;
		INDEX_TYPESET: TYPESET_TYPE;
		DISCRETE_RANGE: TREE;

		NAME_DEFSET: DEFSET_TYPE;
		NAME_ID: TREE;
	    begin
		-- if call is of the form ...(...)(...)
		if KIND(NAME) = DN_FUNCTION_CALL then

		    -- syntax only allows call of member of entry family
		    -- separate the index from the name
		    INDEX_LIST := LIST(D(AS_GENERAL_ASSOC_S, NAME));
		    POP(INDEX_LIST, INDEX);
		    NAME := D(AS_NAME, NAME);

		    -- if the index has named notation
		    if KIND(INDEX) = DN_ASSOC then

			-- report error
                        ERROR(D(LX_SRCPOS,INDEX), "Named notation for index");

			-- evaluate expression types anyway
			INDEX := D(AS_EXP, INDEX);
			EVAL_EXP_TYPES(INDEX, INDEX_TYPESET);

			-- and throw away all interpretations of the index
			INDEX_TYPESET := EMPTY_TYPESET;

		    -- else -- since index does not have named notation
		    else

			-- evaluate expression types
			EVAL_EXP_TYPES(INDEX, INDEX_TYPESET);
		    end if;

		    -- if there is more than one index expression
		    if not IS_EMPTY(INDEX_LIST) then

			-- report error
                        ERROR(D(LX_SRCPOS,INDEX), "More than one entry index");

			-- and throw away all interpretations of the index
			INDEX_TYPESET := EMPTY_TYPESET;
		    end if;

		    -- save index interpretations
		    STASH_TYPESET(INDEX, INDEX_TYPESET);
		end if;

		-- get visible procedure or entry names
		FIND_VISIBILITY(NAME, NAME_DEFSET);
		if KIND(STM) = DN_ENTRY_CALL
		or INDEX /= CONST_VOID then
		    REQUIRE_ENTRY_DEF(NAME, NAME_DEFSET);
		else
		    REQUIRE_PROC_OR_ENTRY_DEF(NAME, NAME_DEFSET);
		end if;

		-- check parameters of visible names
		REDUCE_APPLY_NAMES(NAME, NAME_DEFSET, GENERAL_ASSOC_S, INDEX);

		-- require unique name
		REQUIRE_UNIQUE_DEF(NAME, NAME_DEFSET);
		NAME_ID := GET_THE_ID(NAME_DEFSET);

		-- if it is an entry name
		if KIND(NAME_ID) = DN_ENTRY_ID then

		    -- force statement to be an entry call
		    if KIND(STM) /= DN_ENTRY_CALL then
			STM := MAKE_ENTRY_CALL
				( LX_SRCPOS => D(LX_SRCPOS, STM)
				, AS_NAME => NAME
				, AS_GENERAL_ASSOC_S => GENERAL_ASSOC_S );
		    end if;

		    -- if it is the name of an entry family
		    DISCRETE_RANGE := D(AS_DISCRETE_RANGE, D(SM_SPEC, NAME_ID));
		    if DISCRETE_RANGE /= CONST_VOID then

			-- if there was not an explicit parameter list
			if INDEX = CONST_VOID then

			    -- the (only) parameter is the index
			    INDEX := HEAD(LIST(GENERAL_ASSOC_S));
			    LIST(GENERAL_ASSOC_S, MAKE);
			end if;

			-- resolve the index
			INDEX  := RESOLVE_EXP
				    ( INDEX
				    , GET_BASE_TYPE(DISCRETE_RANGE) );
		    end if;
		end if;

		-- resolve the name
		if KIND(NAME_ID) = DN_ENTRY_ID
		and then KIND(NAME) = DN_SELECTED
		and then KIND(D(XD_REGION, NAME_ID)) = DN_TYPE_ID
                and then DI(XD_LEX_LEVEL, GET_DEF_FOR_ID(NAME_ID)) > 0 then
		    -- do not use Resolve_Name because prefix might be a
		    -- function call, indicating a member of an array of tasks
		    declare
			PREFIX: TREE := D(AS_NAME, NAME);
			DESIGNATOR: TREE := D(AS_DESIGNATOR, NAME);
			TASK_SPEC: TREE :=
				D(SM_TYPE_SPEC, D(XD_REGION, NAME_ID));
			TYPESET: TYPESET_TYPE := FETCH_TYPESET(PREFIX);
			TYPEINTERP: TYPEINTERP_TYPE;
			PREFIX_STRUCT: TREE;
			NEW_TYPESET: TYPESET_TYPE := EMPTY_TYPESET;
		    begin
			while not IS_EMPTY(TYPESET) loop
			    POP(TYPESET, TYPEINTERP);
			    PREFIX_STRUCT := GET_BASE_STRUCT
				    ( GET_TYPE(TYPEINTERP) );
			    if PREFIX_STRUCT = TASK_SPEC
			    or else (KIND(PREFIX_STRUCT) = DN_ACCESS
				    and then GET_BASE_STRUCT
					    ( D(SM_DESIG_TYPE, PREFIX_STRUCT) )
					= TASK_SPEC)
			    then
				ADD_TO_TYPESET(NEW_TYPESET, TYPEINTERP);
			    end if;
			end loop;
			REQUIRE_UNIQUE_TYPE(PREFIX, NEW_TYPESET);
			PREFIX :=  RESOLVE_EXP (PREFIX, NEW_TYPESET);
			D(AS_NAME, NAME, PREFIX);
			DESIGNATOR := RESOLVE_NAME(DESIGNATOR, NAME_ID);
			D(AS_DESIGNATOR, NAME, DESIGNATOR);
			D(SM_EXP_TYPE, NAME, CONST_VOID);
		    end;
		else
		    NAME := RESOLVE_NAME(NAME, NAME_ID);
		end if;

		if INDEX /= CONST_VOID then
		    NAME := MAKE_INDEXED
				( AS_NAME => NAME
				, AS_EXP_S => MAKE_EXP_S
						( LIST => SINGLETON(INDEX)
						, LX_SRCPOS
							=> D(LX_SRCPOS,INDEX) )
				, SM_EXP_TYPE => CONST_VOID
				, LX_SRCPOS => D(LX_SRCPOS,NAME) );
		end if;
		D(AS_NAME, STM, NAME);

		-- resolve parameters and store normalized list
		if IS_EMPTY(NAME_DEFSET) then
		    RESOLVE_ERRONEOUS_PARAM_S(GENERAL_ASSOC_S);
		else
		    D(SM_NORMALIZED_PARAM_S
			    , STM
			    , RESOLVE_SUBP_PARAMETERS
				    ( GET_DEF(HEAD(NAME_DEFSET))
				    , GENERAL_ASSOC_S) );
		end if;
	    end;


	-- for an accept statement
	when DN_ACCEPT =>
	    declare
		NAME: constant TREE := D(AS_NAME, STM);
		PARAM_S: TREE := D(AS_PARAM_S, STM);
		STM_S: constant TREE := D(AS_STM_S, STM);

		DESIGNATOR: TREE := NAME;
		INDEX: TREE := CONST_VOID;
		INDEX_TYPESET: TYPESET_TYPE;
		TEMP_ENTRY_DEF: TREE;
		UNIT_DEF: TREE := H.REGION_DEF;

		PRIOR_ENTRY_DEF: TREE;

		H: H_TYPE := WALK_STM.H;
		S: S_TYPE;
	    begin
		-- $$$$ make sure there is a param_s (should change diana.idl)
		if PARAM_S = CONST_VOID then
		    PARAM_S := MAKE_PARAM_S(LIST => MAKE);
		    D(AS_PARAM_S, STM, PARAM_S);
		end if;

		if KIND(NAME) = DN_INDEXED then
		    INDEX := HEAD(LIST(D(AS_EXP_S,NAME)));
		    D(SM_EXP_TYPE, NAME, CONST_VOID);
		    DESIGNATOR := D(AS_NAME, NAME);
		    EVAL_EXP_TYPES(INDEX, INDEX_TYPESET);
		end if;

		while KIND(D(XD_SOURCE_NAME,UNIT_DEF)) = DN_BLOCK_LOOP_ID
		or else (KIND(D(XD_SOURCE_NAME,UNIT_DEF))) = DN_ENTRY_ID loop
		    UNIT_DEF := D(XD_REGION_DEF, UNIT_DEF);
		end loop;

		H.REGION_DEF := UNIT_DEF;
		TEMP_ENTRY_DEF := MAKE_DEF_FOR_ID
			( MAKE_ENTRY_ID(LX_SYMREP => D(LX_SYMREP, DESIGNATOR))
			, H );
		ENTER_REGION(TEMP_ENTRY_DEF, H, S);
		--WALK_ITEM_S(PARAM_S, H);
		FINISH_PARAM_S(PARAM_S, H);
		if INDEX = CONST_VOID then
		    PRIOR_ENTRY_DEF := GET_PRIOR_HOMOGRAPH_DEF
				( TEMP_ENTRY_DEF
				, PARAM_S );
		else
		    PRIOR_ENTRY_DEF := GET_PRIOR_DEF(TEMP_ENTRY_DEF);
		    if PRIOR_ENTRY_DEF /= CONST_VOID
		    and then KIND(D(XD_SOURCE_NAME,PRIOR_ENTRY_DEF))
				= DN_ENTRY_ID
		    then
			declare
			    SOURCE_NAME: TREE
				    := D(XD_SOURCE_NAME, PRIOR_ENTRY_DEF);
			    DISCRETE_RANGE: TREE
				    := D(AS_DISCRETE_RANGE
					    , D(SM_SPEC, SOURCE_NAME) );
			begin
			    if DISCRETE_RANGE /= CONST_VOID then
				REQUIRE_TYPE(GET_BASE_TYPE(DISCRETE_RANGE)
					, INDEX, INDEX_TYPESET );
				INDEX := RESOLVE_EXP(INDEX, INDEX_TYPESET);
			    else
				ERROR(D(LX_SRCPOS,INDEX),
                                        "Entry must be an entry family");
				INDEX := RESOLVE_EXP(INDEX, CONST_VOID);
			    end if;
			end;
			LIST(D(AS_EXP_S, NAME), SINGLETON(INDEX));
		    else
			PRIOR_ENTRY_DEF := CONST_VOID;
		    end if;
		end if;
		if PRIOR_ENTRY_DEF = CONST_VOID
		or else KIND(D(XD_SOURCE_NAME,PRIOR_ENTRY_DEF)) /= DN_ENTRY_ID
		then
                    ERROR(D(LX_SRCPOS, DESIGNATOR), "No entry for accept");
		    MAKE_DEF_IN_ERROR(TEMP_ENTRY_DEF);
		    PRIOR_ENTRY_DEF := TEMP_ENTRY_DEF;
		elsif D(SM_SPEC,(D(XD_SOURCE_NAME,PRIOR_ENTRY_DEF)))
				= CONST_VOID
		then
		    WARNING(D(LX_SRCPOS,STM),
                                "$$$$ sm-spec is void - "
				& NODE_REP(D(XD_SOURCE_NAME,PRIOR_ENTRY_DEF)) );
		    REMOVE_DEF_FROM_ENVIRONMENT(TEMP_ENTRY_DEF);
		else
		    D(SM_DEFN, DESIGNATOR, D(XD_SOURCE_NAME, PRIOR_ENTRY_DEF));
		    CONFORM_PARAMETER_LISTS
			    ( D(AS_PARAM_S
				, D(SM_SPEC, D(XD_SOURCE_NAME,PRIOR_ENTRY_DEF)))
			    , PARAM_S );
		    REMOVE_DEF_FROM_ENVIRONMENT(TEMP_ENTRY_DEF);
		end if;
		LEAVE_REGION(TEMP_ENTRY_DEF, S);
		H := WALK_STM.H;

		ENTER_BODY(PRIOR_ENTRY_DEF, H, S);
		WALK_STM_S(STM_S, H);
		LEAVE_BODY(PRIOR_ENTRY_DEF, S);
	    end;


	-- for a loop statement
	when DN_LOOP =>
	    declare
		SOURCE_NAME: constant TREE := D(AS_SOURCE_NAME, STM);
		ITERATION: constant TREE := D(AS_ITERATION, STM);
		STM_S: constant TREE := D(AS_STM_S, STM);

		SOURCE_DEF: TREE := GET_DEF_FOR_ID(SOURCE_NAME);

		H: H_TYPE := WALK_STM.H;
		S: S_TYPE;
	    begin

		-- $$$$ check that label is not duplicate in unit

		ENTER_BODY(SOURCE_DEF, H, S);
		H.RETURN_TYPE := WALK_STM.H.RETURN_TYPE;
		if KIND(ITERATION) in CLASS_FOR_REV then
		    declare
			ITERATION_ID: TREE := D(AS_SOURCE_NAME, ITERATION);
			DISCRETE_RANGE: TREE := D(AS_DISCRETE_RANGE, ITERATION);

			ITERATION_ID_DEF: TREE
				    := MAKE_DEF_FOR_ID(ITERATION_ID, H);
			RANGE_TYPESET: TYPESET_TYPE;
		    begin
			EVAL_NON_UNIVERSAL_DISCRETE_RANGE
					( DISCRETE_RANGE
					, RANGE_TYPESET );
			DISCRETE_RANGE := RESOLVE_DISCRETE_RANGE
					( DISCRETE_RANGE
					, GET_THE_TYPE(RANGE_TYPESET) );
			D(AS_DISCRETE_RANGE, ITERATION, DISCRETE_RANGE);

			if not IS_EMPTY(RANGE_TYPESET) then
			    MAKE_DEF_VISIBLE(ITERATION_ID_DEF);
			    D(SM_OBJ_TYPE, ITERATION_ID
					, GET_SUBTYPE_OF_DISCRETE_RANGE
						( DISCRETE_RANGE ) );
			else
			    MAKE_DEF_IN_ERROR(ITERATION_ID_DEF);
			end if;
		    end;

		elsif KIND(ITERATION) = DN_WHILE then
		    declare
			EXP: TREE := D(AS_EXP, ITERATION);
			EXP_TYPESET: TYPESET_TYPE;
		    begin
			EVAL_EXP_TYPES(EXP, EXP_TYPESET);
			REQUIRE_BOOLEAN_TYPE(EXP, EXP_TYPESET);
			REQUIRE_UNIQUE_TYPE(EXP, EXP_TYPESET);
			EXP := RESOLVE_EXP(EXP, GET_THE_TYPE(EXP_TYPESET));
			D(AS_EXP, ITERATION, EXP);
		    end;
		end if;

		-- make this the enclosing loop statement
		H.ENCLOSING_LOOP_ID := SOURCE_NAME;

		-- walk the sequence of statements
		WALK_STM_S(STM_S, H);

		-- leave the declarative region
		LEAVE_BODY(SOURCE_DEF, S);
	    end;


	-- for a block statement
	when DN_BLOCK =>
	    declare
		SOURCE_NAME: constant TREE := D(AS_SOURCE_NAME, STM);
		BLOCK_BODY: constant TREE := D(AS_BLOCK_BODY, STM);

		ITEM_S: TREE := D(AS_ITEM_S, BLOCK_BODY);
		STM_S: TREE := D(AS_STM_S, BLOCK_BODY);
		ALTERNATIVE_S: TREE := D(AS_ALTERNATIVE_S, BLOCK_BODY);
		ALTERNATIVE_LIST: SEQ_TYPE;
		ALTERNATIVE: TREE;

		SOURCE_DEF: TREE := GET_DEF_FOR_ID(SOURCE_NAME);
		H: H_TYPE := WALK_STM.H;
		S: S_TYPE;
	    begin
		-- $$$$ check that label is not duplicate in unit

		ENTER_BODY(SOURCE_DEF, H, S);
		H.RETURN_TYPE := WALK_STM.H.RETURN_TYPE;
		WALK_ITEM_S(ITEM_S, H);
		if STM_S /= CONST_VOID then
		    DECLARE_LABEL_BLOCK_LOOP_IDS(STM_S, H);
		end if;
		if ALTERNATIVE_S = CONST_VOID then
		    ALTERNATIVE_LIST := MAKE;
		else
		    ALTERNATIVE_LIST := LIST(ALTERNATIVE_S);
		end if;
		while not IS_EMPTY(ALTERNATIVE_LIST) loop
		    POP(ALTERNATIVE_LIST, ALTERNATIVE);
		    if KIND(ALTERNATIVE) = DN_ALTERNATIVE then
			DECLARE_LABEL_BLOCK_LOOP_IDS
				( D(AS_STM_S, ALTERNATIVE), H);
		    end if;
		end loop;
		if STM_S /= CONST_VOID then
		    WALK_STM_S(STM_S, H);
		end if;
		WALK_ALTERNATIVE_S(ALTERNATIVE_S, H);
		LEAVE_BODY(SOURCE_DEF, S);
	    end;


	-- for a conditional entry call or a timed entry call
	when DN_COND_ENTRY | DN_TIMED_ENTRY =>
	    declare
		STM_S1: constant TREE := D(AS_STM_S1, STM);
		STM_S2: constant TREE := D(AS_STM_S2, STM);
	    begin
		-- walk the two sequences of statements
		WALK_STM_S(STM_S1, H);
		WALK_STM_S(STM_S2, H);
	    end;


	-- for an if statement
	when DN_IF =>
	    declare
		TEST_CLAUSE_ELEM_S: constant TREE
			     := D(AS_TEST_CLAUSE_ELEM_S, STM);
		STM_S: constant TREE := D(AS_STM_S, STM);

		COND_CLAUSE_LIST: SEQ_TYPE := LIST(TEST_CLAUSE_ELEM_S);
		COND_CLAUSE: TREE;
		EXP: TREE;
		TYPESET: TYPESET_TYPE;
	    begin
		-- for each cond_clause
		while not IS_EMPTY(COND_CLAUSE_LIST) loop
		    POP(COND_CLAUSE_LIST, COND_CLAUSE);

		    -- resolve the conditional expression
		    EXP := D(AS_EXP, COND_CLAUSE);
		    EVAL_EXP_TYPES(EXP, TYPESET);
		    REQUIRE_BOOLEAN_TYPE(EXP, TYPESET);
		    REQUIRE_UNIQUE_TYPE(EXP, TYPESET);
		    EXP := RESOLVE_EXP(EXP, GET_THE_TYPE(TYPESET));
		    D(AS_EXP, COND_CLAUSE, EXP);

		    -- walk the sequence of statements
		    WALK_STM_S(D(AS_STM_S,COND_CLAUSE), H);

		-- walk the (else) sequence of statements
		end loop;
		WALK_STM_S(STM_S, H);
	    end;


	-- for a selective wait
	when DN_SELECTIVE_WAIT =>
	    declare
		TEST_CLAUSE_ELEM_S: constant TREE
			:= D(AS_TEST_CLAUSE_ELEM_S, STM);
		STM_S: TREE := D(AS_STM_S, STM);

		TEST_CLAUSE_LIST: SEQ_TYPE := LIST(TEST_CLAUSE_ELEM_S);
		TEST_CLAUSE: TREE;
		NEW_TEST_CLAUSE_LIST: SEQ_TYPE := MAKE;
		EXP: TREE;
		TYPESET: TYPESET_TYPE;
		SELECT_ALT_PRAGMA : TREE;
	    begin
		-- for each test_clause
		while not IS_EMPTY(TEST_CLAUSE_LIST) loop
		    POP(TEST_CLAUSE_LIST, TEST_CLAUSE);

		    -- if it is a select alternative
		    if KIND(TEST_CLAUSE) = DN_SELECT_ALTERNATIVE then

			-- if there is a when clause
			EXP := D(AS_EXP, TEST_CLAUSE);
			if EXP /= CONST_VOID then

			    -- resolve the conditional expression
			    EVAL_EXP_TYPES(EXP, TYPESET);
			    REQUIRE_BOOLEAN_TYPE(EXP, TYPESET);
			    REQUIRE_UNIQUE_TYPE(EXP, TYPESET);
			    EXP := RESOLVE_EXP(EXP, GET_THE_TYPE(TYPESET));
			    D(AS_EXP, TEST_CLAUSE, EXP);
			end if;

			-- walk the sequence of statements
			WALK_STM_S(D(AS_STM_S,TEST_CLAUSE), H);

			-- add select_alternative to new list
			NEW_TEST_CLAUSE_LIST := APPEND
					( NEW_TEST_CLAUSE_LIST
					, TEST_CLAUSE );

		    -- else -- since it is a stm pragma
		    else

			-- Note: parser generates stm_pragma instead
			-- ... of select_alt pragma to avoid LR(1) conflict

			-- change the stm_pragma to a select_alt_pragma
			SELECT_ALT_PRAGMA := MAKE_SELECT_ALT_PRAGMA
				    ( LX_SRCPOS => D(LX_SRCPOS, TEST_CLAUSE)
				    , AS_PRAGMA => D(AS_PRAGMA, TEST_CLAUSE) );

			-- process the pragma
			WALK(D(AS_PRAGMA, SELECT_ALT_PRAGMA), H);

			-- add select_alt_pragma to new list
			NEW_TEST_CLAUSE_LIST := APPEND
					( NEW_TEST_CLAUSE_LIST
					, SELECT_ALT_PRAGMA );
		    end if;

		-- replace test_clause_list with new list
		end loop;
		LIST(TEST_CLAUSE_ELEM_S, NEW_TEST_CLAUSE_LIST);

		-- walk the (else) sequence of statements
		WALK_STM_S(STM_S, H);
	    end;


	-- for a pragma in a sequence of statements
	when DN_STM_PRAGMA =>
	    declare
		PRAGMA_NODE: constant TREE := D(AS_PRAGMA, STM);
	    begin

		-- walk the pragma
		WALK(PRAGMA_NODE, H);
	    end;


	when others =>
            QUIT("Invalid as stm node");
	end case;


	-- return the new statement (maybe procedure changed to entry)
	return STM;
    end WALK_STM;

end STMWALK;
